//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public enum AssistResult: Codable, Equatable {
    case assistResultOK(AssistResultOK)
    case assistResultNeedsRequestContext(AssistResultNeedsRequestContext)
    case assistResultNeedsClarification(AssistResultNeedsClarification)

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)
        let discriminator: String = try container.decode("type")
        switch discriminator {
        case "needs_clarification":
            self = .assistResultNeedsClarification(try AssistResultNeedsClarification(from: decoder))
        case "needs_request_context":
            self = .assistResultNeedsRequestContext(try AssistResultNeedsRequestContext(from: decoder))
        case "ok":
            self = .assistResultOK(try AssistResultOK(from: decoder))
        default:
            throw DecodingError.dataCorrupted(DecodingError.Context.init(codingPath: decoder.codingPath, debugDescription: "Couldn't find type to decode with discriminator \(discriminator)"))
        }
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.singleValueContainer()
        switch self {
        case .assistResultOK(let content):
            try container.encode(content)
        case .assistResultNeedsRequestContext(let content):
            try container.encode(content)
        case .assistResultNeedsClarification(let content):
            try container.encode(content)
        }
    }
}
