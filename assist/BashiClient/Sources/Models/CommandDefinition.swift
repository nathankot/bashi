//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class CommandDefinition: APIModel {

    public var description: String

    public var args: [Args]

    public var triggerTokens: [String]?

    public class Args: APIModel {

        public var name: String

        public var type: ArgumentType

        public var parse: [ArgumentParser]?

        public init(name: String, type: ArgumentType, parse: [ArgumentParser]? = nil) {
            self.name = name
            self.type = type
            self.parse = parse
        }

        public required init(from decoder: Decoder) throws {
            let container = try decoder.container(keyedBy: StringCodingKey.self)

            name = try container.decode("name")
            type = try container.decode("type")
            parse = try container.decodeArrayIfPresent("parse")
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: StringCodingKey.self)

            try container.encode(name, forKey: "name")
            try container.encode(type, forKey: "type")
            try container.encodeIfPresent(parse, forKey: "parse")
        }

        public func isEqual(to object: Any?) -> Bool {
          guard let object = object as? Args else { return false }
          guard self.name == object.name else { return false }
          guard self.type == object.type else { return false }
          guard self.parse == object.parse else { return false }
          return true
        }

        public static func == (lhs: Args, rhs: Args) -> Bool {
            return lhs.isEqual(to: rhs)
        }
    }

    public init(description: String, args: [Args], triggerTokens: [String]? = nil) {
        self.description = description
        self.args = args
        self.triggerTokens = triggerTokens
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        description = try container.decode("description")
        args = try container.decodeArray("args")
        triggerTokens = try container.decodeArrayIfPresent("triggerTokens")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encode(description, forKey: "description")
        try container.encode(args, forKey: "args")
        try container.encodeIfPresent(triggerTokens, forKey: "triggerTokens")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? CommandDefinition else { return false }
      guard self.description == object.description else { return false }
      guard self.args == object.args else { return false }
      guard self.triggerTokens == object.triggerTokens else { return false }
      return true
    }

    public static func == (lhs: CommandDefinition, rhs: CommandDefinition) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
