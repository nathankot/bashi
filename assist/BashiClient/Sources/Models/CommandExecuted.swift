//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class CommandExecuted: APIModel {

    public enum `Type`: String, Codable, Equatable, CaseIterable {
        case executed = "executed"
    }

    public var line: String

    public var type: `Type`

    public var name: String

    public var args: [Value]

    public var returnValues: [Value]

    public init(line: String, type: `Type`, name: String, args: [Value], returnValues: [Value]) {
        self.line = line
        self.type = type
        self.name = name
        self.args = args
        self.returnValues = returnValues
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        line = try container.decode("line")
        type = try container.decode("type")
        name = try container.decode("name")
        args = try container.decodeArray("args")
        returnValues = try container.decodeArray("returnValues")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encode(line, forKey: "line")
        try container.encode(type, forKey: "type")
        try container.encode(name, forKey: "name")
        try container.encode(args, forKey: "args")
        try container.encode(returnValues, forKey: "returnValues")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? CommandExecuted else { return false }
      guard self.line == object.line else { return false }
      guard self.type == object.type else { return false }
      guard self.name == object.name else { return false }
      guard self.args == object.args else { return false }
      guard self.returnValues == object.returnValues else { return false }
      return true
    }

    public static func == (lhs: CommandExecuted, rhs: CommandExecuted) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
