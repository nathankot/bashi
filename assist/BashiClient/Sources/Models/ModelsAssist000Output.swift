//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class ModelsAssist000Output: APIModel {

    public enum Model: String, Codable, Equatable, CaseIterable {
        case assist000 = "assist-000"
    }

    public var model: Model

    public var request: String

    public var commands: [Command]

    public var missingRequestContext: RequestContextRequirement?

    public init(model: Model, request: String, commands: [Command], missingRequestContext: RequestContextRequirement? = nil) {
        self.model = model
        self.request = request
        self.commands = commands
        self.missingRequestContext = missingRequestContext
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        model = try container.decode("model")
        request = try container.decode("request")
        commands = try container.decodeArray("commands")
        missingRequestContext = try container.decodeIfPresent("missingRequestContext")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encode(model, forKey: "model")
        try container.encode(request, forKey: "request")
        try container.encode(commands, forKey: "commands")
        try container.encodeIfPresent(missingRequestContext, forKey: "missingRequestContext")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? ModelsAssist000Output else { return false }
      guard self.model == object.model else { return false }
      guard self.request == object.request else { return false }
      guard self.commands == object.commands else { return false }
      guard self.missingRequestContext == object.missingRequestContext else { return false }
      return true
    }

    public static func == (lhs: ModelsAssist000Output, rhs: ModelsAssist000Output) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
