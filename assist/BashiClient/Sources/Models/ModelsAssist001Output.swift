//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class ModelsAssist001Output: APIModel {

    public enum Model: String, Codable, Equatable, CaseIterable {
        case assist001 = "assist-001"
    }

    public var model: Model

    public var request: String

    public var result: Result

    public enum Result: Codable, Equatable {
        case resultFinished(ResultFinished)
        case resultNeedsRequestContext(ResultNeedsRequestContext)
        case resultPendingCommands(ResultPendingCommands)

        public init(from decoder: Decoder) throws {
            let container = try decoder.container(keyedBy: StringCodingKey.self)
            let discriminator: String = try container.decode("type")
            switch discriminator {
            case "finished":
                self = .resultFinished(try ResultFinished(from: decoder))
            case "needs_request_context":
                self = .resultNeedsRequestContext(try ResultNeedsRequestContext(from: decoder))
            case "pending_commands":
                self = .resultPendingCommands(try ResultPendingCommands(from: decoder))
            default:
                throw DecodingError.dataCorrupted(DecodingError.Context.init(codingPath: decoder.codingPath, debugDescription: "Couldn't find type to decode with discriminator \(discriminator)"))
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .resultFinished(let content):
                try container.encode(content)
            case .resultNeedsRequestContext(let content):
                try container.encode(content)
            case .resultPendingCommands(let content):
                try container.encode(content)
            }
        }
    }

    public init(model: Model, request: String, result: Result) {
        self.model = model
        self.request = request
        self.result = result
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        model = try container.decode("model")
        request = try container.decode("request")
        result = try container.decode("result")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encode(model, forKey: "model")
        try container.encode(request, forKey: "request")
        try container.encode(result, forKey: "result")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? ModelsAssist001Output else { return false }
      guard self.model == object.model else { return false }
      guard self.request == object.request else { return false }
      guard self.result == object.result else { return false }
      return true
    }

    public static func == (lhs: ModelsAssist001Output, rhs: ModelsAssist001Output) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
