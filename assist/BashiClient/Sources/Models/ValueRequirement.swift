//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public enum ValueRequirement: Codable, Equatable {
    case stringValueRequirement(StringValueRequirement)
    case numberValueRequirement(NumberValueRequirement)
    case booleanValueRequirement(BooleanValueRequirement)

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)
        let discriminator: String = try container.decode("type")
        switch discriminator {
        case "boolean":
            self = .booleanValueRequirement(try BooleanValueRequirement(from: decoder))
        case "number":
            self = .numberValueRequirement(try NumberValueRequirement(from: decoder))
        case "string":
            self = .stringValueRequirement(try StringValueRequirement(from: decoder))
        default:
            throw DecodingError.dataCorrupted(DecodingError.Context.init(codingPath: decoder.codingPath, debugDescription: "Couldn't find type to decode with discriminator \(discriminator)"))
        }
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.singleValueContainer()
        switch self {
        case .stringValueRequirement(let content):
            try container.encode(content)
        case .numberValueRequirement(let content):
            try container.encode(content)
        case .booleanValueRequirement(let content):
            try container.encode(content)
        }
    }
}
