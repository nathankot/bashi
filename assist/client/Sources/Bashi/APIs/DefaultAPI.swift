//
// DefaultAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class DefaultAPI {

    /**
     TODO
     
     - parameter sessionID: (header) A session_id retrieved from POST /sessions 
     - parameter modelsAssist000Input: (body) TODO (optional)
     - returns: ModelsAssist000Output
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func postSessionAssist000(sessionID: String, modelsAssist000Input: ModelsAssist000Input? = nil) async throws -> ModelsAssist000Output {
        let requestBuilder = postSessionAssist000WithRequestBuilder(sessionID: sessionID, modelsAssist000Input: modelsAssist000Input)
        let requestTask = requestBuilder.requestTask
        return try await withTaskCancellationHandler {
            try Task.checkCancellation()
            return try await withCheckedThrowingContinuation { continuation in
                guard !Task.isCancelled else {
                  continuation.resume(throwing: CancellationError())
                  return
                }

                requestBuilder.execute { result in
                    switch result {
                    case let .success(response):
                        continuation.resume(returning: response.body)
                    case let .failure(error):
                        continuation.resume(throwing: error)
                    }
                }
            }
        } onCancel: {
            requestTask.cancel()
        }
    }

    /**
     TODO
     - POST /session/requests/assist-000
     - TODO
     - BASIC:
       - type: http
       - name: account_number
     - parameter sessionID: (header) A session_id retrieved from POST /sessions 
     - parameter modelsAssist000Input: (body) TODO (optional)
     - returns: RequestBuilder<ModelsAssist000Output> 
     */
    open class func postSessionAssist000WithRequestBuilder(sessionID: String, modelsAssist000Input: ModelsAssist000Input? = nil) -> RequestBuilder<ModelsAssist000Output> {
        let localVariablePath = "/session/requests/assist-000"
        let localVariableURLString = BashiAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: modelsAssist000Input)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Session-ID": sessionID.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ModelsAssist000Output>.Type = BashiAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     TODO
     
     - parameter sessionID: (header) A session_id retrieved from POST /sessions 
     - parameter modelsCode000Input: (body) TODO (optional)
     - returns: ModelsCode000Output
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func postSessionCode000(sessionID: String, modelsCode000Input: ModelsCode000Input? = nil) async throws -> ModelsCode000Output {
        let requestBuilder = postSessionCode000WithRequestBuilder(sessionID: sessionID, modelsCode000Input: modelsCode000Input)
        let requestTask = requestBuilder.requestTask
        return try await withTaskCancellationHandler {
            try Task.checkCancellation()
            return try await withCheckedThrowingContinuation { continuation in
                guard !Task.isCancelled else {
                  continuation.resume(throwing: CancellationError())
                  return
                }

                requestBuilder.execute { result in
                    switch result {
                    case let .success(response):
                        continuation.resume(returning: response.body)
                    case let .failure(error):
                        continuation.resume(throwing: error)
                    }
                }
            }
        } onCancel: {
            requestTask.cancel()
        }
    }

    /**
     TODO
     - POST /session/requests/code-000
     - TODO
     - BASIC:
       - type: http
       - name: account_number
     - parameter sessionID: (header) A session_id retrieved from POST /sessions 
     - parameter modelsCode000Input: (body) TODO (optional)
     - returns: RequestBuilder<ModelsCode000Output> 
     */
    open class func postSessionCode000WithRequestBuilder(sessionID: String, modelsCode000Input: ModelsCode000Input? = nil) -> RequestBuilder<ModelsCode000Output> {
        let localVariablePath = "/session/requests/code-000"
        let localVariableURLString = BashiAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: modelsCode000Input)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Session-ID": sessionID.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ModelsCode000Output>.Type = BashiAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     TODO
     
     - parameter sessionID: (header) A session_id retrieved from POST /sessions 
     - parameter body: (body) TODO (optional)
     - returns: PostSessionsRequestAllOfModelConfigurationsInnerAnyOf
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func postSessionNoop(sessionID: String, body: AnyCodable? = nil) async throws -> PostSessionsRequestAllOfModelConfigurationsInnerAnyOf {
        let requestBuilder = postSessionNoopWithRequestBuilder(sessionID: sessionID, body: body)
        let requestTask = requestBuilder.requestTask
        return try await withTaskCancellationHandler {
            try Task.checkCancellation()
            return try await withCheckedThrowingContinuation { continuation in
                guard !Task.isCancelled else {
                  continuation.resume(throwing: CancellationError())
                  return
                }

                requestBuilder.execute { result in
                    switch result {
                    case let .success(response):
                        continuation.resume(returning: response.body)
                    case let .failure(error):
                        continuation.resume(throwing: error)
                    }
                }
            }
        } onCancel: {
            requestTask.cancel()
        }
    }

    /**
     TODO
     - POST /session/requests/noop
     - TODO
     - BASIC:
       - type: http
       - name: account_number
     - parameter sessionID: (header) A session_id retrieved from POST /sessions 
     - parameter body: (body) TODO (optional)
     - returns: RequestBuilder<PostSessionsRequestAllOfModelConfigurationsInnerAnyOf> 
     */
    open class func postSessionNoopWithRequestBuilder(sessionID: String, body: AnyCodable? = nil) -> RequestBuilder<PostSessionsRequestAllOfModelConfigurationsInnerAnyOf> {
        let localVariablePath = "/session/requests/noop"
        let localVariableURLString = BashiAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Session-ID": sessionID.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PostSessionsRequestAllOfModelConfigurationsInnerAnyOf>.Type = BashiAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     TODO
     
     - parameter sessionID: (header) A session_id retrieved from POST /sessions 
     - parameter modelsPassthroughOpenai000Input: (body) TODO (optional)
     - returns: ModelsPassthroughOpenai000Output
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func postSessionPassthroughOpenai000(sessionID: String, modelsPassthroughOpenai000Input: ModelsPassthroughOpenai000Input? = nil) async throws -> ModelsPassthroughOpenai000Output {
        let requestBuilder = postSessionPassthroughOpenai000WithRequestBuilder(sessionID: sessionID, modelsPassthroughOpenai000Input: modelsPassthroughOpenai000Input)
        let requestTask = requestBuilder.requestTask
        return try await withTaskCancellationHandler {
            try Task.checkCancellation()
            return try await withCheckedThrowingContinuation { continuation in
                guard !Task.isCancelled else {
                  continuation.resume(throwing: CancellationError())
                  return
                }

                requestBuilder.execute { result in
                    switch result {
                    case let .success(response):
                        continuation.resume(returning: response.body)
                    case let .failure(error):
                        continuation.resume(throwing: error)
                    }
                }
            }
        } onCancel: {
            requestTask.cancel()
        }
    }

    /**
     TODO
     - POST /session/requests/passthrough-openai-000
     - TODO
     - BASIC:
       - type: http
       - name: account_number
     - parameter sessionID: (header) A session_id retrieved from POST /sessions 
     - parameter modelsPassthroughOpenai000Input: (body) TODO (optional)
     - returns: RequestBuilder<ModelsPassthroughOpenai000Output> 
     */
    open class func postSessionPassthroughOpenai000WithRequestBuilder(sessionID: String, modelsPassthroughOpenai000Input: ModelsPassthroughOpenai000Input? = nil) -> RequestBuilder<ModelsPassthroughOpenai000Output> {
        let localVariablePath = "/session/requests/passthrough-openai-000"
        let localVariableURLString = BashiAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: modelsPassthroughOpenai000Input)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Session-ID": sessionID.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ModelsPassthroughOpenai000Output>.Type = BashiAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     TODO
     
     - parameter sessionID: (header) A session_id retrieved from POST /sessions 
     - parameter modelsTranslate000Input: (body) TODO (optional)
     - returns: ModelsTranslate000Output
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func postSessionTranslate000(sessionID: String, modelsTranslate000Input: ModelsTranslate000Input? = nil) async throws -> ModelsTranslate000Output {
        let requestBuilder = postSessionTranslate000WithRequestBuilder(sessionID: sessionID, modelsTranslate000Input: modelsTranslate000Input)
        let requestTask = requestBuilder.requestTask
        return try await withTaskCancellationHandler {
            try Task.checkCancellation()
            return try await withCheckedThrowingContinuation { continuation in
                guard !Task.isCancelled else {
                  continuation.resume(throwing: CancellationError())
                  return
                }

                requestBuilder.execute { result in
                    switch result {
                    case let .success(response):
                        continuation.resume(returning: response.body)
                    case let .failure(error):
                        continuation.resume(throwing: error)
                    }
                }
            }
        } onCancel: {
            requestTask.cancel()
        }
    }

    /**
     TODO
     - POST /session/requests/translate-000
     - TODO
     - BASIC:
       - type: http
       - name: account_number
     - parameter sessionID: (header) A session_id retrieved from POST /sessions 
     - parameter modelsTranslate000Input: (body) TODO (optional)
     - returns: RequestBuilder<ModelsTranslate000Output> 
     */
    open class func postSessionTranslate000WithRequestBuilder(sessionID: String, modelsTranslate000Input: ModelsTranslate000Input? = nil) -> RequestBuilder<ModelsTranslate000Output> {
        let localVariablePath = "/session/requests/translate-000"
        let localVariableURLString = BashiAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: modelsTranslate000Input)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Session-ID": sessionID.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ModelsTranslate000Output>.Type = BashiAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     TODO
     
     - parameter sessionID: (header) A session_id retrieved from POST /sessions 
     - parameter body: (body) audio data in a conatiner format supported by ffmpeg (optional)
     - returns: ModelsWhisper000Output
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func postSessionWhisper000(sessionID: String, body: URL? = nil) async throws -> ModelsWhisper000Output {
        let requestBuilder = postSessionWhisper000WithRequestBuilder(sessionID: sessionID, body: body)
        let requestTask = requestBuilder.requestTask
        return try await withTaskCancellationHandler {
            try Task.checkCancellation()
            return try await withCheckedThrowingContinuation { continuation in
                guard !Task.isCancelled else {
                  continuation.resume(throwing: CancellationError())
                  return
                }

                requestBuilder.execute { result in
                    switch result {
                    case let .success(response):
                        continuation.resume(returning: response.body)
                    case let .failure(error):
                        continuation.resume(throwing: error)
                    }
                }
            }
        } onCancel: {
            requestTask.cancel()
        }
    }

    /**
     TODO
     - POST /session/requests/whisper-000
     - TODO
     - BASIC:
       - type: http
       - name: account_number
     - parameter sessionID: (header) A session_id retrieved from POST /sessions 
     - parameter body: (body) audio data in a conatiner format supported by ffmpeg (optional)
     - returns: RequestBuilder<ModelsWhisper000Output> 
     */
    open class func postSessionWhisper000WithRequestBuilder(sessionID: String, body: URL? = nil) -> RequestBuilder<ModelsWhisper000Output> {
        let localVariablePath = "/session/requests/whisper-000"
        let localVariableURLString = BashiAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Session-ID": sessionID.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ModelsWhisper000Output>.Type = BashiAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     TODO
     
     - parameter postSessionsRequest: (body) TODO (optional)
     - returns: PostSessions200Response
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func postSessions(postSessionsRequest: PostSessionsRequest? = nil) async throws -> PostSessions200Response {
        let requestBuilder = postSessionsWithRequestBuilder(postSessionsRequest: postSessionsRequest)
        let requestTask = requestBuilder.requestTask
        return try await withTaskCancellationHandler {
            try Task.checkCancellation()
            return try await withCheckedThrowingContinuation { continuation in
                guard !Task.isCancelled else {
                  continuation.resume(throwing: CancellationError())
                  return
                }

                requestBuilder.execute { result in
                    switch result {
                    case let .success(response):
                        continuation.resume(returning: response.body)
                    case let .failure(error):
                        continuation.resume(throwing: error)
                    }
                }
            }
        } onCancel: {
            requestTask.cancel()
        }
    }

    /**
     TODO
     - POST /sessions
     - TODO
     - BASIC:
       - type: http
       - name: account_number
     - parameter postSessionsRequest: (body) TODO (optional)
     - returns: RequestBuilder<PostSessions200Response> 
     */
    open class func postSessionsWithRequestBuilder(postSessionsRequest: PostSessionsRequest? = nil) -> RequestBuilder<PostSessions200Response> {
        let localVariablePath = "/sessions"
        let localVariableURLString = BashiAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: postSessionsRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PostSessions200Response>.Type = BashiAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
