//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public enum Command: Codable, Equatable {
    case commandParseError(CommandParseError)
    case commandInvalid(CommandInvalid)
    case commandParsed(CommandParsed)
    case commandExecuted(CommandExecuted)

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)
        let discriminator: String = try container.decode("type")
        switch discriminator {
        case "executed":
            self = .commandExecuted(try CommandExecuted(from: decoder))
        case "invalid":
            self = .commandInvalid(try CommandInvalid(from: decoder))
        case "parse_error":
            self = .commandParseError(try CommandParseError(from: decoder))
        case "parsed":
            self = .commandParsed(try CommandParsed(from: decoder))
        default:
            throw DecodingError.dataCorrupted(DecodingError.Context.init(codingPath: decoder.codingPath, debugDescription: "Couldn't find type to decode with discriminator \(discriminator)"))
        }
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.singleValueContainer()
        switch self {
        case .commandParseError(let content):
            try container.encode(content)
        case .commandInvalid(let content):
            try container.encode(content)
        case .commandParsed(let content):
            try container.encode(content)
        case .commandExecuted(let content):
            try container.encode(content)
        }
    }
}
