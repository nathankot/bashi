//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class FunctionCallExecuted: APIModel {

    public enum `Type`: String, Codable, Equatable, CaseIterable {
        case executed = "executed"
    }

    public var line: String

    public var type: `Type`

    public var name: String

    public var args: [Args]

    public var returnValue: ReturnValue

    public enum ReturnValue: Codable, Equatable {
        case stringValue(StringValue)
        case numberValue(NumberValue)
        case booleanValue(BooleanValue)

        public init(from decoder: Decoder) throws {
            let container = try decoder.container(keyedBy: StringCodingKey.self)
            let discriminator: String = try container.decode("type")
            switch discriminator {
            case "boolean":
                self = .booleanValue(try BooleanValue(from: decoder))
            case "number":
                self = .numberValue(try NumberValue(from: decoder))
            case "string":
                self = .stringValue(try StringValue(from: decoder))
            default:
                throw DecodingError.dataCorrupted(DecodingError.Context.init(codingPath: decoder.codingPath, debugDescription: "Couldn't find type to decode with discriminator \(discriminator)"))
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .stringValue(let content):
                try container.encode(content)
            case .numberValue(let content):
                try container.encode(content)
            case .booleanValue(let content):
                try container.encode(content)
            }
        }
    }

    public init(line: String, type: `Type`, name: String, args: [Args], returnValue: ReturnValue) {
        self.line = line
        self.type = type
        self.name = name
        self.args = args
        self.returnValue = returnValue
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        line = try container.decode("line")
        type = try container.decode("type")
        name = try container.decode("name")
        args = try container.decodeArray("args")
        returnValue = try container.decode("returnValue")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encode(line, forKey: "line")
        try container.encode(type, forKey: "type")
        try container.encode(name, forKey: "name")
        try container.encode(args, forKey: "args")
        try container.encode(returnValue, forKey: "returnValue")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? FunctionCallExecuted else { return false }
      guard self.line == object.line else { return false }
      guard self.type == object.type else { return false }
      guard self.name == object.name else { return false }
      guard self.args == object.args else { return false }
      guard self.returnValue == object.returnValue else { return false }
      return true
    }

    public static func == (lhs: FunctionCallExecuted, rhs: FunctionCallExecuted) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
