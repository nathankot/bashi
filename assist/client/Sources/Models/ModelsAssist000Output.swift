//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class ModelsAssist000Output: APIModel {

    public enum Model: String, Codable, Equatable, CaseIterable {
        case assist000 = "assist-000"
    }

    public var model: Model

    public var request: String

    public var functionCalls: [FunctionCalls]

    public var missingRequestContext: MissingRequestContext?

    public class MissingRequestContext: APIModel {

        public enum Language: String, Codable, Equatable, CaseIterable {
            case string = "string"
        }

        public enum Text: String, Codable, Equatable, CaseIterable {
            case string = "string"
        }

        public var language: Language?

        public var text: Text?

        public init(language: Language? = nil, text: Text? = nil) {
            self.language = language
            self.text = text
        }

        public required init(from decoder: Decoder) throws {
            let container = try decoder.container(keyedBy: StringCodingKey.self)

            language = try container.decodeIfPresent("language")
            text = try container.decodeIfPresent("text")
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: StringCodingKey.self)

            try container.encodeIfPresent(language, forKey: "language")
            try container.encodeIfPresent(text, forKey: "text")
        }

        public func isEqual(to object: Any?) -> Bool {
          guard let object = object as? MissingRequestContext else { return false }
          guard self.language == object.language else { return false }
          guard self.text == object.text else { return false }
          return true
        }

        public static func == (lhs: MissingRequestContext, rhs: MissingRequestContext) -> Bool {
            return lhs.isEqual(to: rhs)
        }
    }

    public init(model: Model, request: String, functionCalls: [FunctionCalls], missingRequestContext: MissingRequestContext? = nil) {
        self.model = model
        self.request = request
        self.functionCalls = functionCalls
        self.missingRequestContext = missingRequestContext
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        model = try container.decode("model")
        request = try container.decode("request")
        functionCalls = try container.decodeArray("functionCalls")
        missingRequestContext = try container.decodeIfPresent("missingRequestContext")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encode(model, forKey: "model")
        try container.encode(request, forKey: "request")
        try container.encode(functionCalls, forKey: "functionCalls")
        try container.encodeIfPresent(missingRequestContext, forKey: "missingRequestContext")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? ModelsAssist000Output else { return false }
      guard self.model == object.model else { return false }
      guard self.request == object.request else { return false }
      guard self.functionCalls == object.functionCalls else { return false }
      guard self.missingRequestContext == object.missingRequestContext else { return false }
      return true
    }

    public static func == (lhs: ModelsAssist000Output, rhs: ModelsAssist000Output) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
