export const snapshot = {};

snapshot[`parseStatements: someFunction(); someOtherFunction(" aa() ; bbb()") 1`] = `
[
  {
    args: [
    ],
    name: "someFunction",
    type: "call",
  },
  {
    args: [
      {
        type: "string",
        value: " aa() ; bbb()",
      },
    ],
    name: "someOtherFunction",
    type: "call",
  },
]
`;

snapshot[`parseStatements: someFunction();
someOtherFunction(" aa() ; bbb()") 1`] = `
[
  {
    args: [
    ],
    name: "someFunction",
    type: "call",
  },
  {
    args: [
      {
        type: "string",
        value: " aa() ; bbb()",
      },
    ],
    name: "someOtherFunction",
    type: "call",
  },
]
`;

snapshot[`parseStatements: someCall() 1`] = `
[
  {
    args: [
    ],
    name: "someCall",
    type: "call",
  },
]
`;

snapshot[`parseStatements:    someCall()

  1`] = `
[
  {
    args: [
    ],
    name: "someCall",
    type: "call",
  },
]
`;

snapshot[`parseStatements: someCall('a', 111) 1`] = `
[
  {
    args: [
      {
        type: "string",
        value: "a",
      },
      {
        type: "number",
        value: 111,
      },
    ],
    name: "someCall",
    type: "call",
  },
]
`;

snapshot[`parseStatements: someCall('a \\'ha\\'', 111) 1`] = `
[
  {
    args: [
      {
        type: "string",
        value: "a 'ha'",
      },
      {
        type: "number",
        value: 111,
      },
    ],
    name: "someCall",
    type: "call",
  },
]
`;

snapshot[`parseStatements: someCall(\`a\`, 111) 1`] = `
[
  {
    args: [
      {
        type: "string",
        value: "a",
      },
      {
        type: "number",
        value: 111,
      },
    ],
    name: "someCall",
    type: "call",
  },
]
`;

snapshot[`parseStatements: someCall(\`a \\\`ha\\\`\`, 111) 1`] = `
[
  {
    args: [
      {
        type: "string",
        value: "a \`ha\`",
      },
      {
        type: "number",
        value: 111,
      },
    ],
    name: "someCall",
    type: "call",
  },
]
`;

snapshot[`parseStatements: someCall("a", 111) 1`] = `
[
  {
    args: [
      {
        type: "string",
        value: "a",
      },
      {
        type: "number",
        value: 111,
      },
    ],
    name: "someCall",
    type: "call",
  },
]
`;

snapshot[`parseStatements: someCall("a \\"ha\\"", 111) 1`] = `
[
  {
    args: [
      {
        type: "string",
        value: 'a "ha"',
      },
      {
        type: "number",
        value: 111,
      },
    ],
    name: "someCall",
    type: "call",
  },
]
`;

snapshot[`parseStatements: someCall("a", 111,true) 1`] = `
[
  {
    args: [
      {
        type: "string",
        value: "a",
      },
      {
        type: "number",
        value: 111,
      },
      {
        type: "boolean",
        value: true,
      },
    ],
    name: "someCall",
    type: "call",
  },
]
`;

snapshot[`parseStatements: someCall("a", 111, false) 1`] = `
[
  {
    args: [
      {
        type: "string",
        value: "a",
      },
      {
        type: "number",
        value: 111,
      },
      {
        type: "boolean",
        value: false,
      },
    ],
    name: "someCall",
    type: "call",
  },
]
`;

snapshot[`parseStatements: someCall("a false true 123 b", 111, false) 1`] = `
[
  {
    args: [
      {
        type: "string",
        value: "a false true 123 b",
      },
      {
        type: "number",
        value: 111,
      },
      {
        type: "boolean",
        value: false,
      },
    ],
    name: "someCall",
    type: "call",
  },
]
`;

snapshot[`parseStatements: someCall(-123) 1`] = `
[
  {
    args: [
      {
        type: "number",
        value: -123,
      },
    ],
    name: "someCall",
    type: "call",
  },
]
`;

snapshot[`parseStatements: some_call() 1`] = `
[
  {
    args: [
    ],
    name: "some_call",
    type: "call",
  },
]
`;

snapshot[`parseStatements: some-call() 1`] = `
[
  {
    args: [
    ],
    name: "some-call",
    type: "call",
  },
]
`;

snapshot[`parseStatements: SOMECALL() 1`] = `
[
  {
    args: [
    ],
    name: "SOMECALL",
    type: "call",
  },
]
`;

snapshot[`parseStatements: someCall("hi" + ("there" + ("is" + "nesting"))) 1`] = `
[
  {
    args: [
      {
        args: [
          {
            type: "string",
            value: "hi",
          },
          {
            args: [
              {
                type: "string",
                value: "there",
              },
              {
                args: [
                  {
                    type: "string",
                    value: "is",
                  },
                  {
                    type: "string",
                    value: "nesting",
                  },
                ],
                name: "__+__",
                type: "call",
              },
            ],
            name: "__+__",
            type: "call",
          },
        ],
        name: "__+__",
        type: "call",
      },
    ],
    name: "someCall",
    type: "call",
  },
]
`;

snapshot[`parseStatements: someCall("a string " + concated("STRING + blah" + (b() + c()) + "\$")) 1`] = `
[
  {
    args: [
      {
        args: [
          {
            type: "string",
            value: "a string ",
          },
          {
            args: [
              {
                args: [
                  {
                    args: [
                      {
                        type: "string",
                        value: "STRING + blah",
                      },
                      {
                        args: [
                          {
                            args: [
                            ],
                            name: "b",
                            type: "call",
                          },
                          {
                            args: [
                            ],
                            name: "c",
                            type: "call",
                          },
                        ],
                        name: "__+__",
                        type: "call",
                      },
                    ],
                    name: "__+__",
                    type: "call",
                  },
                  {
                    type: "string",
                    value: "\$",
                  },
                ],
                name: "__+__",
                type: "call",
              },
            ],
            name: "concated",
            type: "call",
          },
        ],
        name: "__+__",
        type: "call",
      },
    ],
    name: "someCall",
    type: "call",
  },
]
`;

snapshot[`parseStatements: someCall(\`a string 123 \${interpolate(\`me \${"ha \\" \$ \`" + \`\${ \`"test"\`}\`} true false\`)}\`) 1`] = `'{"index":85,"rowBegin":1,"columnBegin":86,"rowEnd":1,"columnEnd":86}: Unable to tokenize the rest of the input: }\`)'`;

snapshot[`parseStatements: someCall(\`a string \${not_interpolated()}\`) 1`] = `
[
  {
    args: [
      {
        type: "string",
        value: "a string \${not_interpolated()}",
      },
    ],
    name: "someCall",
    type: "call",
  },
]
`;

snapshot[`parseStatements: 123123 1`] = `
[
  {
    type: "number",
    value: 123123,
  },
]
`;

snapshot[`parseStatements: "hi there" 1`] = `
[
  {
    type: "string",
    value: "hi there",
  },
]
`;

snapshot[`parseStatements: true; 123123; 'hi there' 1`] = `
[
  {
    type: "boolean",
    value: true,
  },
  {
    type: "number",
    value: 123123,
  },
  {
    type: "string",
    value: "hi there",
  },
]
`;

snapshot[`parseStatements: assign = "123" 1`] = `
[
  {
    args: [
      {
        type: "string",
        value: "assign",
      },
      {
        type: "string",
        value: "123",
      },
    ],
    name: "__=__",
    type: "call",
  },
]
`;

snapshot[`parseStatements: var a = someCall(123 + 44, "abc") 1`] = `
[
  {
    args: [
      {
        type: "string",
        value: "a",
      },
      {
        args: [
          {
            args: [
              {
                type: "number",
                value: 123,
              },
              {
                type: "number",
                value: 44,
              },
            ],
            name: "__+__",
            type: "call",
          },
          {
            type: "string",
            value: "abc",
          },
        ],
        name: "someCall",
        type: "call",
      },
    ],
    name: "__=__",
    type: "call",
  },
]
`;

snapshot[`parseStatements: let a_aaa = someCall(123 + 44, "abc") 1`] = `
[
  {
    args: [
      {
        type: "string",
        value: "a_aaa",
      },
      {
        args: [
          {
            args: [
              {
                type: "number",
                value: 123,
              },
              {
                type: "number",
                value: 44,
              },
            ],
            name: "__+__",
            type: "call",
          },
          {
            type: "string",
            value: "abc",
          },
        ],
        name: "someCall",
        type: "call",
      },
    ],
    name: "__=__",
    type: "call",
  },
]
`;

snapshot[`parseStatements: const a_aaa = someCall(123 + 44, "abc") 1`] = `
[
  {
    args: [
      {
        type: "string",
        value: "a_aaa",
      },
      {
        args: [
          {
            args: [
              {
                type: "number",
                value: 123,
              },
              {
                type: "number",
                value: 44,
              },
            ],
            name: "__+__",
            type: "call",
          },
          {
            type: "string",
            value: "abc",
          },
        ],
        name: "someCall",
        type: "call",
      },
    ],
    name: "__=__",
    type: "call",
  },
]
`;

snapshot[`parseStatements: const a_aaa = someCall(123 + 44, "abc"); a_aaa + 123 1`] = `
[
  {
    args: [
      {
        type: "string",
        value: "a_aaa",
      },
      {
        args: [
          {
            args: [
              {
                type: "number",
                value: 123,
              },
              {
                type: "number",
                value: 44,
              },
            ],
            name: "__+__",
            type: "call",
          },
          {
            type: "string",
            value: "abc",
          },
        ],
        name: "someCall",
        type: "call",
      },
    ],
    name: "__=__",
    type: "call",
  },
  {
    args: [
      {
        args: [
          {
            type: "string",
            value: "a_aaa",
          },
        ],
        name: "\$ref",
        type: "call",
      },
      {
        type: "number",
        value: 123,
      },
    ],
    name: "__+__",
    type: "call",
  },
]
`;

snapshot[`parseStatements: assign =  1`] = `"<END-OF-FILE>: Unable to consume token: <END-OF-FILE>"`;

snapshot[`parseStatements: malformed("a" 1`] = `"<END-OF-FILE>: Unable to consume token: <END-OF-FILE>"`;

snapshot[`parseStatements: someCall(-123.500) 1`] = `
[
  {
    args: [
      {
        type: "number",
        value: -123.5,
      },
    ],
    name: "someCall",
    type: "call",
  },
]
`;

snapshot[`parseStatements: someCall("hi" + ("there" + (("is + "bad" + "nesting"))) 1`] = `'{"index":36,"rowBegin":1,"columnBegin":37,"rowEnd":1,"columnEnd":40}: Unable to consume token: bad'`;

snapshot[`parseStatements: someCall(true, a(b(), 123), "hello") 1`] = `
[
  {
    args: [
      {
        type: "boolean",
        value: true,
      },
      {
        args: [
          {
            args: [
            ],
            name: "b",
            type: "call",
          },
          {
            type: "number",
            value: 123,
          },
        ],
        name: "a",
        type: "call",
      },
      {
        type: "string",
        value: "hello",
      },
    ],
    name: "someCall",
    type: "call",
  },
]
`;

snapshot[`parseStatements: someCall(true, a(b(), 123), "hello",) 1`] = `
[
  {
    args: [
      {
        type: "boolean",
        value: true,
      },
      {
        args: [
          {
            args: [
            ],
            name: "b",
            type: "call",
          },
          {
            type: "number",
            value: 123,
          },
        ],
        name: "a",
        type: "call",
      },
      {
        type: "string",
        value: "hello",
      },
    ],
    name: "someCall",
    type: "call",
  },
]
`;

snapshot[`parseStatements: someCall(true, a((), 123), "hello",) 1`] = `'{"index":18,"rowBegin":1,"columnBegin":19,"rowEnd":1,"columnEnd":20}: Unable to consume token: )'`;

snapshot[`parseStatements: someCall(true, a(true, 123), "hello",) 1`] = `
[
  {
    args: [
      {
        type: "boolean",
        value: true,
      },
      {
        args: [
          {
            type: "boolean",
            value: true,
          },
          {
            type: "number",
            value: 123,
          },
        ],
        name: "a",
        type: "call",
      },
      {
        type: "string",
        value: "hello",
      },
    ],
    name: "someCall",
    type: "call",
  },
]
`;

snapshot[`parseStatements: someCall(true, a(true(), 123), "hello",) 1`] = `'{"index":21,"rowBegin":1,"columnBegin":22,"rowEnd":1,"columnEnd":23}: Unable to consume token: ('`;

snapshot[`parseStatements: someCall(true, a(true(), 123()), "hello",) 1`] = `'{"index":21,"rowBegin":1,"columnBegin":22,"rowEnd":1,"columnEnd":23}: Unable to consume token: ('`;

snapshot[`parseStatements: someCall(true, a(true(), 123()), "hello"(),) 1`] = `'{"index":21,"rowBegin":1,"columnBegin":22,"rowEnd":1,"columnEnd":23}: Unable to consume token: ('`;

snapshot[`parseStatements: testing blah 1`] = `'{"index":8,"rowBegin":1,"columnBegin":9,"rowEnd":1,"columnEnd":13}: Unable to consume token: blah'`;

snapshot[`parseStatements: empty string 1`] = `"<END-OF-FILE>: Unable to consume token: <END-OF-FILE>"`;

snapshot[`parseActionGroup: Thought: I need to do something
  Action: someFunction(123, "str", true)
  Result: blah blah blah blah 1`] = `
{
  action: 'someFunction(123, "str", true)',
  expressions: [
    {
      args: [
        {
          type: "number",
          value: 123,
        },
        {
          type: "string",
          value: "str",
        },
        {
          type: "boolean",
          value: true,
        },
      ],
      name: "someFunction",
      type: "call",
    },
  ],
  result: "blah blah blah blah",
  thought: "I need to do something",
}
`;

snapshot[`parseActionGroup: Thought: I need to do something
  Action: someFunction(123, "str", true)
  Result: 1`] = `
{
  action: 'someFunction(123, "str", true)',
  expressions: [
    {
      args: [
        {
          type: "number",
          value: 123,
        },
        {
          type: "string",
          value: "str",
        },
        {
          type: "boolean",
          value: true,
        },
      ],
      name: "someFunction",
      type: "call",
    },
  ],
  result: undefined,
  thought: "I need to do something",
}
`;

snapshot[`parseActionGroup: Thought: I need to do something
  Action: someFunction(123, "str", true)
  Result:  1`] = `
{
  action: 'someFunction(123, "str", true)',
  expressions: [
    {
      args: [
        {
          type: "number",
          value: 123,
        },
        {
          type: "string",
          value: "str",
        },
        {
          type: "boolean",
          value: true,
        },
      ],
      name: "someFunction",
      type: "call",
    },
  ],
  result: undefined,
  thought: "I need to do something",
}
`;

snapshot[`parseActionGroup: Thought: I need to do something action: thought: hmmm
  Action: someFunction()  ; someOtherFunction(" aa() ; bbb()")
  Result: blah blah blah blah 1`] = `
{
  action: 'someFunction()  ; someOtherFunction(" aa() ; bbb()")',
  expressions: [
    {
      args: [
      ],
      name: "someFunction",
      type: "call",
    },
    {
      args: [
        {
          type: "string",
          value: " aa() ; bbb()",
        },
      ],
      name: "someOtherFunction",
      type: "call",
    },
  ],
  result: "blah blah blah blah",
  thought: "I need to do something action: thought: hmmm",
}
`;

snapshot[`parseActionGroup: Thought: I need to do something
  Action: someFunction(true); someOtherFunction(true, 123, 'str', "str2") 1`] = `
{
  action: \`someFunction(true); someOtherFunction(true, 123, 'str', "str2")\`,
  expressions: [
    {
      args: [
        {
          type: "boolean",
          value: true,
        },
      ],
      name: "someFunction",
      type: "call",
    },
    {
      args: [
        {
          type: "boolean",
          value: true,
        },
        {
          type: "number",
          value: 123,
        },
        {
          type: "string",
          value: "str",
        },
        {
          type: "string",
          value: "str2",
        },
      ],
      name: "someOtherFunction",
      type: "call",
    },
  ],
  result: undefined,
  thought: "I need to do something",
}
`;

snapshot[`parseActionGroup: tHOUght: I need to do something
  aCTion  :    someFunction();; someOtherFunction() 1`] = `
{
  action: "someFunction();; someOtherFunction()",
  expressions: [
    {
      args: [
      ],
      name: "someFunction",
      type: "call",
    },
    {
      args: [
      ],
      name: "someOtherFunction",
      type: "call",
    },
  ],
  result: undefined,
  thought: "I need to do something",
}
`;

snapshot[`parseActionGroup: Thought: I need to do something Action: head fake
  Action: someFunction(); someOtherFunction()
  Result: blah blah blah blah 1`] = `
{
  action: "someFunction(); someOtherFunction()",
  expressions: [
    {
      args: [
      ],
      name: "someFunction",
      type: "call",
    },
    {
      args: [
      ],
      name: "someOtherFunction",
      type: "call",
    },
  ],
  result: "blah blah blah blah",
  thought: "I need to do something Action: head fake",
}
`;

snapshot[`parseActionGroup: Thought: I need to do something Action: head fake
  Action: someFunction();
   someOtherFunction("Result:")
Result: blah blah blah blah
123123 1`] = `
{
  action: 'someFunction();
   someOtherFunction("Result:")',
  expressions: [
    {
      args: [
      ],
      name: "someFunction",
      type: "call",
    },
    {
      args: [
        {
          type: "string",
          value: "Result:",
        },
      ],
      name: "someOtherFunction",
      type: "call",
    },
  ],
  result: "blah blah blah blah
123123",
  thought: "I need to do something Action: head fake",
}
`;

snapshot[`parseActionGroup: Thought: I need to get the current time in New York and create a calendar event 5 days from now
Action: now() + ' ' + currentTimeForTimezone('America/New_York'); createCalendarEvent(parseRelativeTime('in 5 days'), 'Dinner with Wife'); 1`] = `
{
  action: "now() + ' ' + currentTimeForTimezone('America/New_York'); createCalendarEvent(parseRelativeTime('in 5 days'), 'Dinner with Wife');",
  expressions: [
    {
      args: [
        {
          args: [
            {
              args: [
              ],
              name: "now",
              type: "call",
            },
            {
              type: "string",
              value: " ",
            },
          ],
          name: "__+__",
          type: "call",
        },
        {
          args: [
            {
              type: "string",
              value: "America/New_York",
            },
          ],
          name: "currentTimeForTimezone",
          type: "call",
        },
      ],
      name: "__+__",
      type: "call",
    },
    {
      args: [
        {
          args: [
            {
              type: "string",
              value: "in 5 days",
            },
          ],
          name: "parseRelativeTime",
          type: "call",
        },
        {
          type: "string",
          value: "Dinner with Wife",
        },
      ],
      name: "createCalendarEvent",
      type: "call",
    },
  ],
  result: undefined,
  thought: "I need to get the current time in New York and create a calendar event 5 days from now",
}
`;

snapshot[`parseActionGroup: Thought: I need to get the current time in New York and create a calendar event 5 days from now
Action: "some string"; 123; currentTimeForTimezone('Pacific/Auckland') 1`] = `
{
  action: \`"some string"; 123; currentTimeForTimezone('Pacific/Auckland')\`,
  expressions: [
    {
      type: "string",
      value: "some string",
    },
    {
      type: "number",
      value: 123,
    },
    {
      args: [
        {
          type: "string",
          value: "Pacific/Auckland",
        },
      ],
      name: "currentTimeForTimezone",
      type: "call",
    },
  ],
  result: undefined,
  thought: "I need to get the current time in New York and create a calendar event 5 days from now",
}
`;

snapshot[`parseActionGroup: Thought: multiline strings should work
Action: editCode("func main() {
  fmt.Println(\\"Hello World\\")
}", "go lang", "make it compile"); 1`] = `
{
  action: 'editCode("func main() {
  fmt.Println(\\\\"Hello World\\\\")
}", "go lang", "make it compile");',
  expressions: [
    {
      args: [
        {
          type: "string",
          value: 'func main() {
  fmt.Println("Hello World")
}',
        },
        {
          type: "string",
          value: "go lang",
        },
        {
          type: "string",
          value: "make it compile",
        },
      ],
      name: "editCode",
      type: "call",
    },
  ],
  result: undefined,
  thought: "multiline strings should work",
}
`;

snapshot[`parseActionGroup: Thought no colon doesnt work
Action hahaha 1`] = `
'{"index":0,"rowBegin":1,"columnBegin":1,"rowEnd":2,"columnEnd":1}: Unable to consume token: 
'
`;

snapshot[`parseActionGroup: Action: action should not come first
Thought: ha 1`] = `
'{"index":0,"rowBegin":1,"columnBegin":1,"rowEnd":2,"columnEnd":8}: Unable to consume token: 
Action:'
`;

snapshot[`parseActionGroup: completely invalid 1`] = `
'{"index":0,"rowBegin":1,"columnBegin":1,"rowEnd":2,"columnEnd":1}: Unable to consume token: 
'
`;

snapshot[`parseActionGroup: empty string 1`] = `
'{"index":0,"rowBegin":1,"columnBegin":1,"rowEnd":2,"columnEnd":1}: Unable to consume token: 
'
`;
