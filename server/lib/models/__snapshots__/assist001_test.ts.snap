export const snapshot = {};

snapshot[`all commands resolved on the server 1`] = `
{
  n: 2,
  output: {
    model: "assist-001",
    request: "some request",
    result: {
      resolvedCommands: {
        "0.0": {
          args: [
          ],
          id: "0.0",
          name: "now",
          returnValue: {
            type: "string",
            value: "2022-12-19T08:41:10.000Z",
          },
          type: "executed",
        },
        "0.1": {
          args: [
            {
              type: "string",
              value: "pi^2 + 123",
            },
          ],
          id: "0.1",
          name: "math",
          returnValue: {
            type: "string",
            value: "132.86960440108936",
          },
          type: "executed",
        },
        "1.0": {
          args: [
          ],
          id: "1.0",
          name: "finish",
          returnValue: {
            type: "null",
          },
          type: "executed",
        },
      },
      type: "finished",
    },
  },
  state: undefined,
}
`;

snapshot[`all commands resolved on the server 2`] = `
[
  'Answer the following questions as directly and as best you can.

You have access to tools denoted below in Typescript-like function declarations. String arguments MUST be quoted and any quotes inside them MUST be escaped. Functions that are not listed below MUST NOT be used. Function arguments MUST be literal types. Function calls MAY be nested:

\`answer(answer: string) => null\` - answer the original question directly
\`say(message: string) => null\` - say something
\`write(message: string) => null\` - write/insert a message
\`ask(question: string) => string\` - ask for additional information
\`now() => string\` - get the current time in ISO8601 format
\`math("a mathjs expression ": string) => string\` - compute a math formula
\`relativeTime("natural language description of relative time": string) => string\` - get the time relative to now in ISO8601 format
\`finish() => null\` - mark that the request is finished
\`fail(reason: string) => null\` - indicate the request could not be interpreted

Use the following format:

Request: the input question or request you must answer
Thought: you should always think about what to do
Action: function(s) to call, delimited by ;
Result: the result of the function call
... (this Thought/Action/Result can repeat N times)
Thought: I have completed the request
Action: finish()

Begin!

Request: some request
Thought: ',
  'Answer the following questions as directly and as best you can.

You have access to tools denoted below in Typescript-like function declarations. String arguments MUST be quoted and any quotes inside them MUST be escaped. Functions that are not listed below MUST NOT be used. Function arguments MUST be literal types. Function calls MAY be nested:

\`answer(answer: string) => null\` - answer the original question directly
\`say(message: string) => null\` - say something
\`write(message: string) => null\` - write/insert a message
\`ask(question: string) => string\` - ask for additional information
\`now() => string\` - get the current time in ISO8601 format
\`math("a mathjs expression ": string) => string\` - compute a math formula
\`relativeTime("natural language description of relative time": string) => string\` - get the time relative to now in ISO8601 format
\`finish() => null\` - mark that the request is finished
\`fail(reason: string) => null\` - indicate the request could not be interpreted

Use the following format:

Request: the input question or request you must answer
Thought: you should always think about what to do
Action: function(s) to call, delimited by ;
Result: the result of the function call
... (this Thought/Action/Result can repeat N times)
Thought: I have completed the request
Action: finish()

Begin!

Request: some request
Thought: I need to do something
Action: now(); math("pi^2 + 123")
Result: "2022-12-19T08:41:10.000Z"; "132.86960440108936"
Thought: ',
]
`;

snapshot[`all commands resolved on the server - implicit finish 1`] = `
{
  n: 2,
  output: {
    model: "assist-001",
    request: "some request",
    result: {
      resolvedCommands: {
        "0.0": {
          args: [
          ],
          id: "0.0",
          name: "now",
          returnValue: {
            type: "string",
            value: "2022-12-19T08:41:10.000Z",
          },
          type: "executed",
        },
        "0.1": {
          args: [
            {
              type: "string",
              value: "pi^2 + 123",
            },
          ],
          id: "0.1",
          name: "math",
          returnValue: {
            type: "string",
            value: "132.86960440108936",
          },
          type: "executed",
        },
      },
      type: "finished",
    },
  },
  state: undefined,
}
`;

snapshot[`client resolved command 1`] = `
{
  n: 1,
  output: {
    model: "assist-001",
    request: "some request",
    result: {
      pendingCommands: [
        {
          args: [
            {
              type: "string",
              value: "what do you want?",
            },
          ],
          id: "0.1",
          name: "ask",
          type: "parsed",
        },
      ],
      type: "pending_commands",
    },
  },
  state: {
    modelCallCount: 1,
    pending: {
      action: 'now(); ask("what do you want?")',
      functionCalls: [
        {
          args: [
          ],
          name: "now",
          type: "call",
        },
        {
          args: [
            {
              type: "string",
              value: "what do you want?",
            },
          ],
          name: "ask",
          type: "call",
        },
      ],
      result: undefined,
      thought: "I need to do something",
    },
    request: "some request",
    requestContext: {},
    resolvedActionGroups: [
    ],
    resolvedCommands: {
      "0.0": {
        args: [
        ],
        id: "0.0",
        name: "now",
        returnValue: {
          type: "string",
          value: "2022-12-19T08:41:10.000Z",
        },
        type: "executed",
      },
    },
  },
}
`;

snapshot[`client resolved command - continue but unresolved 1`] = `
{
  n: 0,
  output: {
    model: "assist-001",
    request: "some request",
    result: {
      pendingCommands: [
        {
          args: [
            {
              type: "string",
              value: "what do you want?",
            },
          ],
          id: "0.1",
          name: "ask",
          type: "parsed",
        },
      ],
      type: "pending_commands",
    },
  },
  state: {
    modelCallCount: 1,
    pending: {
      action: 'now(); ask("what do you want?")',
      functionCalls: [
        {
          args: [
          ],
          name: "now",
          type: "call",
        },
        {
          args: [
            {
              type: "string",
              value: "what do you want?",
            },
          ],
          name: "ask",
          type: "call",
        },
      ],
      result: undefined,
      thought: "I need to do something",
    },
    request: "some request",
    requestContext: {},
    resolvedActionGroups: [
    ],
    resolvedCommands: {
      "0.0": {
        args: [
        ],
        id: "0",
        name: "now",
        returnValue: {
          type: "string",
          value: "2022-12-19T08:41:10.000Z",
        },
        type: "executed",
      },
    },
  },
}
`;

snapshot[`client resolved command - wrong return type 1`] = `
{
  n: 0,
  output: {
    model: "assist-001",
    request: "some request",
    result: {
      pendingCommands: [
        {
          args: [
            {
              type: "string",
              value: "what do you want?",
            },
          ],
          id: "0.1",
          name: "ask",
          type: "parsed",
        },
      ],
      type: "pending_commands",
    },
  },
  state: {
    modelCallCount: 1,
    pending: {
      action: 'now(); ask("what do you want?")',
      functionCalls: [
        {
          args: [
          ],
          name: "now",
          type: "call",
        },
        {
          args: [
            {
              type: "string",
              value: "what do you want?",
            },
          ],
          name: "ask",
          type: "call",
        },
      ],
      result: undefined,
      thought: "I need to do something",
    },
    request: "some request",
    requestContext: {},
    resolvedActionGroups: [
    ],
    resolvedCommands: {
      "0.0": {
        args: [
        ],
        id: "0",
        name: "now",
        returnValue: {
          type: "string",
          value: "2022-12-19T08:41:10.000Z",
        },
        type: "executed",
      },
    },
  },
}
`;

snapshot[`client resolved command - fulfilled 1`] = `
{
  n: 0,
  output: {
    model: "assist-001",
    request: "some request",
    result: {
      pendingCommands: [
        {
          args: [
            {
              type: "string",
              value: "what do you want?",
            },
          ],
          id: "0.1",
          name: "ask",
          type: "parsed",
        },
      ],
      type: "pending_commands",
    },
  },
  state: {
    modelCallCount: 1,
    pending: {
      action: 'now(); ask("what do you want?")',
      functionCalls: [
        {
          args: [
          ],
          name: "now",
          type: "call",
        },
        {
          args: [
            {
              type: "string",
              value: "what do you want?",
            },
          ],
          name: "ask",
          type: "call",
        },
      ],
      result: undefined,
      thought: "I need to do something",
    },
    request: "some request",
    requestContext: {},
    resolvedActionGroups: [
    ],
    resolvedCommands: {
      "0.0": {
        args: [
        ],
        id: "0",
        name: "now",
        returnValue: {
          type: "string",
          value: "2022-12-19T08:41:10.000Z",
        },
        type: "executed",
      },
    },
  },
}
`;

snapshot[`client resolved command - fulfilled 2`] = `
[
]
`;

snapshot[`nested calls 1`] = `
{
  n: 1,
  output: {
    model: "assist-001",
    request: "some request",
    result: {
      pendingCommands: [
        {
          args: [
            {
              type: "string",
              value: "2022-12-24T08:41:10.000Z",
            },
            {
              type: "string",
              value: "Dinner with Wife",
            },
          ],
          id: "0.1",
          name: "createCalendarEvent",
          type: "parsed",
        },
      ],
      type: "pending_commands",
    },
  },
  state: {
    modelCallCount: 1,
    pending: {
      action: 'time("America/New_York"); createCalendarEvent(relativeTime("5 days from now"), "Dinner with Wife")',
      functionCalls: [
        {
          args: [
            {
              type: "string",
              value: "America/New_York",
            },
          ],
          name: "time",
          type: "call",
        },
        {
          args: [
            {
              args: [
                {
                  type: "string",
                  value: "5 days from now",
                },
              ],
              name: "relativeTime",
              type: "call",
            },
            {
              type: "string",
              value: "Dinner with Wife",
            },
          ],
          name: "createCalendarEvent",
          type: "call",
        },
      ],
      result: undefined,
      thought: "I need to get the current time in New York and create a calendar event 5 days from now",
    },
    request: "some request",
    requestContext: {},
    resolvedActionGroups: [
    ],
    resolvedCommands: {
      "0.0": {
        args: [
          {
            type: "string",
            value: "America/New_York",
          },
        ],
        id: "0.0",
        name: "time",
        returnValue: {
          type: "string",
          value: "12/19/2022, 3:41:10 AM",
        },
        type: "executed",
      },
      "0.1.0": {
        args: [
          {
            type: "string",
            value: "5 days from now",
          },
        ],
        id: "0.1.0",
        name: "relativeTime",
        returnValue: {
          type: "string",
          value: "2022-12-24T08:41:10.000Z",
        },
        type: "executed",
      },
    },
  },
}
`;

snapshot[`nested calls 2`] = `
[
  'Answer the following questions as directly and as best you can.

You have access to tools denoted below in Typescript-like function declarations. String arguments MUST be quoted and any quotes inside them MUST be escaped. Functions that are not listed below MUST NOT be used. Function arguments MUST be literal types. Function calls MAY be nested:

\`answer(answer: string) => null\` - answer the original question directly
\`say(message: string) => null\` - say something
\`write(message: string) => null\` - write/insert a message
\`ask(question: string) => string\` - ask for additional information
\`now() => string\` - get the current time in ISO8601 format
\`math("a mathjs expression ": string) => string\` - compute a math formula
\`relativeTime("natural language description of relative time": string) => string\` - get the time relative to now in ISO8601 format
\`finish() => null\` - mark that the request is finished
\`fail(reason: string) => null\` - indicate the request could not be interpreted

Use the following format:

Request: the input question or request you must answer
Thought: you should always think about what to do
Action: function(s) to call, delimited by ;
Result: the result of the function call
... (this Thought/Action/Result can repeat N times)
Thought: I have completed the request
Action: finish()

Begin!

Request: some request
Thought: ',
]
`;

snapshot[`request needs more context 1`] = `
{
  n: 1,
  output: {
    model: "assist-001",
    request: "some request",
    result: {
      missingRequestContext: {
        text: {
          type: "string",
        },
      },
      type: "needs_request_context",
    },
  },
  state: {
    modelCallCount: 1,
    pending: {
      action: 'now(); editProse("convert to poem"); now()',
      functionCalls: [
        {
          args: [
          ],
          name: "now",
          type: "call",
        },
        {
          args: [
            {
              type: "string",
              value: "convert to poem",
            },
          ],
          name: "editProse",
          type: "call",
        },
        {
          args: [
          ],
          name: "now",
          type: "call",
        },
      ],
      result: undefined,
      thought: "I need to do something",
    },
    request: "some request",
    requestContext: {},
    resolvedActionGroups: [
    ],
    resolvedCommands: {
      "0.0": {
        args: [
        ],
        id: "0.0",
        name: "now",
        returnValue: {
          type: "string",
          value: "2022-12-19T08:41:10.000Z",
        },
        type: "executed",
      },
    },
  },
}
`;

snapshot[`request needs more context - still missing 1`] = `
{
  n: 0,
  output: {
    model: "assist-001",
    request: "some request",
    result: {
      missingRequestContext: {
        text: {
          type: "string",
        },
      },
      type: "needs_request_context",
    },
  },
  state: {
    modelCallCount: 1,
    pending: {
      action: 'editProse("convert to poem"); now()',
      functionCalls: [
        {
          args: [
            {
              type: "string",
              value: "convert to poem",
            },
          ],
          name: "editProse",
          type: "call",
        },
        {
          args: [
          ],
          name: "now",
          type: "call",
        },
      ],
      result: undefined,
      thought: "I need to do something",
    },
    request: "some request",
    requestContext: {},
    resolvedActionGroups: [
      {
        action: "someCommand()",
        functionCalls: [
          {
            args: [
            ],
            name: "someCommand",
            type: "call",
          },
        ],
        result: '"blah"',
        thought: "I need to call some command",
      },
    ],
    resolvedCommands: {
      "0.0": {
        args: [
        ],
        id: "0",
        name: "someCommand",
        returnValue: {
          type: "string",
          value: "blah",
        },
        type: "executed",
      },
    },
  },
}
`;

snapshot[`request needs more context - wrong type 1`] = `
{
  n: 0,
  output: {
    model: "assist-001",
    request: "some request",
    result: {
      missingRequestContext: {
        text: {
          type: "string",
        },
      },
      type: "needs_request_context",
    },
  },
  state: {
    modelCallCount: 1,
    pending: {
      action: 'editProse("convert to poem"); now()',
      functionCalls: [
        {
          args: [
            {
              type: "string",
              value: "convert to poem",
            },
          ],
          name: "editProse",
          type: "call",
        },
        {
          args: [
          ],
          name: "now",
          type: "call",
        },
      ],
      result: undefined,
      thought: "I need to do something",
    },
    request: "some request",
    requestContext: {
      text: {
        type: "number",
        value: 123,
      },
    },
    resolvedActionGroups: [
      {
        action: "someCommand()",
        functionCalls: [
          {
            args: [
            ],
            name: "someCommand",
            type: "call",
          },
        ],
        result: '"blah"',
        thought: "I need to call some command",
      },
    ],
    resolvedCommands: {
      "0.0": {
        args: [
        ],
        id: "0",
        name: "someCommand",
        returnValue: {
          type: "string",
          value: "blah",
        },
        type: "executed",
      },
    },
  },
}
`;

snapshot[`request needs more context - fulfilled 1`] = `
{
  n: 2,
  output: {
    model: "assist-001",
    request: "some request",
    result: {
      resolvedCommands: {
        "0.0": {
          args: [
          ],
          id: "0",
          name: "someCommand",
          returnValue: {
            type: "string",
            value: "blah",
          },
          type: "executed",
        },
        "1.0": {
          args: [
            {
              type: "string",
              value: "convert to poem",
            },
          ],
          id: "1.0",
          name: "editProse",
          returnValue: {
            type: "string",
            value: "the result of editProse()",
          },
          type: "executed",
        },
        "1.1": {
          args: [
          ],
          id: "1.1",
          name: "now",
          returnValue: {
            type: "string",
            value: "2022-12-19T08:41:10.000Z",
          },
          type: "executed",
        },
        "2.0": {
          args: [
          ],
          id: "2.0",
          name: "finish",
          returnValue: {
            type: "null",
          },
          type: "executed",
        },
      },
      type: "finished",
    },
  },
  state: undefined,
}
`;

snapshot[`request needs more context - fulfilled 2`] = `
[
  "Rewrite and edit the following text. The requirement is 'convert to poem':

some text",
  'Answer the following questions as directly and as best you can.

You have access to tools denoted below in Typescript-like function declarations. String arguments MUST be quoted and any quotes inside them MUST be escaped. Functions that are not listed below MUST NOT be used. Function arguments MUST be literal types. Function calls MAY be nested:

\`answer(answer: string) => null\` - answer the original question directly
\`say(message: string) => null\` - say something
\`write(message: string) => null\` - write/insert a message
\`ask(question: string) => string\` - ask for additional information
\`now() => string\` - get the current time in ISO8601 format
\`math("a mathjs expression ": string) => string\` - compute a math formula
\`relativeTime("natural language description of relative time": string) => string\` - get the time relative to now in ISO8601 format
\`finish() => null\` - mark that the request is finished
\`fail(reason: string) => null\` - indicate the request could not be interpreted

Use the following format:

Request: the input question or request you must answer
Thought: you should always think about what to do
Action: function(s) to call, delimited by ;
Result: the result of the function call
... (this Thought/Action/Result can repeat N times)
Thought: I have completed the request
Action: finish()

Begin!

Request: some request
Thought: I need to call some command
Action: someCommand()
Result: "blah"
Thought: I need to do something
Action: editProse("convert to poem"); now()
Result: "the result of editProse()"; "2022-12-19T08:41:10.000Z"
Thought: ',
]
`;

snapshot[`fulfilled but max loops 1`] = `"max iteration count of 5 reached"`;

snapshot[`wrong arg type 1`] = `"arguments are invalid"`;

snapshot[`wrong arg count 1`] = `"arguments are invalid"`;

snapshot[`top level commands are resolved sequentially 1`] = `
{
  n: 1,
  output: {
    model: "assist-001",
    request: "some request",
    result: {
      pendingCommands: [
        {
          args: [
            {
              type: "string",
              value: "how are you?",
            },
          ],
          id: "0.0",
          name: "ask",
          type: "parsed",
        },
      ],
      type: "pending_commands",
    },
  },
  state: {
    modelCallCount: 1,
    pending: {
      action: 'ask("how are you?"); time("America/New_York")',
      functionCalls: [
        {
          args: [
            {
              type: "string",
              value: "how are you?",
            },
          ],
          name: "ask",
          type: "call",
        },
        {
          args: [
            {
              type: "string",
              value: "America/New_York",
            },
          ],
          name: "time",
          type: "call",
        },
      ],
      result: undefined,
      thought: "some thought",
    },
    request: "some request",
    requestContext: {},
    resolvedActionGroups: [
    ],
    resolvedCommands: {},
  },
}
`;

snapshot[`top level commands are resolved sequentially 2 1`] = `
{
  n: 1,
  output: {
    model: "assist-001",
    request: "some request",
    result: {
      resolvedCommands: {
        "0.0": {
          args: [
            {
              type: "string",
              value: "how are you?",
            },
          ],
          id: "0.0",
          name: "ask",
          returnValue: {
            type: "string",
            value: "good",
          },
          type: "executed",
        },
        "0.1": {
          args: [
            {
              type: "string",
              value: "America/New_York",
            },
          ],
          id: "0.1",
          name: "time",
          returnValue: {
            type: "string",
            value: "12/19/2022, 3:41:10 AM",
          },
          type: "executed",
        },
        "1.0": {
          args: [
          ],
          id: "1.0",
          name: "finish",
          returnValue: {
            type: "null",
          },
          type: "executed",
        },
      },
      type: "finished",
    },
  },
  state: undefined,
}
`;

snapshot[`example A step 1 1`] = `
{
  pendingCommands: [
    {
      args: [
      ],
      id: "0.0",
      name: "a",
      type: "parsed",
    },
    {
      args: [
      ],
      id: "0.1.1",
      name: "c",
      type: "parsed",
    },
  ],
}
`;

snapshot[`example A step 2 1`] = `
{
  pendingCommands: [
    {
      args: [
        {
          type: "number",
          value: 123,
        },
        {
          type: "string",
          value: "blah",
        },
      ],
      id: "0.1",
      name: "b",
      type: "parsed",
    },
  ],
}
`;

snapshot[`example A step 3 1`] = `
{
  pendingCommands: [
    {
      args: [
        {
          type: "number",
          value: 123,
        },
        {
          type: "string",
          value: "ha",
        },
      ],
      id: "0",
      name: "test",
      type: "parsed",
    },
  ],
}
`;

snapshot[`example A step 4 1`] = `
{
  result: {
    type: "number",
    value: 123,
  },
}
`;
