export const snapshot = {};

snapshot[`all commands resolved on the server 1`] = `
{
  n: 2,
  output: {
    dev: undefined,
    model: "assist-001",
    request: "some request",
    result: {
      resolvedCommands: [
        {
          args: [
          ],
          id: "0.0",
          name: "now",
          returnValue: {
            type: "string",
            value: "2022-12-19T08:41:10Z",
          },
          type: "executed",
        },
        {
          args: [
            {
              type: "string",
              value: "pi^2 + 123",
            },
          ],
          id: "0.1",
          name: "math",
          returnValue: {
            type: "string",
            value: "132.86960440108936",
          },
          type: "executed",
        },
        {
          args: [
          ],
          id: "1.0",
          name: "finish",
          returnValue: {
            type: "void",
          },
          type: "executed",
        },
      ],
      type: "finished",
    },
  },
  state: undefined,
}
`;

snapshot[`all commands resolved on the server 2`] = `
[
  'Fulfill the question/request as best you can. Aim to minimize the number of Actions used.

The language for Action is a tiny subset of javascript, ONLY these features are available:

* function calls
* function call nesting
* string concatenation using +

Available functions are declared below, these are the only functions available:

\`answer(answer: string) => void\` - answer the original question directly
\`say(message: string) => void\` - say something
\`write(message: string) => void\` - write/insert a message
\`ask(question: string) => string\` - get answer to a request for additional information
\`now() => string\` - get the users current ISO8601 datetime
\`math("a mathjs expression ": string) => string\` - compute a math formula
\`parseRelativeTime(naturalLanguageRelativeTime: string) => string\` - parse ISO8601 datetime relative to now from natural language
\`finish() => void\` - mark request/question as fulfilled
\`fail(reason: string) => void\` - indicate the request cannot be fulfilled with the available tools
\`__+__(lhs: string, rhs: string) => string\` - string concatenation using the + infix operand

Use the following format:
Request: the question or request you must answer
Thought: you should always think about what to do
Action: one ore more expressions composing available functions delimited by ;
Result: the result of the Action expression
... (this Thought/Action/Result can repeat N times)

Begin!

Request: some request
Thought: ',
  'Fulfill the question/request as best you can. Aim to minimize the number of Actions used.

The language for Action is a tiny subset of javascript, ONLY these features are available:

* function calls
* function call nesting
* string concatenation using +

Available functions are declared below, these are the only functions available:

\`answer(answer: string) => void\` - answer the original question directly
\`say(message: string) => void\` - say something
\`write(message: string) => void\` - write/insert a message
\`ask(question: string) => string\` - get answer to a request for additional information
\`now() => string\` - get the users current ISO8601 datetime
\`math("a mathjs expression ": string) => string\` - compute a math formula
\`parseRelativeTime(naturalLanguageRelativeTime: string) => string\` - parse ISO8601 datetime relative to now from natural language
\`finish() => void\` - mark request/question as fulfilled
\`fail(reason: string) => void\` - indicate the request cannot be fulfilled with the available tools
\`__+__(lhs: string, rhs: string) => string\` - string concatenation using the + infix operand

Use the following format:
Request: the question or request you must answer
Thought: you should always think about what to do
Action: one ore more expressions composing available functions delimited by ;
Result: the result of the Action expression
... (this Thought/Action/Result can repeat N times)

Begin!

Request: some request
Thought: I need to do something
Action: now(); math("pi^2 + 123")
Result: "2022-12-19T08:41:10Z"; "132.86960440108936"
Thought: ',
]
`;

snapshot[`all commands resolved on the server - implicit finish 1`] = `
{
  n: 2,
  output: {
    dev: undefined,
    model: "assist-001",
    request: "some request",
    result: {
      resolvedCommands: [
        {
          args: [
          ],
          id: "0.0",
          name: "now",
          returnValue: {
            type: "string",
            value: "2022-12-19T08:41:10Z",
          },
          type: "executed",
        },
        {
          args: [
            {
              type: "string",
              value: "pi^2 + 123",
            },
          ],
          id: "0.1",
          name: "math",
          returnValue: {
            type: "string",
            value: "132.86960440108936",
          },
          type: "executed",
        },
      ],
      type: "finished",
    },
  },
  state: undefined,
}
`;

snapshot[`infix + operand support 1`] = `
{
  n: 1,
  output: {
    dev: undefined,
    model: "assist-001",
    request: "some request",
    result: {
      pendingCommands: [
        {
          args: [
            {
              type: "string",
              value: "infix 2022-12-19T03:41:10-05:00 hello",
            },
          ],
          id: "0.0",
          name: "answer",
          type: "parsed",
        },
      ],
      resolvedCommands: [
        {
          args: [
            {
              type: "string",
              value: "America/New_York",
            },
          ],
          id: "0.0.0.1.0",
          name: "currentTimeForTimezone",
          returnValue: {
            type: "string",
            value: "2022-12-19T03:41:10-05:00",
          },
          type: "executed",
        },
        {
          args: [
            {
              type: "string",
              value: "2022-12-19T03:41:10-05:00",
            },
            {
              type: "string",
              value: " hello",
            },
          ],
          id: "0.0.0.1",
          name: "__+__",
          returnValue: {
            type: "string",
            value: "2022-12-19T03:41:10-05:00 hello",
          },
          type: "executed",
        },
        {
          args: [
            {
              type: "string",
              value: "infix ",
            },
            {
              type: "string",
              value: "2022-12-19T03:41:10-05:00 hello",
            },
          ],
          id: "0.0.0",
          name: "__+__",
          returnValue: {
            type: "string",
            value: "infix 2022-12-19T03:41:10-05:00 hello",
          },
          type: "executed",
        },
      ],
      type: "pending_commands",
    },
  },
  state: {
    modelCallCount: 1,
    pending: {
      action: 'answer("infix " + (currentTimeForTimezone("America/New_York") + " hello"))',
      functionCalls: [
        {
          args: [
            {
              args: [
                {
                  type: "string",
                  value: "infix ",
                },
                {
                  args: [
                    {
                      args: [
                        {
                          type: "string",
                          value: "America/New_York",
                        },
                      ],
                      name: "currentTimeForTimezone",
                      type: "call",
                    },
                    {
                      type: "string",
                      value: " hello",
                    },
                  ],
                  name: "__+__",
                  type: "call",
                },
              ],
              name: "__+__",
              type: "call",
            },
          ],
          name: "answer",
          type: "call",
        },
      ],
      result: undefined,
      thought: "I need to do something",
    },
    request: "some request",
    requestContext: {},
    resolvedActionGroups: [
    ],
    resolvedCommands: [
      {
        args: [
          {
            type: "string",
            value: "America/New_York",
          },
        ],
        id: "0.0.0.1.0",
        name: "currentTimeForTimezone",
        returnValue: {
          type: "string",
          value: "2022-12-19T03:41:10-05:00",
        },
        type: "executed",
      },
      {
        args: [
          {
            type: "string",
            value: "2022-12-19T03:41:10-05:00",
          },
          {
            type: "string",
            value: " hello",
          },
        ],
        id: "0.0.0.1",
        name: "__+__",
        returnValue: {
          type: "string",
          value: "2022-12-19T03:41:10-05:00 hello",
        },
        type: "executed",
      },
      {
        args: [
          {
            type: "string",
            value: "infix ",
          },
          {
            type: "string",
            value: "2022-12-19T03:41:10-05:00 hello",
          },
        ],
        id: "0.0.0",
        name: "__+__",
        returnValue: {
          type: "string",
          value: "infix 2022-12-19T03:41:10-05:00 hello",
        },
        type: "executed",
      },
    ],
  },
}
`;

snapshot[`supports model outputs with lots of newlines 1`] = `
{
  n: 1,
  output: {
    dev: undefined,
    model: "assist-001",
    request: "some request",
    result: {
      pendingCommands: [
        {
          args: [
            {
              type: "string",
              value: "The time in New York is 2022-12-19T03:41:10-05:00 and I have created a calendar event for dinner with your wife 5 days from now.",
            },
          ],
          id: "0.0",
          name: "answer",
          type: "parsed",
        },
      ],
      resolvedCommands: [
        {
          args: [
            {
              type: "string",
              value: "America/New_York",
            },
          ],
          id: "0.0.0.0.1",
          name: "currentTimeForTimezone",
          returnValue: {
            type: "string",
            value: "2022-12-19T03:41:10-05:00",
          },
          type: "executed",
        },
        {
          args: [
            {
              type: "string",
              value: "The time in New York is ",
            },
            {
              type: "string",
              value: "2022-12-19T03:41:10-05:00",
            },
          ],
          id: "0.0.0.0",
          name: "__+__",
          returnValue: {
            type: "string",
            value: "The time in New York is 2022-12-19T03:41:10-05:00",
          },
          type: "executed",
        },
        {
          args: [
            {
              type: "string",
              value: "The time in New York is 2022-12-19T03:41:10-05:00",
            },
            {
              type: "string",
              value: " and I have created a calendar event for dinner with your wife 5 days from now.",
            },
          ],
          id: "0.0.0",
          name: "__+__",
          returnValue: {
            type: "string",
            value: "The time in New York is 2022-12-19T03:41:10-05:00 and I have created a calendar event for dinner with your wife 5 days from now.",
          },
          type: "executed",
        },
      ],
      type: "pending_commands",
    },
  },
  state: {
    modelCallCount: 1,
    pending: {
      action: 'answer("The time in New York is " + currentTimeForTimezone("America/New_York") + " and I have created a calendar event for dinner with your wife 5 days from now.");
createCalendarEvent(parseRelativeTime("5 days from now"), "Dinner with wife");
finish();',
      functionCalls: [
        {
          args: [
            {
              args: [
                {
                  args: [
                    {
                      type: "string",
                      value: "The time in New York is ",
                    },
                    {
                      args: [
                        {
                          type: "string",
                          value: "America/New_York",
                        },
                      ],
                      name: "currentTimeForTimezone",
                      type: "call",
                    },
                  ],
                  name: "__+__",
                  type: "call",
                },
                {
                  type: "string",
                  value: " and I have created a calendar event for dinner with your wife 5 days from now.",
                },
              ],
              name: "__+__",
              type: "call",
            },
          ],
          name: "answer",
          type: "call",
        },
        {
          args: [
            {
              args: [
                {
                  type: "string",
                  value: "5 days from now",
                },
              ],
              name: "parseRelativeTime",
              type: "call",
            },
            {
              type: "string",
              value: "Dinner with wife",
            },
          ],
          name: "createCalendarEvent",
          type: "call",
        },
        {
          args: [
          ],
          name: "finish",
          type: "call",
        },
      ],
      result: undefined,
      thought: "I need to get the current time in New York, create a calendar event 5 days from now, and answer the question.",
    },
    request: "some request",
    requestContext: {},
    resolvedActionGroups: [
    ],
    resolvedCommands: [
      {
        args: [
          {
            type: "string",
            value: "America/New_York",
          },
        ],
        id: "0.0.0.0.1",
        name: "currentTimeForTimezone",
        returnValue: {
          type: "string",
          value: "2022-12-19T03:41:10-05:00",
        },
        type: "executed",
      },
      {
        args: [
          {
            type: "string",
            value: "The time in New York is ",
          },
          {
            type: "string",
            value: "2022-12-19T03:41:10-05:00",
          },
        ],
        id: "0.0.0.0",
        name: "__+__",
        returnValue: {
          type: "string",
          value: "The time in New York is 2022-12-19T03:41:10-05:00",
        },
        type: "executed",
      },
      {
        args: [
          {
            type: "string",
            value: "The time in New York is 2022-12-19T03:41:10-05:00",
          },
          {
            type: "string",
            value: " and I have created a calendar event for dinner with your wife 5 days from now.",
          },
        ],
        id: "0.0.0",
        name: "__+__",
        returnValue: {
          type: "string",
          value: "The time in New York is 2022-12-19T03:41:10-05:00 and I have created a calendar event for dinner with your wife 5 days from now.",
        },
        type: "executed",
      },
    ],
  },
}
`;

snapshot[`client resolved command 1`] = `
{
  n: 1,
  output: {
    dev: undefined,
    model: "assist-001",
    request: "some request",
    result: {
      pendingCommands: [
        {
          args: [
            {
              type: "string",
              value: "what do you want?",
            },
          ],
          id: "0.1",
          name: "ask",
          type: "parsed",
        },
      ],
      resolvedCommands: [
        {
          args: [
          ],
          id: "0.0",
          name: "now",
          returnValue: {
            type: "string",
            value: "2022-12-19T08:41:10Z",
          },
          type: "executed",
        },
      ],
      type: "pending_commands",
    },
  },
  state: {
    modelCallCount: 1,
    pending: {
      action: 'now(); ask("what do you want?")',
      functionCalls: [
        {
          args: [
          ],
          name: "now",
          type: "call",
        },
        {
          args: [
            {
              type: "string",
              value: "what do you want?",
            },
          ],
          name: "ask",
          type: "call",
        },
      ],
      result: undefined,
      thought: "I need to do something",
    },
    request: "some request",
    requestContext: {},
    resolvedActionGroups: [
    ],
    resolvedCommands: [
      {
        args: [
        ],
        id: "0.0",
        name: "now",
        returnValue: {
          type: "string",
          value: "2022-12-19T08:41:10Z",
        },
        type: "executed",
      },
    ],
  },
}
`;

snapshot[`client resolved command - continue but unresolved 1`] = `
{
  n: 0,
  output: {
    dev: undefined,
    model: "assist-001",
    request: "some request",
    result: {
      pendingCommands: [
        {
          args: [
            {
              type: "string",
              value: "what do you want?",
            },
          ],
          id: "0.1",
          name: "ask",
          type: "parsed",
        },
      ],
      resolvedCommands: [
        {
          args: [
          ],
          id: "0",
          name: "now",
          returnValue: {
            type: "string",
            value: "2022-12-19T08:41:10.000Z",
          },
          type: "executed",
        },
        {
          args: [
          ],
          id: "0.0",
          name: "now",
          returnValue: {
            type: "string",
            value: "2022-12-19T08:41:10Z",
          },
          type: "executed",
        },
      ],
      type: "pending_commands",
    },
  },
  state: {
    modelCallCount: 1,
    pending: {
      action: 'now(); ask("what do you want?")',
      functionCalls: [
        {
          args: [
          ],
          name: "now",
          type: "call",
        },
        {
          args: [
            {
              type: "string",
              value: "what do you want?",
            },
          ],
          name: "ask",
          type: "call",
        },
      ],
      result: undefined,
      thought: "I need to do something",
    },
    request: "some request",
    requestContext: {},
    resolvedActionGroups: [
    ],
    resolvedCommands: [
      {
        args: [
        ],
        id: "0",
        name: "now",
        returnValue: {
          type: "string",
          value: "2022-12-19T08:41:10.000Z",
        },
        type: "executed",
      },
      {
        args: [
        ],
        id: "0.0",
        name: "now",
        returnValue: {
          type: "string",
          value: "2022-12-19T08:41:10Z",
        },
        type: "executed",
      },
    ],
  },
}
`;

snapshot[`client resolved command - wrong return type 1`] = `
{
  n: 0,
  output: {
    dev: undefined,
    model: "assist-001",
    request: "some request",
    result: {
      pendingCommands: [
        {
          args: [
            {
              type: "string",
              value: "what do you want?",
            },
          ],
          id: "0.1",
          name: "ask",
          type: "parsed",
        },
      ],
      resolvedCommands: [
        {
          args: [
          ],
          id: "0",
          name: "now",
          returnValue: {
            type: "string",
            value: "2022-12-19T08:41:10.000Z",
          },
          type: "executed",
        },
        {
          args: [
          ],
          id: "0.0",
          name: "now",
          returnValue: {
            type: "string",
            value: "2022-12-19T08:41:10Z",
          },
          type: "executed",
        },
      ],
      type: "pending_commands",
    },
  },
  state: {
    modelCallCount: 1,
    pending: {
      action: 'now(); ask("what do you want?")',
      functionCalls: [
        {
          args: [
          ],
          name: "now",
          type: "call",
        },
        {
          args: [
            {
              type: "string",
              value: "what do you want?",
            },
          ],
          name: "ask",
          type: "call",
        },
      ],
      result: undefined,
      thought: "I need to do something",
    },
    request: "some request",
    requestContext: {},
    resolvedActionGroups: [
    ],
    resolvedCommands: [
      {
        args: [
        ],
        id: "0",
        name: "now",
        returnValue: {
          type: "string",
          value: "2022-12-19T08:41:10.000Z",
        },
        type: "executed",
      },
      {
        args: [
        ],
        id: "0.0",
        name: "now",
        returnValue: {
          type: "string",
          value: "2022-12-19T08:41:10Z",
        },
        type: "executed",
      },
    ],
  },
}
`;

snapshot[`client resolved command - fulfilled 1`] = `
{
  n: 0,
  output: {
    dev: undefined,
    model: "assist-001",
    request: "some request",
    result: {
      pendingCommands: [
        {
          args: [
            {
              type: "string",
              value: "what do you want?",
            },
          ],
          id: "0.1",
          name: "ask",
          type: "parsed",
        },
      ],
      resolvedCommands: [
        {
          args: [
          ],
          id: "0",
          name: "now",
          returnValue: {
            type: "string",
            value: "2022-12-19T08:41:10.000Z",
          },
          type: "executed",
        },
        {
          args: [
          ],
          id: "0.0",
          name: "now",
          returnValue: {
            type: "string",
            value: "2022-12-19T08:41:10Z",
          },
          type: "executed",
        },
      ],
      type: "pending_commands",
    },
  },
  state: {
    modelCallCount: 1,
    pending: {
      action: 'now(); ask("what do you want?")',
      functionCalls: [
        {
          args: [
          ],
          name: "now",
          type: "call",
        },
        {
          args: [
            {
              type: "string",
              value: "what do you want?",
            },
          ],
          name: "ask",
          type: "call",
        },
      ],
      result: undefined,
      thought: "I need to do something",
    },
    request: "some request",
    requestContext: {},
    resolvedActionGroups: [
    ],
    resolvedCommands: [
      {
        args: [
        ],
        id: "0",
        name: "now",
        returnValue: {
          type: "string",
          value: "2022-12-19T08:41:10.000Z",
        },
        type: "executed",
      },
      {
        args: [
        ],
        id: "0.0",
        name: "now",
        returnValue: {
          type: "string",
          value: "2022-12-19T08:41:10Z",
        },
        type: "executed",
      },
    ],
  },
}
`;

snapshot[`client resolved command - fulfilled 2`] = `
[
]
`;

snapshot[`nested calls 1`] = `
{
  n: 1,
  output: {
    dev: undefined,
    model: "assist-001",
    request: "some request",
    result: {
      pendingCommands: [
        {
          args: [
            {
              type: "string",
              value: "2022-12-24T08:41:10Z",
            },
            {
              type: "string",
              value: "Dinner with Wife",
            },
          ],
          id: "0.1",
          name: "createCalendarEvent",
          type: "parsed",
        },
      ],
      resolvedCommands: [
        {
          args: [
            {
              type: "string",
              value: "America/New_York",
            },
          ],
          id: "0.0",
          name: "currentTimeForTimezone",
          returnValue: {
            type: "string",
            value: "2022-12-19T03:41:10-05:00",
          },
          type: "executed",
        },
        {
          args: [
            {
              type: "string",
              value: "5 days from now",
            },
          ],
          id: "0.1.0",
          name: "parseRelativeTime",
          returnValue: {
            type: "string",
            value: "2022-12-24T08:41:10Z",
          },
          type: "executed",
        },
      ],
      type: "pending_commands",
    },
  },
  state: {
    modelCallCount: 1,
    pending: {
      action: 'currentTimeForTimezone("America/New_York"); createCalendarEvent(parseRelativeTime("5 days from now"), "Dinner with Wife")',
      functionCalls: [
        {
          args: [
            {
              type: "string",
              value: "America/New_York",
            },
          ],
          name: "currentTimeForTimezone",
          type: "call",
        },
        {
          args: [
            {
              args: [
                {
                  type: "string",
                  value: "5 days from now",
                },
              ],
              name: "parseRelativeTime",
              type: "call",
            },
            {
              type: "string",
              value: "Dinner with Wife",
            },
          ],
          name: "createCalendarEvent",
          type: "call",
        },
      ],
      result: undefined,
      thought: "I need to get the current time in New York and create a calendar event 5 days from now",
    },
    request: "some request",
    requestContext: {},
    resolvedActionGroups: [
    ],
    resolvedCommands: [
      {
        args: [
          {
            type: "string",
            value: "America/New_York",
          },
        ],
        id: "0.0",
        name: "currentTimeForTimezone",
        returnValue: {
          type: "string",
          value: "2022-12-19T03:41:10-05:00",
        },
        type: "executed",
      },
      {
        args: [
          {
            type: "string",
            value: "5 days from now",
          },
        ],
        id: "0.1.0",
        name: "parseRelativeTime",
        returnValue: {
          type: "string",
          value: "2022-12-24T08:41:10Z",
        },
        type: "executed",
      },
    ],
  },
}
`;

snapshot[`nested calls 2`] = `
[
  'Fulfill the question/request as best you can. Aim to minimize the number of Actions used.

The language for Action is a tiny subset of javascript, ONLY these features are available:

* function calls
* function call nesting
* string concatenation using +

Available functions are declared below, these are the only functions available:

\`answer(answer: string) => void\` - answer the original question directly
\`say(message: string) => void\` - say something
\`write(message: string) => void\` - write/insert a message
\`ask(question: string) => string\` - get answer to a request for additional information
\`now() => string\` - get the users current ISO8601 datetime
\`math("a mathjs expression ": string) => string\` - compute a math formula
\`parseRelativeTime(naturalLanguageRelativeTime: string) => string\` - parse ISO8601 datetime relative to now from natural language
\`finish() => void\` - mark request/question as fulfilled
\`fail(reason: string) => void\` - indicate the request cannot be fulfilled with the available tools
\`__+__(lhs: string, rhs: string) => string\` - string concatenation using the + infix operand

Use the following format:
Request: the question or request you must answer
Thought: you should always think about what to do
Action: one ore more expressions composing available functions delimited by ;
Result: the result of the Action expression
... (this Thought/Action/Result can repeat N times)

Begin!

Request: some request
Thought: ',
]
`;

snapshot[`request needs more context 1`] = `
{
  n: 1,
  output: {
    dev: undefined,
    model: "assist-001",
    request: "some request",
    result: {
      missingRequestContext: {
        text: {
          type: "string",
        },
      },
      resolvedCommands: [
        {
          args: [
          ],
          id: "0.0",
          name: "now",
          returnValue: {
            type: "string",
            value: "2022-12-19T08:41:10Z",
          },
          type: "executed",
        },
      ],
      type: "needs_request_context",
    },
  },
  state: {
    modelCallCount: 1,
    pending: {
      action: 'now(); editProse("convert to poem"); now()',
      functionCalls: [
        {
          args: [
          ],
          name: "now",
          type: "call",
        },
        {
          args: [
            {
              type: "string",
              value: "convert to poem",
            },
          ],
          name: "editProse",
          type: "call",
        },
        {
          args: [
          ],
          name: "now",
          type: "call",
        },
      ],
      result: undefined,
      thought: "I need to do something",
    },
    request: "some request",
    requestContext: {},
    resolvedActionGroups: [
    ],
    resolvedCommands: [
      {
        args: [
        ],
        id: "0.0",
        name: "now",
        returnValue: {
          type: "string",
          value: "2022-12-19T08:41:10Z",
        },
        type: "executed",
      },
    ],
  },
}
`;

snapshot[`request needs more context - still missing 1`] = `
{
  n: 0,
  output: {
    dev: undefined,
    model: "assist-001",
    request: "some request",
    result: {
      missingRequestContext: {
        text: {
          type: "string",
        },
      },
      resolvedCommands: [
        {
          args: [
          ],
          id: "0",
          name: "someCommand",
          returnValue: {
            type: "string",
            value: "blah",
          },
          type: "executed",
        },
      ],
      type: "needs_request_context",
    },
  },
  state: {
    modelCallCount: 1,
    pending: {
      action: 'editProse("convert to poem"); now()',
      functionCalls: [
        {
          args: [
            {
              type: "string",
              value: "convert to poem",
            },
          ],
          name: "editProse",
          type: "call",
        },
        {
          args: [
          ],
          name: "now",
          type: "call",
        },
      ],
      result: undefined,
      thought: "I need to do something",
    },
    request: "some request",
    requestContext: {},
    resolvedActionGroups: [
      {
        action: "someCommand()",
        functionCalls: [
          {
            args: [
            ],
            name: "someCommand",
            type: "call",
          },
        ],
        result: '"blah"',
        thought: "I need to call some command",
      },
    ],
    resolvedCommands: [
      {
        args: [
        ],
        id: "0",
        name: "someCommand",
        returnValue: {
          type: "string",
          value: "blah",
        },
        type: "executed",
      },
    ],
  },
}
`;

snapshot[`request needs more context - wrong type 1`] = `
{
  n: 0,
  output: {
    dev: undefined,
    model: "assist-001",
    request: "some request",
    result: {
      missingRequestContext: {
        text: {
          type: "string",
        },
      },
      resolvedCommands: [
        {
          args: [
          ],
          id: "0",
          name: "someCommand",
          returnValue: {
            type: "string",
            value: "blah",
          },
          type: "executed",
        },
      ],
      type: "needs_request_context",
    },
  },
  state: {
    modelCallCount: 1,
    pending: {
      action: 'editProse("convert to poem"); now()',
      functionCalls: [
        {
          args: [
            {
              type: "string",
              value: "convert to poem",
            },
          ],
          name: "editProse",
          type: "call",
        },
        {
          args: [
          ],
          name: "now",
          type: "call",
        },
      ],
      result: undefined,
      thought: "I need to do something",
    },
    request: "some request",
    requestContext: {
      text: {
        type: "number",
        value: 123,
      },
    },
    resolvedActionGroups: [
      {
        action: "someCommand()",
        functionCalls: [
          {
            args: [
            ],
            name: "someCommand",
            type: "call",
          },
        ],
        result: '"blah"',
        thought: "I need to call some command",
      },
    ],
    resolvedCommands: [
      {
        args: [
        ],
        id: "0",
        name: "someCommand",
        returnValue: {
          type: "string",
          value: "blah",
        },
        type: "executed",
      },
    ],
  },
}
`;

snapshot[`request needs more context - fulfilled 1`] = `
{
  n: 2,
  output: {
    dev: undefined,
    model: "assist-001",
    request: "some request",
    result: {
      resolvedCommands: [
        {
          args: [
          ],
          id: "0",
          name: "someCommand",
          returnValue: {
            type: "string",
            value: "blah",
          },
          type: "executed",
        },
        {
          args: [
            {
              type: "string",
              value: "convert to poem",
            },
          ],
          id: "1.0",
          name: "editProse",
          returnValue: {
            type: "string",
            value: "the result of editProse()",
          },
          type: "executed",
        },
        {
          args: [
          ],
          id: "1.1",
          name: "now",
          returnValue: {
            type: "string",
            value: "2022-12-19T08:41:10Z",
          },
          type: "executed",
        },
        {
          args: [
          ],
          id: "2.0",
          name: "finish",
          returnValue: {
            type: "void",
          },
          type: "executed",
        },
      ],
      type: "finished",
    },
  },
  state: undefined,
}
`;

snapshot[`request needs more context - fulfilled 2`] = `
[
  "Rewrite and edit the following text. The requirement is 'convert to poem':

some text",
  'Fulfill the question/request as best you can. Aim to minimize the number of Actions used.

The language for Action is a tiny subset of javascript, ONLY these features are available:

* function calls
* function call nesting
* string concatenation using +

Available functions are declared below, these are the only functions available:

\`answer(answer: string) => void\` - answer the original question directly
\`say(message: string) => void\` - say something
\`write(message: string) => void\` - write/insert a message
\`ask(question: string) => string\` - get answer to a request for additional information
\`now() => string\` - get the users current ISO8601 datetime
\`math("a mathjs expression ": string) => string\` - compute a math formula
\`parseRelativeTime(naturalLanguageRelativeTime: string) => string\` - parse ISO8601 datetime relative to now from natural language
\`finish() => void\` - mark request/question as fulfilled
\`fail(reason: string) => void\` - indicate the request cannot be fulfilled with the available tools
\`__+__(lhs: string, rhs: string) => string\` - string concatenation using the + infix operand

Use the following format:
Request: the question or request you must answer
Thought: you should always think about what to do
Action: one ore more expressions composing available functions delimited by ;
Result: the result of the Action expression
... (this Thought/Action/Result can repeat N times)

Begin!

Request: some request
Thought: I need to call some command
Action: someCommand()
Result: "blah"
Thought: I need to do something
Action: editProse("convert to poem"); now()
Result: "the result of editProse()"; "2022-12-19T08:41:10Z"
Thought: ',
]
`;

snapshot[`fulfilled but max loops 1`] = `"max iteration count of 5 reached"`;

snapshot[`wrong arg type 1`] = `"arguments are invalid"`;

snapshot[`wrong arg count 1`] = `"arguments are invalid"`;

snapshot[`top level commands are resolved sequentially 1`] = `
{
  n: 1,
  output: {
    dev: undefined,
    model: "assist-001",
    request: "some request",
    result: {
      pendingCommands: [
        {
          args: [
            {
              type: "string",
              value: "how are you?",
            },
          ],
          id: "0.0",
          name: "ask",
          type: "parsed",
        },
      ],
      resolvedCommands: [
      ],
      type: "pending_commands",
    },
  },
  state: {
    modelCallCount: 1,
    pending: {
      action: 'ask("how are you?"); currentTimeForTimezone("America/New_York")',
      functionCalls: [
        {
          args: [
            {
              type: "string",
              value: "how are you?",
            },
          ],
          name: "ask",
          type: "call",
        },
        {
          args: [
            {
              type: "string",
              value: "America/New_York",
            },
          ],
          name: "currentTimeForTimezone",
          type: "call",
        },
      ],
      result: undefined,
      thought: "some thought",
    },
    request: "some request",
    requestContext: {},
    resolvedActionGroups: [
    ],
    resolvedCommands: [
    ],
  },
}
`;

snapshot[`top level commands are resolved sequentially 2 1`] = `
{
  n: 1,
  output: {
    dev: undefined,
    model: "assist-001",
    request: "some request",
    result: {
      resolvedCommands: [
        {
          args: [
            {
              type: "string",
              value: "how are you?",
            },
          ],
          id: "0.0",
          name: "ask",
          returnValue: {
            type: "string",
            value: "good",
          },
          type: "executed",
        },
        {
          args: [
            {
              type: "string",
              value: "America/New_York",
            },
          ],
          id: "0.1",
          name: "currentTimeForTimezone",
          returnValue: {
            type: "string",
            value: "2022-12-19T03:41:10-05:00",
          },
          type: "executed",
        },
        {
          args: [
          ],
          id: "1.0",
          name: "finish",
          returnValue: {
            type: "void",
          },
          type: "executed",
        },
      ],
      type: "finished",
    },
  },
  state: undefined,
}
`;

snapshot[`example A step 1 1`] = `
{
  pendingCommands: [
    {
      args: [
      ],
      id: "0.0",
      name: "a",
      type: "parsed",
    },
    {
      args: [
      ],
      id: "0.1.1",
      name: "c",
      type: "parsed",
    },
  ],
}
`;

snapshot[`example A step 2 1`] = `
{
  pendingCommands: [
    {
      args: [
        {
          type: "number",
          value: 123,
        },
        {
          type: "string",
          value: "blah",
        },
      ],
      id: "0.1",
      name: "b",
      type: "parsed",
    },
  ],
}
`;

snapshot[`example A step 3 1`] = `
{
  pendingCommands: [
    {
      args: [
        {
          type: "number",
          value: 123,
        },
        {
          type: "string",
          value: "ha",
        },
      ],
      id: "0",
      name: "test",
      type: "parsed",
    },
  ],
}
`;

snapshot[`example A step 4 1`] = `
{
  result: {
    type: "number",
    value: 123,
  },
}
`;
