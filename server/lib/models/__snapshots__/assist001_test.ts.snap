export const snapshot = {};

snapshot[`all commands resolved on the server 1`] = `
{
  n: 2,
  output: {
    dev: undefined,
    model: "assist-001",
    request: "some request",
    result: {
      results: [
        {
          type: "string",
          value: "2022-12-19T08:41:10Z",
        },
        {
          type: "string",
          value: "132.86960440108936",
        },
      ],
      type: "finished",
    },
  },
  state: undefined,
}
`;

snapshot[`all commands resolved on the server 2`] = `
[
  'Fulfill the question/request as best and directly as you can. Aim to minimize the number of Actions used. If the question is unclear or cannot be answered, do not make things up, indicate failure with fail().

The language for Action is a tiny subset of javascript, only use these available features:

* function calls and composition/nesting
* string concatenation using +
* simple variable assignment using var

Functions are declared below, you must not use any other functions. When calling pay attention to syntax and ensure strings are escaped correctly. Prefer functions ordered earlier in thelist.

\`answer(answer: string): void\` - respond to the original question/request
\`insertText(text: string): void\` - insert text into current cursor location
\`fail(reason: string): void\` - indicate the request cannot be fulfilled with the available tools
\`finish(): void\` - mark request/question as fulfilled
\`askForText(): string\` - get the input text for editing
\`math("a mathjs expression ": string): string\` - compute a math formula
\`now(): string\` - get the users current ISO8601 datetime
\`parseRelativeTime(naturalLanguageRelativeTime: string): string\` - parse ISO8601 datetime relative to now from natural language
\`ask(question: string): string\` - get a clarification on the original question/request
\`extractInformation("full description of what the output should be": string, inputTextOrCode: string): string\` - describe/summarize/extract information from the given string

Use the following format:
Request: the question or request you must answer
Thought: you should always think about what to do
Action: one or more expressions composing available functions delimited by ;
Result: the result of the Action expression
... (this Thought/Action/Result can repeat N times)

Begin!

Request: some request
Thought: ',
  'Fulfill the question/request as best and directly as you can. Aim to minimize the number of Actions used. If the question is unclear or cannot be answered, do not make things up, indicate failure with fail().

The language for Action is a tiny subset of javascript, only use these available features:

* function calls and composition/nesting
* string concatenation using +
* simple variable assignment using var

Functions are declared below, you must not use any other functions. When calling pay attention to syntax and ensure strings are escaped correctly. Prefer functions ordered earlier in thelist.

\`answer(answer: string): void\` - respond to the original question/request
\`insertText(text: string): void\` - insert text into current cursor location
\`fail(reason: string): void\` - indicate the request cannot be fulfilled with the available tools
\`finish(): void\` - mark request/question as fulfilled
\`askForText(): string\` - get the input text for editing
\`math("a mathjs expression ": string): string\` - compute a math formula
\`now(): string\` - get the users current ISO8601 datetime
\`parseRelativeTime(naturalLanguageRelativeTime: string): string\` - parse ISO8601 datetime relative to now from natural language
\`ask(question: string): string\` - get a clarification on the original question/request
\`extractInformation("full description of what the output should be": string, inputTextOrCode: string): string\` - describe/summarize/extract information from the given string

Use the following format:
Request: the question or request you must answer
Thought: you should always think about what to do
Action: one or more expressions composing available functions delimited by ;
Result: the result of the Action expression
... (this Thought/Action/Result can repeat N times)

Begin!

Request: some request
Thought: I need to do something
Action: now(); math("pi^2 + 123")
Result: "2022-12-19T08:41:10Z"; "132.86960440108936"
Thought: ',
]
`;

snapshot[`all commands resolved on the server - implicit finish 1`] = `
{
  n: 2,
  output: {
    dev: undefined,
    model: "assist-001",
    request: "some request",
    result: {
      results: [
        {
          type: "string",
          value: "2022-12-19T08:41:10Z",
        },
        {
          type: "string",
          value: "132.86960440108936",
        },
      ],
      type: "finished",
    },
  },
  state: undefined,
}
`;

snapshot[`command overloads work 1`] = `
{
  n: 2,
  output: {
    dev: undefined,
    model: "assist-001",
    request: "some request",
    result: {
      results: [
        {
          type: "string",
          value: "stringconcat",
        },
        {
          type: "number",
          value: 124,
        },
      ],
      type: "finished",
    },
  },
  state: undefined,
}
`;

snapshot[`command overloads work 2`] = `
[
  'Fulfill the question/request as best and directly as you can. Aim to minimize the number of Actions used. If the question is unclear or cannot be answered, do not make things up, indicate failure with fail().

The language for Action is a tiny subset of javascript, only use these available features:

* function calls and composition/nesting
* string concatenation using +
* simple variable assignment using var

Functions are declared below, you must not use any other functions. When calling pay attention to syntax and ensure strings are escaped correctly. Prefer functions ordered earlier in thelist.

\`answer(answer: string): void\` - respond to the original question/request
\`insertText(text: string): void\` - insert text into current cursor location
\`fail(reason: string): void\` - indicate the request cannot be fulfilled with the available tools
\`finish(): void\` - mark request/question as fulfilled
\`askForText(): string\` - get the input text for editing
\`math("a mathjs expression ": string): string\` - compute a math formula
\`now(): string\` - get the users current ISO8601 datetime
\`parseRelativeTime(naturalLanguageRelativeTime: string): string\` - parse ISO8601 datetime relative to now from natural language
\`ask(question: string): string\` - get a clarification on the original question/request
\`extractInformation("full description of what the output should be": string, inputTextOrCode: string): string\` - describe/summarize/extract information from the given string

Use the following format:
Request: the question or request you must answer
Thought: you should always think about what to do
Action: one or more expressions composing available functions delimited by ;
Result: the result of the Action expression
... (this Thought/Action/Result can repeat N times)

Begin!

Request: some request
Thought: ',
  'Fulfill the question/request as best and directly as you can. Aim to minimize the number of Actions used. If the question is unclear or cannot be answered, do not make things up, indicate failure with fail().

The language for Action is a tiny subset of javascript, only use these available features:

* function calls and composition/nesting
* string concatenation using +
* simple variable assignment using var

Functions are declared below, you must not use any other functions. When calling pay attention to syntax and ensure strings are escaped correctly. Prefer functions ordered earlier in thelist.

\`answer(answer: string): void\` - respond to the original question/request
\`insertText(text: string): void\` - insert text into current cursor location
\`fail(reason: string): void\` - indicate the request cannot be fulfilled with the available tools
\`finish(): void\` - mark request/question as fulfilled
\`askForText(): string\` - get the input text for editing
\`math("a mathjs expression ": string): string\` - compute a math formula
\`now(): string\` - get the users current ISO8601 datetime
\`parseRelativeTime(naturalLanguageRelativeTime: string): string\` - parse ISO8601 datetime relative to now from natural language
\`ask(question: string): string\` - get a clarification on the original question/request
\`extractInformation("full description of what the output should be": string, inputTextOrCode: string): string\` - describe/summarize/extract information from the given string

Use the following format:
Request: the question or request you must answer
Thought: you should always think about what to do
Action: one or more expressions composing available functions delimited by ;
Result: the result of the Action expression
... (this Thought/Action/Result can repeat N times)

Begin!

Request: some request
Thought: I need to do something
Action: "string" + "concat"; 123 + 1
Result: "stringconcat"; 124
Thought: ',
]
`;

snapshot[`infix + operand support 1`] = `
{
  n: 1,
  output: {
    dev: undefined,
    model: "assist-001",
    request: "some request",
    result: {
      pendingCommands: [
        {
          args: [
            {
              type: "string",
              value: "infix 2022-12-19T03:41:10-05:00 hello",
            },
          ],
          id: "0.0",
          name: "answer",
          type: "parsed",
        },
      ],
      results: [
      ],
      type: "pending_commands",
    },
  },
  state: {
    memory: {
      requestContext: {},
      variables: {},
    },
    modelCallCount: 1,
    pending: {
      action: 'answer("infix " + (currentTimeForTimezone("America/New_York") + " hello"))',
      expressions: [
        {
          args: [
            {
              args: [
                {
                  type: "string",
                  value: "infix ",
                },
                {
                  args: [
                    {
                      args: [
                        {
                          type: "string",
                          value: "America/New_York",
                        },
                      ],
                      name: "currentTimeForTimezone",
                      type: "call",
                    },
                    {
                      type: "string",
                      value: " hello",
                    },
                  ],
                  name: "__+__",
                  type: "call",
                },
              ],
              name: "__+__",
              type: "call",
            },
          ],
          name: "answer",
          type: "call",
        },
      ],
      result: undefined,
      thought: "I need to do something",
    },
    request: "some request",
    resolvedActionGroups: [
    ],
    resolvedCommands: [
      {
        args: [
          {
            type: "string",
            value: "America/New_York",
          },
        ],
        id: "0.0.0.1.0",
        name: "currentTimeForTimezone",
        returnValue: {
          type: "string",
          value: "2022-12-19T03:41:10-05:00",
        },
        type: "executed",
      },
      {
        args: [
          {
            type: "string",
            value: "2022-12-19T03:41:10-05:00",
          },
          {
            type: "string",
            value: " hello",
          },
        ],
        id: "0.0.0.1",
        name: "__+__",
        returnValue: {
          type: "string",
          value: "2022-12-19T03:41:10-05:00 hello",
        },
        type: "executed",
      },
      {
        args: [
          {
            type: "string",
            value: "infix ",
          },
          {
            type: "string",
            value: "2022-12-19T03:41:10-05:00 hello",
          },
        ],
        id: "0.0.0",
        name: "__+__",
        returnValue: {
          type: "string",
          value: "infix 2022-12-19T03:41:10-05:00 hello",
        },
        type: "executed",
      },
    ],
  },
}
`;

snapshot[`supports model outputs with lots of newlines 1`] = `
{
  n: 1,
  output: {
    dev: undefined,
    model: "assist-001",
    request: "some request",
    result: {
      pendingCommands: [
        {
          args: [
            {
              type: "string",
              value: "The time in New York is 2022-12-19T03:41:10-05:00 and I have created a calendar event for dinner with your wife 5 days from now.",
            },
          ],
          id: "0.0",
          name: "answer",
          type: "parsed",
        },
      ],
      results: [
      ],
      type: "pending_commands",
    },
  },
  state: {
    memory: {
      requestContext: {},
      variables: {},
    },
    modelCallCount: 1,
    pending: {
      action: 'answer("The time in New York is " + currentTimeForTimezone("America/New_York") + " and I have created a calendar event for dinner with your wife 5 days from now.");
createCalendarEvent(parseRelativeTime("5 days from now"), "Dinner with wife");
finish();',
      expressions: [
        {
          args: [
            {
              args: [
                {
                  args: [
                    {
                      type: "string",
                      value: "The time in New York is ",
                    },
                    {
                      args: [
                        {
                          type: "string",
                          value: "America/New_York",
                        },
                      ],
                      name: "currentTimeForTimezone",
                      type: "call",
                    },
                  ],
                  name: "__+__",
                  type: "call",
                },
                {
                  type: "string",
                  value: " and I have created a calendar event for dinner with your wife 5 days from now.",
                },
              ],
              name: "__+__",
              type: "call",
            },
          ],
          name: "answer",
          type: "call",
        },
        {
          args: [
            {
              args: [
                {
                  type: "string",
                  value: "5 days from now",
                },
              ],
              name: "parseRelativeTime",
              type: "call",
            },
            {
              type: "string",
              value: "Dinner with wife",
            },
          ],
          name: "createCalendarEvent",
          type: "call",
        },
        {
          args: [
          ],
          name: "finish",
          type: "call",
        },
      ],
      result: undefined,
      thought: "I need to get the current time in New York, create a calendar event 5 days from now, and answer the question.",
    },
    request: "some request",
    resolvedActionGroups: [
    ],
    resolvedCommands: [
      {
        args: [
          {
            type: "string",
            value: "America/New_York",
          },
        ],
        id: "0.0.0.0.1",
        name: "currentTimeForTimezone",
        returnValue: {
          type: "string",
          value: "2022-12-19T03:41:10-05:00",
        },
        type: "executed",
      },
      {
        args: [
          {
            type: "string",
            value: "The time in New York is ",
          },
          {
            type: "string",
            value: "2022-12-19T03:41:10-05:00",
          },
        ],
        id: "0.0.0.0",
        name: "__+__",
        returnValue: {
          type: "string",
          value: "The time in New York is 2022-12-19T03:41:10-05:00",
        },
        type: "executed",
      },
      {
        args: [
          {
            type: "string",
            value: "The time in New York is 2022-12-19T03:41:10-05:00",
          },
          {
            type: "string",
            value: " and I have created a calendar event for dinner with your wife 5 days from now.",
          },
        ],
        id: "0.0.0",
        name: "__+__",
        returnValue: {
          type: "string",
          value: "The time in New York is 2022-12-19T03:41:10-05:00 and I have created a calendar event for dinner with your wife 5 days from now.",
        },
        type: "executed",
      },
    ],
  },
}
`;

snapshot[`supports model outputs with top level infix call 1`] = `
{
  n: 1,
  output: {
    dev: undefined,
    model: "assist-001",
    request: "some request",
    result: {
      pendingCommands: [
        {
          args: [
            {
              type: "string",
              value: "2022-12-24T08:41:10Z",
            },
            {
              type: "string",
              value: "Dinner with Wife",
            },
          ],
          id: "0.1",
          name: "createCalendarEvent",
          type: "parsed",
        },
      ],
      results: [
        {
          type: "string",
          value: "2022-12-19T08:41:10Z 2022-12-19T03:41:10-05:00",
        },
      ],
      type: "pending_commands",
    },
  },
  state: {
    memory: {
      requestContext: {},
      variables: {},
    },
    modelCallCount: 1,
    pending: {
      action: "now() + ' ' + currentTimeForTimezone('America/New_York'); createCalendarEvent(parseRelativeTime('in 5 days'), 'Dinner with Wife');",
      expressions: [
        {
          args: [
            {
              args: [
                {
                  args: [
                  ],
                  name: "now",
                  type: "call",
                },
                {
                  type: "string",
                  value: " ",
                },
              ],
              name: "__+__",
              type: "call",
            },
            {
              args: [
                {
                  type: "string",
                  value: "America/New_York",
                },
              ],
              name: "currentTimeForTimezone",
              type: "call",
            },
          ],
          name: "__+__",
          type: "call",
        },
        {
          args: [
            {
              args: [
                {
                  type: "string",
                  value: "in 5 days",
                },
              ],
              name: "parseRelativeTime",
              type: "call",
            },
            {
              type: "string",
              value: "Dinner with Wife",
            },
          ],
          name: "createCalendarEvent",
          type: "call",
        },
      ],
      result: undefined,
      thought: "I need to get the current time in New York and create a calendar event 5 days from now",
    },
    request: "some request",
    resolvedActionGroups: [
    ],
    resolvedCommands: [
      {
        args: [
        ],
        id: "0.0.0.0",
        name: "now",
        returnValue: {
          type: "string",
          value: "2022-12-19T08:41:10Z",
        },
        type: "executed",
      },
      {
        args: [
          {
            type: "string",
            value: "America/New_York",
          },
        ],
        id: "0.0.1",
        name: "currentTimeForTimezone",
        returnValue: {
          type: "string",
          value: "2022-12-19T03:41:10-05:00",
        },
        type: "executed",
      },
      {
        args: [
          {
            type: "string",
            value: "2022-12-19T08:41:10Z",
          },
          {
            type: "string",
            value: " ",
          },
        ],
        id: "0.0.0",
        name: "__+__",
        returnValue: {
          type: "string",
          value: "2022-12-19T08:41:10Z ",
        },
        type: "executed",
      },
      {
        args: [
          {
            type: "string",
            value: "2022-12-19T08:41:10Z ",
          },
          {
            type: "string",
            value: "2022-12-19T03:41:10-05:00",
          },
        ],
        id: "0.0",
        name: "__+__",
        returnValue: {
          type: "string",
          value: "2022-12-19T08:41:10Z 2022-12-19T03:41:10-05:00",
        },
        type: "executed",
      },
      {
        args: [
          {
            type: "string",
            value: "in 5 days",
          },
        ],
        id: "0.1.0",
        name: "parseRelativeTime",
        returnValue: {
          type: "string",
          value: "2022-12-24T08:41:10Z",
        },
        type: "executed",
      },
    ],
  },
}
`;

snapshot[`supports model outputs with top level expression 1`] = `
{
  n: 2,
  output: {
    dev: undefined,
    model: "assist-001",
    request: "some request",
    result: {
      results: [
        {
          type: "string",
          value: "2022-12-19T21:41:10+13:00",
        },
      ],
      type: "finished",
    },
  },
  state: undefined,
}
`;

snapshot[`supports assignment 1`] = `
{
  n: 2,
  output: {
    dev: undefined,
    model: "assist-001",
    request: "some request",
    result: {
      results: [
        {
          type: "number",
          value: 234,
        },
      ],
      type: "finished",
    },
  },
  state: undefined,
}
`;

snapshot[`server commands with identical inputs re-use results 1`] = `
{
  n: 1,
  output: {
    dev: undefined,
    model: "assist-001",
    request: "some request",
    result: {
      pendingCommands: [
        {
          args: [
            {
              type: "string",
              value: "not reused because client command",
            },
          ],
          id: "0.1",
          name: "ask",
          type: "parsed",
        },
      ],
      results: [
        "0000-00-00T00:00:00Z",
      ],
      type: "pending_commands",
    },
  },
  state: {
    memory: {
      requestContext: {},
      variables: {},
    },
    modelCallCount: 2,
    pending: {
      action: 'now(); ask("not reused because client command")',
      expressions: [
        {
          args: [
          ],
          name: "now",
          type: "call",
        },
        {
          args: [
            {
              type: "string",
              value: "not reused because client command",
            },
          ],
          name: "ask",
          type: "call",
        },
      ],
      result: undefined,
      thought: "blah",
    },
    request: "some request",
    resolvedActionGroups: [
    ],
    resolvedCommands: [
      {
        args: [
        ],
        id: "someid",
        name: "now",
        returnValue: "0000-00-00T00:00:00Z",
        type: "executed",
      },
      {
        args: [
          {
            type: "string",
            value: "not reused because client command",
          },
        ],
        id: "someid",
        name: "ask",
        returnValue: "this should not be reused",
        type: "executed",
      },
      {
        args: [
        ],
        id: "0.0",
        name: "now",
        returnValue: "0000-00-00T00:00:00Z",
        type: "executed",
      },
    ],
  },
}
`;

snapshot[`client resolved command 1`] = `
{
  n: 1,
  output: {
    dev: undefined,
    model: "assist-001",
    request: "some request",
    result: {
      pendingCommands: [
        {
          args: [
            {
              type: "string",
              value: "what do you want?",
            },
          ],
          id: "0.1",
          name: "ask",
          type: "parsed",
        },
      ],
      results: [
        {
          type: "string",
          value: "2022-12-19T08:41:10Z",
        },
      ],
      type: "pending_commands",
    },
  },
  state: {
    memory: {
      requestContext: {},
      variables: {},
    },
    modelCallCount: 1,
    pending: {
      action: 'now(); ask("what do you want?")',
      expressions: [
        {
          args: [
          ],
          name: "now",
          type: "call",
        },
        {
          args: [
            {
              type: "string",
              value: "what do you want?",
            },
          ],
          name: "ask",
          type: "call",
        },
      ],
      result: undefined,
      thought: "I need to do something",
    },
    request: "some request",
    resolvedActionGroups: [
    ],
    resolvedCommands: [
      {
        args: [
        ],
        id: "0.0",
        name: "now",
        returnValue: {
          type: "string",
          value: "2022-12-19T08:41:10Z",
        },
        type: "executed",
      },
    ],
  },
}
`;

snapshot[`client resolved command - continue but unresolved 1`] = `
{
  n: 0,
  output: {
    dev: undefined,
    model: "assist-001",
    request: "some request",
    result: {
      pendingCommands: [
        {
          args: [
            {
              type: "string",
              value: "what do you want?",
            },
          ],
          id: "0.1",
          name: "ask",
          type: "parsed",
        },
      ],
      results: [
        {
          type: "string",
          value: "2022-12-19T08:41:10.000Z",
        },
      ],
      type: "pending_commands",
    },
  },
  state: {
    memory: {
      requestContext: {},
      variables: {},
    },
    modelCallCount: 1,
    pending: {
      action: 'now(); ask("what do you want?")',
      expressions: [
        {
          args: [
          ],
          name: "now",
          type: "call",
        },
        {
          args: [
            {
              type: "string",
              value: "what do you want?",
            },
          ],
          name: "ask",
          type: "call",
        },
      ],
      result: undefined,
      thought: "I need to do something",
    },
    request: "some request",
    resolvedActionGroups: [
    ],
    resolvedCommands: [
      {
        args: [
        ],
        id: "0",
        name: "now",
        returnValue: {
          type: "string",
          value: "2022-12-19T08:41:10.000Z",
        },
        type: "executed",
      },
      {
        args: [
        ],
        id: "0.0",
        name: "now",
        returnValue: {
          type: "string",
          value: "2022-12-19T08:41:10.000Z",
        },
        type: "executed",
      },
    ],
  },
}
`;

snapshot[`client resolved command - wrong return type 1`] = `
{
  n: 0,
  output: {
    dev: undefined,
    model: "assist-001",
    request: "some request",
    result: {
      pendingCommands: [
        {
          args: [
            {
              type: "string",
              value: "what do you want?",
            },
          ],
          id: "0.1",
          name: "ask",
          type: "parsed",
        },
      ],
      results: [
        {
          type: "string",
          value: "2022-12-19T08:41:10.000Z",
        },
      ],
      type: "pending_commands",
    },
  },
  state: {
    memory: {
      requestContext: {},
      variables: {},
    },
    modelCallCount: 1,
    pending: {
      action: 'now(); ask("what do you want?")',
      expressions: [
        {
          args: [
          ],
          name: "now",
          type: "call",
        },
        {
          args: [
            {
              type: "string",
              value: "what do you want?",
            },
          ],
          name: "ask",
          type: "call",
        },
      ],
      result: undefined,
      thought: "I need to do something",
    },
    request: "some request",
    resolvedActionGroups: [
    ],
    resolvedCommands: [
      {
        args: [
        ],
        id: "0",
        name: "now",
        returnValue: {
          type: "string",
          value: "2022-12-19T08:41:10.000Z",
        },
        type: "executed",
      },
      {
        args: [
        ],
        id: "0.0",
        name: "now",
        returnValue: {
          type: "string",
          value: "2022-12-19T08:41:10.000Z",
        },
        type: "executed",
      },
    ],
  },
}
`;

snapshot[`client resolved command - fulfilled 1`] = `
{
  n: 0,
  output: {
    dev: undefined,
    model: "assist-001",
    request: "some request",
    result: {
      pendingCommands: [
        {
          args: [
            {
              type: "string",
              value: "what do you want?",
            },
          ],
          id: "0.1",
          name: "ask",
          type: "parsed",
        },
      ],
      results: [
        {
          type: "string",
          value: "2022-12-19T08:41:10.000Z",
        },
      ],
      type: "pending_commands",
    },
  },
  state: {
    memory: {
      requestContext: {},
      variables: {},
    },
    modelCallCount: 1,
    pending: {
      action: 'now(); ask("what do you want?")',
      expressions: [
        {
          args: [
          ],
          name: "now",
          type: "call",
        },
        {
          args: [
            {
              type: "string",
              value: "what do you want?",
            },
          ],
          name: "ask",
          type: "call",
        },
      ],
      result: undefined,
      thought: "I need to do something",
    },
    request: "some request",
    resolvedActionGroups: [
    ],
    resolvedCommands: [
      {
        args: [
        ],
        id: "0",
        name: "now",
        returnValue: {
          type: "string",
          value: "2022-12-19T08:41:10.000Z",
        },
        type: "executed",
      },
      {
        args: [
        ],
        id: "0.0",
        name: "now",
        returnValue: {
          type: "string",
          value: "2022-12-19T08:41:10.000Z",
        },
        type: "executed",
      },
    ],
  },
}
`;

snapshot[`client resolved command - fulfilled 2`] = `
[
]
`;

snapshot[`nested calls 1`] = `
{
  n: 1,
  output: {
    dev: undefined,
    model: "assist-001",
    request: "some request",
    result: {
      pendingCommands: [
        {
          args: [
            {
              type: "string",
              value: "2022-12-24T08:41:10Z",
            },
            {
              type: "string",
              value: "Dinner with Wife",
            },
          ],
          id: "0.1",
          name: "createCalendarEvent",
          type: "parsed",
        },
      ],
      results: [
        {
          type: "string",
          value: "2022-12-19T03:41:10-05:00",
        },
      ],
      type: "pending_commands",
    },
  },
  state: {
    memory: {
      requestContext: {},
      variables: {},
    },
    modelCallCount: 1,
    pending: {
      action: 'currentTimeForTimezone("America/New_York"); createCalendarEvent(parseRelativeTime("5 days from now"), "Dinner with Wife")',
      expressions: [
        {
          args: [
            {
              type: "string",
              value: "America/New_York",
            },
          ],
          name: "currentTimeForTimezone",
          type: "call",
        },
        {
          args: [
            {
              args: [
                {
                  type: "string",
                  value: "5 days from now",
                },
              ],
              name: "parseRelativeTime",
              type: "call",
            },
            {
              type: "string",
              value: "Dinner with Wife",
            },
          ],
          name: "createCalendarEvent",
          type: "call",
        },
      ],
      result: undefined,
      thought: "I need to get the current time in New York and create a calendar event 5 days from now",
    },
    request: "some request",
    resolvedActionGroups: [
    ],
    resolvedCommands: [
      {
        args: [
          {
            type: "string",
            value: "America/New_York",
          },
        ],
        id: "0.0",
        name: "currentTimeForTimezone",
        returnValue: {
          type: "string",
          value: "2022-12-19T03:41:10-05:00",
        },
        type: "executed",
      },
      {
        args: [
          {
            type: "string",
            value: "5 days from now",
          },
        ],
        id: "0.1.0",
        name: "parseRelativeTime",
        returnValue: {
          type: "string",
          value: "2022-12-24T08:41:10Z",
        },
        type: "executed",
      },
    ],
  },
}
`;

snapshot[`nested calls 2`] = `
[
  'Fulfill the question/request as best and directly as you can. Aim to minimize the number of Actions used. If the question is unclear or cannot be answered, do not make things up, indicate failure with fail().

The language for Action is a tiny subset of javascript, only use these available features:

* function calls and composition/nesting
* string concatenation using +
* simple variable assignment using var

Functions are declared below, you must not use any other functions. When calling pay attention to syntax and ensure strings are escaped correctly. Prefer functions ordered earlier in thelist.

\`answer(answer: string): void\` - respond to the original question/request
\`insertText(text: string): void\` - insert text into current cursor location
\`fail(reason: string): void\` - indicate the request cannot be fulfilled with the available tools
\`finish(): void\` - mark request/question as fulfilled
\`askForText(): string\` - get the input text for editing
\`math("a mathjs expression ": string): string\` - compute a math formula
\`now(): string\` - get the users current ISO8601 datetime
\`parseRelativeTime(naturalLanguageRelativeTime: string): string\` - parse ISO8601 datetime relative to now from natural language
\`ask(question: string): string\` - get a clarification on the original question/request
\`extractInformation("full description of what the output should be": string, inputTextOrCode: string): string\` - describe/summarize/extract information from the given string

Use the following format:
Request: the question or request you must answer
Thought: you should always think about what to do
Action: one or more expressions composing available functions delimited by ;
Result: the result of the Action expression
... (this Thought/Action/Result can repeat N times)

Begin!

Request: some request
Thought: ',
]
`;

snapshot[`request needs more context 1`] = `
{
  n: 1,
  output: {
    dev: undefined,
    model: "assist-001",
    request: "some request",
    result: {
      missingRequestContext: {
        text: {
          type: "string",
        },
      },
      results: [
        {
          type: "string",
          value: "2022-12-19T08:41:10Z",
        },
      ],
      type: "needs_request_context",
    },
  },
  state: {
    memory: {
      requestContext: {},
      variables: {},
    },
    modelCallCount: 1,
    pending: {
      action: 'now(); editProse(askForText(), "convert to poem"); now()',
      expressions: [
        {
          args: [
          ],
          name: "now",
          type: "call",
        },
        {
          args: [
            {
              args: [
              ],
              name: "askForText",
              type: "call",
            },
            {
              type: "string",
              value: "convert to poem",
            },
          ],
          name: "editProse",
          type: "call",
        },
        {
          args: [
          ],
          name: "now",
          type: "call",
        },
      ],
      result: undefined,
      thought: "I need to do something",
    },
    request: "some request",
    resolvedActionGroups: [
    ],
    resolvedCommands: [
      {
        args: [
        ],
        id: "0.0",
        name: "now",
        returnValue: {
          type: "string",
          value: "2022-12-19T08:41:10Z",
        },
        type: "executed",
      },
    ],
  },
}
`;

snapshot[`request needs more context - still missing 1`] = `
{
  n: 0,
  output: {
    dev: undefined,
    model: "assist-001",
    request: "some request",
    result: {
      missingRequestContext: {
        text: {
          type: "string",
        },
      },
      results: [
      ],
      type: "needs_request_context",
    },
  },
  state: {
    memory: {
      requestContext: {},
      variables: {},
    },
    modelCallCount: 1,
    pending: {
      action: 'editProse(askForText(), "convert to poem"); now()',
      expressions: [
        {
          args: [
            {
              args: [
              ],
              name: "askForText",
              type: "call",
            },
            {
              type: "string",
              value: "convert to poem",
            },
          ],
          name: "editProse",
          type: "call",
        },
        {
          args: [
          ],
          name: "now",
          type: "call",
        },
      ],
      result: undefined,
      thought: "I need to do something",
    },
    request: "some request",
    resolvedActionGroups: [
      {
        action: "someCommand()",
        expressions: [
          {
            args: [
            ],
            name: "someCommand",
            type: "call",
          },
        ],
        result: '"blah"',
        thought: "I need to call some command",
      },
    ],
    resolvedCommands: [
      {
        args: [
        ],
        id: "0",
        name: "someCommand",
        returnValue: {
          type: "string",
          value: "blah",
        },
        type: "executed",
      },
    ],
  },
}
`;

snapshot[`request needs more context - wrong type 1`] = `
{
  n: 0,
  output: {
    dev: undefined,
    model: "assist-001",
    request: "some request",
    result: {
      missingRequestContext: {
        text: {
          type: "string",
        },
      },
      results: [
      ],
      type: "needs_request_context",
    },
  },
  state: {
    memory: {
      requestContext: {
        text: {
          type: "number",
          value: 123,
        },
      },
      variables: {},
    },
    modelCallCount: 1,
    pending: {
      action: 'editProse(askForText(), "convert to poem"); now()',
      expressions: [
        {
          args: [
            {
              args: [
              ],
              name: "askForText",
              type: "call",
            },
            {
              type: "string",
              value: "convert to poem",
            },
          ],
          name: "editProse",
          type: "call",
        },
        {
          args: [
          ],
          name: "now",
          type: "call",
        },
      ],
      result: undefined,
      thought: "I need to do something",
    },
    request: "some request",
    resolvedActionGroups: [
      {
        action: "someCommand()",
        expressions: [
          {
            args: [
            ],
            name: "someCommand",
            type: "call",
          },
        ],
        result: '"blah"',
        thought: "I need to call some command",
      },
    ],
    resolvedCommands: [
      {
        args: [
        ],
        id: "0",
        name: "someCommand",
        returnValue: {
          type: "string",
          value: "blah",
        },
        type: "executed",
      },
    ],
  },
}
`;

snapshot[`request needs more context - fulfilled 1`] = `
{
  n: 2,
  output: {
    dev: undefined,
    model: "assist-001",
    request: "some request",
    result: {
      results: [
        {
          type: "string",
          value: "the result of editProse()",
        },
        {
          type: "string",
          value: "2022-12-19T08:41:10Z",
        },
      ],
      type: "finished",
    },
  },
  state: undefined,
}
`;

snapshot[`request needs more context - fulfilled 2`] = `
[
  "Rewrite and edit the following text. The requirement is 'convert to poem':

some text",
  'Fulfill the question/request as best and directly as you can. Aim to minimize the number of Actions used. If the question is unclear or cannot be answered, do not make things up, indicate failure with fail().

The language for Action is a tiny subset of javascript, only use these available features:

* function calls and composition/nesting
* string concatenation using +
* simple variable assignment using var

Functions are declared below, you must not use any other functions. When calling pay attention to syntax and ensure strings are escaped correctly. Prefer functions ordered earlier in thelist.

\`answer(answer: string): void\` - respond to the original question/request
\`insertText(text: string): void\` - insert text into current cursor location
\`fail(reason: string): void\` - indicate the request cannot be fulfilled with the available tools
\`finish(): void\` - mark request/question as fulfilled
\`askForText(): string\` - get the input text for editing
\`math("a mathjs expression ": string): string\` - compute a math formula
\`now(): string\` - get the users current ISO8601 datetime
\`parseRelativeTime(naturalLanguageRelativeTime: string): string\` - parse ISO8601 datetime relative to now from natural language
\`ask(question: string): string\` - get a clarification on the original question/request
\`extractInformation("full description of what the output should be": string, inputTextOrCode: string): string\` - describe/summarize/extract information from the given string

Use the following format:
Request: the question or request you must answer
Thought: you should always think about what to do
Action: one or more expressions composing available functions delimited by ;
Result: the result of the Action expression
... (this Thought/Action/Result can repeat N times)

Begin!

Request: some request
Thought: I need to call some command
Action: someCommand()
Result: "blah"
Thought: I need to do something
Action: editProse(askForText(), "convert to poem"); now()
Result: "the result of editProse()"; "2022-12-19T08:41:10Z"
Thought: ',
]
`;

snapshot[`fulfilled but max loops 1`] = `"max iteration count of 5 reached"`;

snapshot[`wrong arg type 1`] = `"arguments are invalid"`;

snapshot[`wrong arg count 1`] = `"arguments are invalid"`;

snapshot[`top level commands are resolved sequentially 1`] = `
{
  n: 1,
  output: {
    dev: undefined,
    model: "assist-001",
    request: "some request",
    result: {
      pendingCommands: [
        {
          args: [
            {
              type: "string",
              value: "how are you?",
            },
          ],
          id: "0.0",
          name: "ask",
          type: "parsed",
        },
      ],
      results: [
      ],
      type: "pending_commands",
    },
  },
  state: {
    memory: {
      requestContext: {},
      variables: {},
    },
    modelCallCount: 1,
    pending: {
      action: 'ask("how are you?"); currentTimeForTimezone("America/New_York")',
      expressions: [
        {
          args: [
            {
              type: "string",
              value: "how are you?",
            },
          ],
          name: "ask",
          type: "call",
        },
        {
          args: [
            {
              type: "string",
              value: "America/New_York",
            },
          ],
          name: "currentTimeForTimezone",
          type: "call",
        },
      ],
      result: undefined,
      thought: "some thought",
    },
    request: "some request",
    resolvedActionGroups: [
    ],
    resolvedCommands: [
    ],
  },
}
`;

snapshot[`top level commands are resolved sequentially 2 1`] = `
{
  n: 1,
  output: {
    dev: undefined,
    model: "assist-001",
    request: "some request",
    result: {
      results: [
        {
          type: "string",
          value: "good",
        },
        {
          type: "string",
          value: "2022-12-19T03:41:10-05:00",
        },
      ],
      type: "finished",
    },
  },
  state: undefined,
}
`;

snapshot[`example A step 1 1`] = `
{
  pendingCommands: [
    {
      args: [
      ],
      id: "0.0",
      name: "a",
      type: "parsed",
    },
    {
      args: [
      ],
      id: "0.1.1",
      name: "c",
      type: "parsed",
    },
  ],
}
`;

snapshot[`example A step 2 1`] = `
{
  pendingCommands: [
    {
      args: [
        {
          type: "number",
          value: 123,
        },
        {
          type: "string",
          value: "blah",
        },
      ],
      id: "0.1",
      name: "b",
      type: "parsed",
    },
  ],
}
`;

snapshot[`example A step 3 1`] = `
{
  pendingCommands: [
    {
      args: [
        {
          type: "number",
          value: 123,
        },
        {
          type: "string",
          value: "ha",
        },
      ],
      id: "0",
      name: "test",
      type: "parsed",
    },
  ],
}
`;

snapshot[`example A step 4 1`] = `
{
  result: {
    type: "number",
    value: 123,
  },
}
`;
