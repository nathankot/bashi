export const snapshot = {};

snapshot[`all commands resolved on the server 1`] = `
{
  n: 2,
  output: {
    dev: undefined,
    model: "assist-002",
    request: "some request",
    result: {
      pendingCommands: [
        {
          args: [
            {
              type: "string",
              value: "Your request has been fulfilled.",
            },
          ],
          id: "2",
          name: "respond",
          type: "parsed",
        },
      ],
      results: [
        {
          type: "string",
          value: "2022-12-19T08:41:10Z",
        },
        {
          type: "string",
          value: "132.86960440108936",
        },
      ],
      type: "pending_commands",
    },
  },
  state: {
    memory: {
      topLevelResults: [
        {
          type: "string",
          value: "2022-12-19T08:41:10Z",
        },
        {
          type: "string",
          value: "132.86960440108936",
        },
      ],
      variables: {
        result_0: {
          type: "string",
          value: "2022-12-19T08:41:10Z",
        },
        result_1: {
          type: "string",
          value: "132.86960440108936",
        },
      },
    },
    modelCallCount: 2,
    pending: [
      {
        action: "Your request has been fulfilled.",
        isRespond: true,
        statement: {
          args: [
            {
              type: "string",
              value: "Your request has been fulfilled.",
            },
          ],
          name: "respond",
          type: "call",
        },
      },
    ],
    request: "some request",
    resolvedActions: [
      {
        action: "Run { now() }",
        result: '"2022-12-19T08:41:10Z"',
        statement: {
          args: [
          ],
          name: "now",
          type: "call",
        },
      },
      {
        action: 'Run { math("pi^2 + 123") }',
        result: '"132.86960440108936"',
        statement: {
          args: [
            {
              type: "string",
              value: "pi^2 + 123",
            },
          ],
          name: "math",
          type: "call",
        },
      },
    ],
    resolvedCommands: [
      {
        args: [
        ],
        id: "0",
        name: "now",
        returnValue: {
          type: "string",
          value: "2022-12-19T08:41:10Z",
        },
        type: "executed",
      },
      {
        args: [
          {
            type: "string",
            value: "pi^2 + 123",
          },
        ],
        id: "1",
        name: "math",
        returnValue: {
          type: "string",
          value: "132.86960440108936",
        },
        type: "executed",
      },
    ],
  },
}
`;

snapshot[`all commands resolved on the server 2`] = `
[
  {
    content: "some request",
    role: "user",
  },
  {
    content: 'User information:
Timezone: "UTC"
Locale: "en-US"',
    role: "system",
  },
  {
    content: "Act as an AI assistant and fulfill the request as best you can. Do not make things up. Use functions/tools (documented below) to help with this, but always prefer responding directly if knowledge is readily available and accurate. If the request cannot be fulfilled using a combination of existing knowledge and functions then let the user know why, do not make things up.

Run{} blocks must be used to call functions. They must be included in the beginning before your response to the user which should be in plain language. Run blocks must only include a single statement. For example:

  Run { exampleFunction(\\"arg 1\\", arg2, 123, true); }
  I have completed your request

Note that Run{} blocks and their results are not visible to the user. In addition, the user is unable to call functions themselves. So do not assume that the user knows about functions or Run{} blocks.

It is possible to assign the result of a function to a variable, and use it later via string interpolation or as inputs into other functions:

  Run { a = exampleFn(\\"arg 1\\", arg2) }
  Run { b = exampleFn2(a) }
  The answer to your question is \${b}

Use functions sparingly and do not assume any other features exist beyond what is referenced above.

Known functions are declared below. Unknown functions MUST NOT be used. Pay attention to syntax and ensure correct string escaping. Prefer using functions ordered earlier in the list.

\`math(\\"formula (ascii characters only)\\": string): string\` - get the result of a math formula
\`now(): string\` - get current ISO8601 datetime in the user's timezone
\`commandWithNumberArg(\\"some number\\": number): void\` - some fixture command
\`parseRelativeTime(\\"natural language relative time\\": string): string\` - get ISO8601 datetime relative to now from natural language",
    role: "system",
  },
  {
    content: "some request",
    role: "user",
  },
  {
    content: "Run { now() }",
    role: "assistant",
  },
  {
    content: 'Result: "2022-12-19T08:41:10Z"',
    role: "system",
  },
  {
    content: 'Run { math("pi^2 + 123") }',
    role: "assistant",
  },
  {
    content: 'Result: "132.86960440108936"',
    role: "system",
  },
]
`;

snapshot[`all commands resolved on the server - empty response tries again 1`] = `
{
  n: 3,
  output: {
    dev: undefined,
    model: "assist-002",
    request: "some request",
    result: {
      pendingCommands: [
        {
          args: [
            {
              type: "string",
              value: "Finish",
            },
          ],
          id: "1",
          name: "respond",
          type: "parsed",
        },
      ],
      results: [
        {
          type: "string",
          value: "132.86960440108936",
        },
      ],
      type: "pending_commands",
    },
  },
  state: {
    memory: {
      topLevelResults: [
        {
          type: "string",
          value: "132.86960440108936",
        },
      ],
      variables: {
        result_0: {
          type: "string",
          value: "132.86960440108936",
        },
      },
    },
    modelCallCount: 3,
    pending: [
      {
        action: "Finish",
        isRespond: true,
        statement: {
          args: [
            {
              type: "string",
              value: "Finish",
            },
          ],
          name: "respond",
          type: "call",
        },
      },
    ],
    request: "some request",
    resolvedActions: [
      {
        action: 'Run { math("pi^2 + 123") }',
        result: '"132.86960440108936"',
        statement: {
          args: [
            {
              type: "string",
              value: "pi^2 + 123",
            },
          ],
          name: "math",
          type: "call",
        },
      },
    ],
    resolvedCommands: [
      {
        args: [
          {
            type: "string",
            value: "pi^2 + 123",
          },
        ],
        id: "0",
        name: "math",
        returnValue: {
          type: "string",
          value: "132.86960440108936",
        },
        type: "executed",
      },
    ],
  },
}
`;

snapshot[`all commands resolved on the server - empty response tries again 2`] = `
[
  {
    content: "some request",
    role: "user",
  },
  {
    content: 'User information:
Timezone: "UTC"
Locale: "en-US"',
    role: "system",
  },
  {
    content: "Act as an AI assistant and fulfill the request as best you can. Do not make things up. Use functions/tools (documented below) to help with this, but always prefer responding directly if knowledge is readily available and accurate. If the request cannot be fulfilled using a combination of existing knowledge and functions then let the user know why, do not make things up.

Run{} blocks must be used to call functions. They must be included in the beginning before your response to the user which should be in plain language. Run blocks must only include a single statement. For example:

  Run { exampleFunction(\\"arg 1\\", arg2, 123, true); }
  I have completed your request

Note that Run{} blocks and their results are not visible to the user. In addition, the user is unable to call functions themselves. So do not assume that the user knows about functions or Run{} blocks.

It is possible to assign the result of a function to a variable, and use it later via string interpolation or as inputs into other functions:

  Run { a = exampleFn(\\"arg 1\\", arg2) }
  Run { b = exampleFn2(a) }
  The answer to your question is \${b}

Use functions sparingly and do not assume any other features exist beyond what is referenced above.

Known functions are declared below. Unknown functions MUST NOT be used. Pay attention to syntax and ensure correct string escaping. Prefer using functions ordered earlier in the list.

\`math(\\"formula (ascii characters only)\\": string): string\` - get the result of a math formula
\`now(): string\` - get current ISO8601 datetime in the user's timezone
\`commandWithNumberArg(\\"some number\\": number): void\` - some fixture command
\`parseRelativeTime(\\"natural language relative time\\": string): string\` - get ISO8601 datetime relative to now from natural language",
    role: "system",
  },
  {
    content: "some request",
    role: "user",
  },
  {
    content: 'Run { math("pi^2 + 123") }',
    role: "assistant",
  },
  {
    content: 'Result: "132.86960440108936"',
    role: "system",
  },
  {
    content: 'User information:
Timezone: "UTC"
Locale: "en-US"',
    role: "system",
  },
  {
    content: "Act as an AI assistant and fulfill the request as best you can. Do not make things up. Use functions/tools (documented below) to help with this, but always prefer responding directly if knowledge is readily available and accurate. If the request cannot be fulfilled using a combination of existing knowledge and functions then let the user know why, do not make things up.

Run{} blocks must be used to call functions. They must be included in the beginning before your response to the user which should be in plain language. Run blocks must only include a single statement. For example:

  Run { exampleFunction(\\"arg 1\\", arg2, 123, true); }
  I have completed your request

Note that Run{} blocks and their results are not visible to the user. In addition, the user is unable to call functions themselves. So do not assume that the user knows about functions or Run{} blocks.

It is possible to assign the result of a function to a variable, and use it later via string interpolation or as inputs into other functions:

  Run { a = exampleFn(\\"arg 1\\", arg2) }
  Run { b = exampleFn2(a) }
  The answer to your question is \${b}

Use functions sparingly and do not assume any other features exist beyond what is referenced above.

Known functions are declared below. Unknown functions MUST NOT be used. Pay attention to syntax and ensure correct string escaping. Prefer using functions ordered earlier in the list.

\`math(\\"formula (ascii characters only)\\": string): string\` - get the result of a math formula
\`now(): string\` - get current ISO8601 datetime in the user's timezone
\`commandWithNumberArg(\\"some number\\": number): void\` - some fixture command
\`parseRelativeTime(\\"natural language relative time\\": string): string\` - get ISO8601 datetime relative to now from natural language",
    role: "system",
  },
  {
    content: "some request",
    role: "user",
  },
  {
    content: 'Run { math("pi^2 + 123") }',
    role: "assistant",
  },
  {
    content: 'Result: "132.86960440108936"',
    role: "system",
  },
]
`;

snapshot[`multiple actions in a single completion 1`] = `
{
  n: 2,
  output: {
    dev: undefined,
    model: "assist-002",
    request: "some request",
    result: {
      pendingCommands: [
        {
          args: [
            {
              type: "string",
              value: "Your request has been fulfilled.",
            },
          ],
          id: "3",
          name: "respond",
          type: "parsed",
        },
      ],
      results: [
        {
          type: "string",
          value: "2022-12-19T08:41:10Z",
        },
        {
          type: "string",
          value: "132.86960440108936",
        },
        {
          type: "string",
          value: "2022-12-19T08:41:10Z",
        },
      ],
      type: "pending_commands",
    },
  },
  state: {
    memory: {
      topLevelResults: [
        {
          type: "string",
          value: "2022-12-19T08:41:10Z",
        },
        {
          type: "string",
          value: "132.86960440108936",
        },
        {
          type: "string",
          value: "2022-12-19T08:41:10Z",
        },
      ],
      variables: {
        result_0: {
          type: "string",
          value: "2022-12-19T08:41:10Z",
        },
        result_1: {
          type: "string",
          value: "132.86960440108936",
        },
        result_2: {
          type: "string",
          value: "2022-12-19T08:41:10Z",
        },
      },
    },
    modelCallCount: 2,
    pending: [
      {
        action: "Your request has been fulfilled.",
        isRespond: true,
        statement: {
          args: [
            {
              type: "string",
              value: "Your request has been fulfilled.",
            },
          ],
          name: "respond",
          type: "call",
        },
      },
    ],
    request: "some request",
    resolvedActions: [
      {
        action: "Run { now() }",
        result: '"2022-12-19T08:41:10Z"',
        statement: {
          args: [
          ],
          name: "now",
          type: "call",
        },
      },
      {
        action: 'run { math("pi^2 + 123") }',
        result: '"132.86960440108936"',
        statement: {
          args: [
            {
              type: "string",
              value: "pi^2 + 123",
            },
          ],
          name: "math",
          type: "call",
        },
      },
      {
        action: "Run { now() }",
        result: '"2022-12-19T08:41:10Z"',
        statement: {
          args: [
          ],
          name: "now",
          type: "call",
        },
      },
    ],
    resolvedCommands: [
      {
        args: [
        ],
        id: "0",
        name: "now",
        returnValue: {
          type: "string",
          value: "2022-12-19T08:41:10Z",
        },
        type: "executed",
      },
      {
        args: [
          {
            type: "string",
            value: "pi^2 + 123",
          },
        ],
        id: "1",
        name: "math",
        returnValue: {
          type: "string",
          value: "132.86960440108936",
        },
        type: "executed",
      },
      {
        args: [
        ],
        id: "2",
        name: "now",
        returnValue: {
          type: "string",
          value: "2022-12-19T08:41:10Z",
        },
        type: "executed",
      },
    ],
  },
}
`;

snapshot[`non-action lines at the end of a completion 1`] = `
{
  n: 2,
  output: {
    dev: undefined,
    model: "assist-002",
    request: "some request",
    result: {
      pendingCommands: [
        {
          args: [
            {
              type: "string",
              value: "Your request has been fulfilled.",
            },
          ],
          id: "2",
          name: "respond",
          type: "parsed",
        },
      ],
      results: [
        {
          type: "string",
          value: "2022-12-19T08:41:10Z",
        },
        {
          type: "string",
          value: "132.86960440108936",
        },
      ],
      type: "pending_commands",
    },
  },
  state: {
    memory: {
      topLevelResults: [
        {
          type: "string",
          value: "2022-12-19T08:41:10Z",
        },
        {
          type: "string",
          value: "132.86960440108936",
        },
      ],
      variables: {
        result_0: {
          type: "string",
          value: "2022-12-19T08:41:10Z",
        },
        result_1: {
          type: "string",
          value: "132.86960440108936",
        },
      },
    },
    modelCallCount: 2,
    pending: [
      {
        action: "Your request has been fulfilled.",
        isRespond: true,
        statement: {
          args: [
            {
              type: "string",
              value: "Your request has been fulfilled.",
            },
          ],
          name: "respond",
          type: "call",
        },
      },
    ],
    request: "some request",
    resolvedActions: [
      {
        action: "Run { now() }",
        result: '"2022-12-19T08:41:10Z"',
        statement: {
          args: [
          ],
          name: "now",
          type: "call",
        },
      },
      {
        action: 'run { math("pi^2 + 123") }',
        result: '"132.86960440108936"',
        statement: {
          args: [
            {
              type: "string",
              value: "pi^2 + 123",
            },
          ],
          name: "math",
          type: "call",
        },
      },
    ],
    resolvedCommands: [
      {
        args: [
        ],
        id: "0",
        name: "now",
        returnValue: {
          type: "string",
          value: "2022-12-19T08:41:10Z",
        },
        type: "executed",
      },
      {
        args: [
          {
            type: "string",
            value: "pi^2 + 123",
          },
        ],
        id: "1",
        name: "math",
        returnValue: {
          type: "string",
          value: "132.86960440108936",
        },
        type: "executed",
      },
    ],
  },
}
`;

snapshot[`command overloads work 1`] = `
{
  n: 2,
  output: {
    dev: undefined,
    model: "assist-002",
    request: "some request",
    result: {
      pendingCommands: [
        {
          args: [
            {
              type: "string",
              value: "I have finished",
            },
          ],
          id: "2",
          name: "respond",
          type: "parsed",
        },
      ],
      results: [
        {
          type: "number",
          value: 124,
        },
        {
          type: "string",
          value: "stringconcat",
        },
      ],
      type: "pending_commands",
    },
  },
  state: {
    memory: {
      topLevelResults: [
        {
          type: "number",
          value: 124,
        },
        {
          type: "string",
          value: "stringconcat",
        },
      ],
      variables: {
        result_0: {
          type: "number",
          value: 124,
        },
        result_1: {
          type: "string",
          value: "stringconcat",
        },
      },
    },
    modelCallCount: 2,
    pending: [
      {
        action: "I have finished",
        isRespond: true,
        statement: {
          args: [
            {
              type: "string",
              value: "I have finished",
            },
          ],
          name: "respond",
          type: "call",
        },
      },
    ],
    request: "some request",
    resolvedActions: [
      {
        action: "Run {  123 + 1; }",
        result: "124",
        statement: {
          args: [
            {
              type: "number",
              value: 123,
            },
            {
              type: "number",
              value: 1,
            },
          ],
          name: "__+__",
          type: "call",
        },
      },
      {
        action: 'Run { "string" + "concat";}',
        result: '"stringconcat"',
        statement: {
          args: [
            {
              type: "string",
              value: "string",
            },
            {
              type: "string",
              value: "concat",
            },
          ],
          name: "__+__",
          type: "call",
        },
      },
    ],
    resolvedCommands: [
      {
        args: [
          {
            type: "number",
            value: 123,
          },
          {
            type: "number",
            value: 1,
          },
        ],
        id: "0",
        name: "__+__",
        returnValue: {
          type: "number",
          value: 124,
        },
        type: "executed",
      },
      {
        args: [
          {
            type: "string",
            value: "string",
          },
          {
            type: "string",
            value: "concat",
          },
        ],
        id: "1",
        name: "__+__",
        returnValue: {
          type: "string",
          value: "stringconcat",
        },
        type: "executed",
      },
    ],
  },
}
`;

snapshot[`command overloads work 2`] = `
[
  {
    content: "some request",
    role: "user",
  },
  {
    content: 'User information:
Timezone: "UTC"
Locale: "en-US"',
    role: "system",
  },
  {
    content: "Act as an AI assistant and fulfill the request as best you can. Do not make things up. Use functions/tools (documented below) to help with this, but always prefer responding directly if knowledge is readily available and accurate. If the request cannot be fulfilled using a combination of existing knowledge and functions then let the user know why, do not make things up.

Run{} blocks must be used to call functions. They must be included in the beginning before your response to the user which should be in plain language. Run blocks must only include a single statement. For example:

  Run { exampleFunction(\\"arg 1\\", arg2, 123, true); }
  I have completed your request

Note that Run{} blocks and their results are not visible to the user. In addition, the user is unable to call functions themselves. So do not assume that the user knows about functions or Run{} blocks.

It is possible to assign the result of a function to a variable, and use it later via string interpolation or as inputs into other functions:

  Run { a = exampleFn(\\"arg 1\\", arg2) }
  Run { b = exampleFn2(a) }
  The answer to your question is \${b}

Use functions sparingly and do not assume any other features exist beyond what is referenced above.

Known functions are declared below. Unknown functions MUST NOT be used. Pay attention to syntax and ensure correct string escaping. Prefer using functions ordered earlier in the list.

\`math(\\"formula (ascii characters only)\\": string): string\` - get the result of a math formula
\`now(): string\` - get current ISO8601 datetime in the user's timezone
\`commandWithNumberArg(\\"some number\\": number): void\` - some fixture command
\`parseRelativeTime(\\"natural language relative time\\": string): string\` - get ISO8601 datetime relative to now from natural language",
    role: "system",
  },
  {
    content: "some request",
    role: "user",
  },
  {
    content: "Run {  123 + 1; }",
    role: "assistant",
  },
  {
    content: "Result: 124",
    role: "system",
  },
  {
    content: 'Run { "string" + "concat";}',
    role: "assistant",
  },
  {
    content: 'Result: "stringconcat"',
    role: "system",
  },
]
`;

snapshot[`infix + operand support 1`] = `
{
  n: 1,
  output: {
    dev: undefined,
    model: "assist-002",
    request: "some request",
    result: {
      pendingCommands: [
        {
          args: [
            {
              type: "string",
              value: "infix 2022-12-19T03:41:10-05:00 hello",
            },
          ],
          id: "0",
          name: "respond",
          type: "parsed",
        },
      ],
      results: [
      ],
      type: "pending_commands",
    },
  },
  state: {
    memory: {
      topLevelResults: [
      ],
      variables: {},
    },
    modelCallCount: 1,
    pending: [
      {
        action: 'Run { respond("infix " + (currentTimeForTimezone("America/New_York") + " hello")) }',
        statement: {
          args: [
            {
              args: [
                {
                  type: "string",
                  value: "infix ",
                },
                {
                  args: [
                    {
                      args: [
                        {
                          type: "string",
                          value: "America/New_York",
                        },
                      ],
                      name: "currentTimeForTimezone",
                      type: "call",
                    },
                    {
                      type: "string",
                      value: " hello",
                    },
                  ],
                  name: "__+__",
                  type: "call",
                },
              ],
              name: "__+__",
              type: "call",
            },
          ],
          name: "respond",
          type: "call",
        },
      },
    ],
    request: "some request",
    resolvedActions: [
    ],
    resolvedCommands: [
      {
        args: [
          {
            type: "string",
            value: "America/New_York",
          },
        ],
        id: "0.0.1.0",
        name: "currentTimeForTimezone",
        returnValue: {
          type: "string",
          value: "2022-12-19T03:41:10-05:00",
        },
        type: "executed",
      },
      {
        args: [
          {
            type: "string",
            value: "2022-12-19T03:41:10-05:00",
          },
          {
            type: "string",
            value: " hello",
          },
        ],
        id: "0.0.1",
        name: "__+__",
        returnValue: {
          type: "string",
          value: "2022-12-19T03:41:10-05:00 hello",
        },
        type: "executed",
      },
      {
        args: [
          {
            type: "string",
            value: "infix ",
          },
          {
            type: "string",
            value: "2022-12-19T03:41:10-05:00 hello",
          },
        ],
        id: "0.0",
        name: "__+__",
        returnValue: {
          type: "string",
          value: "infix 2022-12-19T03:41:10-05:00 hello",
        },
        type: "executed",
      },
    ],
  },
}
`;

snapshot[`supports model outputs with lots of newlines 1`] = `
{
  n: 1,
  output: {
    dev: undefined,
    model: "assist-002",
    request: "some request",
    result: {
      pendingCommands: [
        {
          args: [
            {
              type: "string",
              value: "2022-12-24T08:41:10Z",
            },
            {
              type: "string",
              value: "Dinner with wife",
            },
          ],
          id: "0",
          name: "createCalendarEvent",
          type: "parsed",
        },
      ],
      results: [
      ],
      type: "pending_commands",
    },
  },
  state: {
    memory: {
      topLevelResults: [
      ],
      variables: {},
    },
    modelCallCount: 1,
    pending: [
      {
        action: 'Run { 
createCalendarEvent(parseRelativeTime("5 days from now"), "Dinner with wife"); }',
        statement: {
          args: [
            {
              args: [
                {
                  type: "string",
                  value: "5 days from now",
                },
              ],
              name: "parseRelativeTime",
              type: "call",
            },
            {
              type: "string",
              value: "Dinner with wife",
            },
          ],
          name: "createCalendarEvent",
          type: "call",
        },
      },
      {
        action: 'Run { 
respond("The time in New York is " + currentTimeForTimezone("America/New_York") + " and I have created a calendar event for dinner with your wife 5 days from now."); }',
        statement: {
          args: [
            {
              args: [
                {
                  args: [
                    {
                      type: "string",
                      value: "The time in New York is ",
                    },
                    {
                      args: [
                        {
                          type: "string",
                          value: "America/New_York",
                        },
                      ],
                      name: "currentTimeForTimezone",
                      type: "call",
                    },
                  ],
                  name: "__+__",
                  type: "call",
                },
                {
                  type: "string",
                  value: " and I have created a calendar event for dinner with your wife 5 days from now.",
                },
              ],
              name: "__+__",
              type: "call",
            },
          ],
          name: "respond",
          type: "call",
        },
      },
    ],
    request: "some request",
    resolvedActions: [
    ],
    resolvedCommands: [
      {
        args: [
          {
            type: "string",
            value: "5 days from now",
          },
        ],
        id: "0.0",
        name: "parseRelativeTime",
        returnValue: {
          type: "string",
          value: "2022-12-24T08:41:10Z",
        },
        type: "executed",
      },
    ],
  },
}
`;

snapshot[`supports model outputs with top level infix call 1`] = `
{
  n: 1,
  output: {
    dev: undefined,
    model: "assist-002",
    request: "some request",
    result: {
      pendingCommands: [
        {
          args: [
            {
              type: "string",
              value: "2022-12-24T08:41:10Z",
            },
            {
              type: "string",
              value: "Dinner with Wife",
            },
          ],
          id: "1",
          name: "createCalendarEvent",
          type: "parsed",
        },
      ],
      results: [
        {
          type: "string",
          value: "2022-12-19T03:41:10-05:00",
        },
      ],
      type: "pending_commands",
    },
  },
  state: {
    memory: {
      topLevelResults: [
        {
          type: "string",
          value: "2022-12-19T03:41:10-05:00",
        },
      ],
      variables: {
        result_0: {
          type: "string",
          value: "2022-12-19T03:41:10-05:00",
        },
      },
    },
    modelCallCount: 1,
    pending: [
      {
        action: "Run { createCalendarEvent(parseRelativeTime(\`in \${5} days\`), 'Dinner with Wife');}",
        statement: {
          args: [
            {
              args: [
                {
                  args: [
                    {
                      args: [
                        {
                          type: "string",
                          value: "in ",
                        },
                        {
                          type: "number",
                          value: 5,
                        },
                      ],
                      name: "__+__",
                      type: "call",
                    },
                    {
                      type: "string",
                      value: " days",
                    },
                  ],
                  name: "__+__",
                  type: "call",
                },
              ],
              name: "parseRelativeTime",
              type: "call",
            },
            {
              type: "string",
              value: "Dinner with Wife",
            },
          ],
          name: "createCalendarEvent",
          type: "call",
        },
      },
    ],
    request: "some request",
    resolvedActions: [
      {
        action: "Run { currentTimeForTimezone(\`America/\${\`New_York\`}\`);  }",
        result: '"2022-12-19T03:41:10-05:00"',
        statement: {
          args: [
            {
              type: "string",
              value: "America/New_York",
            },
          ],
          name: "currentTimeForTimezone",
          type: "call",
        },
      },
    ],
    resolvedCommands: [
      {
        args: [
          {
            type: "string",
            value: "America/New_York",
          },
        ],
        id: "0",
        name: "currentTimeForTimezone",
        returnValue: {
          type: "string",
          value: "2022-12-19T03:41:10-05:00",
        },
        type: "executed",
      },
      {
        args: [
          {
            type: "string",
            value: "in ",
          },
          {
            type: "number",
            value: 5,
          },
        ],
        id: "1.0.0.0",
        name: "__+__",
        returnValue: {
          type: "string",
          value: "in 5",
        },
        type: "executed",
      },
      {
        args: [
          {
            type: "string",
            value: "in 5",
          },
          {
            type: "string",
            value: " days",
          },
        ],
        id: "1.0.0",
        name: "__+__",
        returnValue: {
          type: "string",
          value: "in 5 days",
        },
        type: "executed",
      },
      {
        args: [
          {
            type: "string",
            value: "in 5 days",
          },
        ],
        id: "1.0",
        name: "parseRelativeTime",
        returnValue: {
          type: "string",
          value: "2022-12-24T08:41:10Z",
        },
        type: "executed",
      },
    ],
  },
}
`;

snapshot[`supports model outputs using template strings 1`] = `
{
  n: 1,
  output: {
    dev: undefined,
    model: "assist-002",
    request: "some request",
    result: {
      pendingCommands: [
        {
          args: [
            {
              type: "string",
              value: "2022-12-24T08:41:10Z",
            },
            {
              type: "string",
              value: "Dinner with Wife",
            },
          ],
          id: "1",
          name: "createCalendarEvent",
          type: "parsed",
        },
      ],
      results: [
        {
          type: "string",
          value: "2022-12-19T08:41:10Z 2022-12-19T03:41:10-05:00",
        },
      ],
      type: "pending_commands",
    },
  },
  state: {
    memory: {
      topLevelResults: [
        {
          type: "string",
          value: "2022-12-19T08:41:10Z 2022-12-19T03:41:10-05:00",
        },
      ],
      variables: {
        result_0: {
          type: "string",
          value: "2022-12-19T08:41:10Z 2022-12-19T03:41:10-05:00",
        },
      },
    },
    modelCallCount: 1,
    pending: [
      {
        action: "Run {  createCalendarEvent(parseRelativeTime('in 5 days'), 'Dinner with Wife'); }",
        statement: {
          args: [
            {
              args: [
                {
                  type: "string",
                  value: "in 5 days",
                },
              ],
              name: "parseRelativeTime",
              type: "call",
            },
            {
              type: "string",
              value: "Dinner with Wife",
            },
          ],
          name: "createCalendarEvent",
          type: "call",
        },
      },
    ],
    request: "some request",
    resolvedActions: [
      {
        action: "Run { now() + ' ' + currentTimeForTimezone('America/New_York'); }",
        result: '"2022-12-19T08:41:10Z 2022-12-19T03:41:10-05:00"',
        statement: {
          args: [
            {
              args: [
                {
                  args: [
                  ],
                  name: "now",
                  type: "call",
                },
                {
                  type: "string",
                  value: " ",
                },
              ],
              name: "__+__",
              type: "call",
            },
            {
              args: [
                {
                  type: "string",
                  value: "America/New_York",
                },
              ],
              name: "currentTimeForTimezone",
              type: "call",
            },
          ],
          name: "__+__",
          type: "call",
        },
      },
    ],
    resolvedCommands: [
      {
        args: [
        ],
        id: "0.0.0",
        name: "now",
        returnValue: {
          type: "string",
          value: "2022-12-19T08:41:10Z",
        },
        type: "executed",
      },
      {
        args: [
          {
            type: "string",
            value: "America/New_York",
          },
        ],
        id: "0.1",
        name: "currentTimeForTimezone",
        returnValue: {
          type: "string",
          value: "2022-12-19T03:41:10-05:00",
        },
        type: "executed",
      },
      {
        args: [
          {
            type: "string",
            value: "2022-12-19T08:41:10Z",
          },
          {
            type: "string",
            value: " ",
          },
        ],
        id: "0.0",
        name: "__+__",
        returnValue: {
          type: "string",
          value: "2022-12-19T08:41:10Z ",
        },
        type: "executed",
      },
      {
        args: [
          {
            type: "string",
            value: "2022-12-19T08:41:10Z ",
          },
          {
            type: "string",
            value: "2022-12-19T03:41:10-05:00",
          },
        ],
        id: "0",
        name: "__+__",
        returnValue: {
          type: "string",
          value: "2022-12-19T08:41:10Z 2022-12-19T03:41:10-05:00",
        },
        type: "executed",
      },
      {
        args: [
          {
            type: "string",
            value: "in 5 days",
          },
        ],
        id: "1.0",
        name: "parseRelativeTime",
        returnValue: {
          type: "string",
          value: "2022-12-24T08:41:10Z",
        },
        type: "executed",
      },
    ],
  },
}
`;

snapshot[`supports model outputs with top level expression 1`] = `
{
  n: 2,
  output: {
    dev: undefined,
    model: "assist-002",
    request: "some request",
    result: {
      pendingCommands: [
        {
          args: [
            {
              type: "string",
              value: "I have finished",
            },
          ],
          id: "2",
          name: "respond",
          type: "parsed",
        },
      ],
      results: [
        {
          type: "string",
          value: "some string",
        },
        {
          type: "number",
          value: 123,
        },
      ],
      type: "pending_commands",
    },
  },
  state: {
    memory: {
      topLevelResults: [
        {
          type: "string",
          value: "some string",
        },
        {
          type: "number",
          value: 123,
        },
      ],
      variables: {
        result_0: {
          type: "string",
          value: "some string",
        },
        result_1: {
          type: "number",
          value: 123,
        },
      },
    },
    modelCallCount: 2,
    pending: [
      {
        action: "I have finished",
        isRespond: true,
        statement: {
          args: [
            {
              type: "string",
              value: "I have finished",
            },
          ],
          name: "respond",
          type: "call",
        },
      },
    ],
    request: "some request",
    resolvedActions: [
      {
        action: 'Run { "some string"; }',
        result: '"some string"',
        statement: {
          type: "string",
          value: "some string",
        },
      },
      {
        action: "Run { 123 }",
        result: "123",
        statement: {
          type: "number",
          value: 123,
        },
      },
    ],
    resolvedCommands: [
    ],
  },
}
`;

snapshot[`supports assignment 1`] = `
{
  n: 2,
  output: {
    dev: undefined,
    model: "assist-002",
    request: "some request",
    result: {
      pendingCommands: [
        {
          args: [
            {
              type: "string",
              value: "I have finished",
            },
          ],
          id: "3",
          name: "respond",
          type: "parsed",
        },
      ],
      results: [
        {
          type: "number",
          value: 123,
        },
        {
          type: "number",
          value: 111,
        },
        {
          type: "number",
          value: 234,
        },
      ],
      type: "pending_commands",
    },
  },
  state: {
    memory: {
      topLevelResults: [
        {
          type: "number",
          value: 123,
        },
        {
          type: "number",
          value: 111,
        },
        {
          type: "number",
          value: 234,
        },
      ],
      variables: {
        a: {
          type: "number",
          value: 123,
        },
        b: {
          type: "number",
          value: 111,
        },
        result_0: {
          type: "number",
          value: 123,
        },
        result_1: {
          type: "number",
          value: 111,
        },
        result_2: {
          type: "number",
          value: 234,
        },
      },
    },
    modelCallCount: 2,
    pending: [
      {
        action: "I have finished",
        isRespond: true,
        statement: {
          args: [
            {
              type: "string",
              value: "I have finished",
            },
          ],
          name: "respond",
          type: "call",
        },
      },
    ],
    request: "some request",
    resolvedActions: [
      {
        action: "Run { a = 123; }",
        result: "123",
        statement: {
          args: [
            {
              type: "string",
              value: "a",
            },
            {
              type: "number",
              value: 123,
            },
          ],
          name: "__=__",
          type: "call",
        },
      },
      {
        action: "Run { b = 111; }",
        result: "111",
        statement: {
          args: [
            {
              type: "string",
              value: "b",
            },
            {
              type: "number",
              value: 111,
            },
          ],
          name: "__=__",
          type: "call",
        },
      },
      {
        action: "Run { a + b; }",
        result: "234",
        statement: {
          args: [
            {
              args: [
                {
                  type: "string",
                  value: "a",
                },
              ],
              name: "\$ref",
              type: "call",
            },
            {
              args: [
                {
                  type: "string",
                  value: "b",
                },
              ],
              name: "\$ref",
              type: "call",
            },
          ],
          name: "__+__",
          type: "call",
        },
      },
    ],
    resolvedCommands: [
      {
        args: [
          {
            type: "string",
            value: "a",
          },
          {
            type: "number",
            value: 123,
          },
        ],
        id: "0",
        name: "__=__",
        returnValue: {
          type: "number",
          value: 123,
        },
        type: "executed",
      },
      {
        args: [
          {
            type: "string",
            value: "b",
          },
          {
            type: "number",
            value: 111,
          },
        ],
        id: "1",
        name: "__=__",
        returnValue: {
          type: "number",
          value: 111,
        },
        type: "executed",
      },
      {
        args: [
          {
            type: "string",
            value: "a",
          },
        ],
        id: "2.0",
        name: "\$ref",
        returnValue: {
          type: "number",
          value: 123,
        },
        type: "executed",
      },
      {
        args: [
          {
            type: "string",
            value: "b",
          },
        ],
        id: "2.1",
        name: "\$ref",
        returnValue: {
          type: "number",
          value: 111,
        },
        type: "executed",
      },
      {
        args: [
          {
            type: "number",
            value: 123,
          },
          {
            type: "number",
            value: 111,
          },
        ],
        id: "2",
        name: "__+__",
        returnValue: {
          type: "number",
          value: 234,
        },
        type: "executed",
      },
    ],
  },
}
`;

snapshot[`malformed command should fail rather than return as string 1`] = `"Unable to consume token: Date"`;

snapshot[`malformed command should fail rather than return as string 2 1`] = `"Unable to consume token: !"`;

snapshot[`server commands with identical inputs re-use results 1`] = `
{
  n: 1,
  output: {
    dev: undefined,
    model: "assist-002",
    request: "some request",
    result: {
      pendingCommands: [
        {
          args: [
            {
              type: "string",
              value: "not reused because client command",
            },
          ],
          id: "1",
          name: "respond",
          type: "parsed",
        },
      ],
      results: [
        {
          type: "string",
          value: "0000-00-00T00:00:00Z",
        },
      ],
      type: "pending_commands",
    },
  },
  state: {
    memory: {
      topLevelResults: [
        {
          type: "string",
          value: "0000-00-00T00:00:00Z",
        },
      ],
      variables: {
        result_0: {
          type: "string",
          value: "0000-00-00T00:00:00Z",
        },
      },
    },
    modelCallCount: 2,
    pending: [
      {
        action: 'Run { respond("not reused because client command") }',
        statement: {
          args: [
            {
              type: "string",
              value: "not reused because client command",
            },
          ],
          name: "respond",
          type: "call",
        },
      },
    ],
    request: "some request",
    resolvedActions: [
      {
        action: "Run { now();  }",
        result: '"0000-00-00T00:00:00Z"',
        statement: {
          args: [
          ],
          name: "now",
          type: "call",
        },
      },
    ],
    resolvedCommands: [
      {
        args: [
        ],
        id: "someid",
        name: "now",
        returnValue: {
          type: "string",
          value: "0000-00-00T00:00:00Z",
        },
        type: "executed",
      },
      {
        args: [
          {
            type: "string",
            value: "not reused because client command",
          },
        ],
        id: "someid",
        name: "respond",
        returnValue: {
          type: "string",
          value: "this should not be reused",
        },
        type: "executed",
      },
      {
        args: [
        ],
        id: "0",
        name: "now",
        returnValue: {
          type: "string",
          value: "0000-00-00T00:00:00Z",
        },
        type: "executed",
      },
    ],
  },
}
`;

snapshot[`completion with a complex code sample 1`] = `
{
  n: 1,
  output: {
    dev: undefined,
    model: "assist-002",
    request: "some request",
    result: {
      pendingCommands: [
        {
          args: [
            {
              type: "string",
              value: "The \`mode\` parameter in the JavaScript Fetch API is used to specify the mode of the request. The mode determines how the request will be made and whether it will be restricted by CORS (Cross-Origin Resource Sharing) policy.
The available modes are:
- \\"cors\\": This is the default mode. It allows the request to be made across domains, subject to CORS policy restrictions.
- \\"no-cors\\": This mode allows the request to be made, but it does not allow access to the response data. This mode is useful for making requests to third-party APIs that do not support CORS.
- \\"same-origin\\": This mode restricts the request to the same origin as the page making the request. This mode is useful for making requests to the same domain as the page, and it is not subject to CORS policy restrictions.
- \\"navigate\\": This mode is used to navigate to a new page. It is only used by the \`window.fetch()\` method.
Here's an example of how to use the \`mode\` parameter in a fetch request:

\`\`\`
fetch('https://example.com/data.json', {
  mode: 'cors'
})
.then(response => response.json())
.then(data => console.log(data))
.catch(error => console.error(error));
\`\`\`",
            },
          ],
          id: "0",
          name: "respond",
          type: "parsed",
        },
      ],
      results: [
      ],
      type: "pending_commands",
    },
  },
  state: {
    memory: {
      topLevelResults: [
      ],
      variables: {},
    },
    modelCallCount: 1,
    pending: [
      {
        action: "The \`mode\` parameter in the JavaScript Fetch API is used to specify the mode of the request. The mode determines how the request will be made and whether it will be restricted by CORS (Cross-Origin Resource Sharing) policy.
The available modes are:
- \\"cors\\": This is the default mode. It allows the request to be made across domains, subject to CORS policy restrictions.
- \\"no-cors\\": This mode allows the request to be made, but it does not allow access to the response data. This mode is useful for making requests to third-party APIs that do not support CORS.
- \\"same-origin\\": This mode restricts the request to the same origin as the page making the request. This mode is useful for making requests to the same domain as the page, and it is not subject to CORS policy restrictions.
- \\"navigate\\": This mode is used to navigate to a new page. It is only used by the \`window.fetch()\` method.
Here's an example of how to use the \`mode\` parameter in a fetch request:

\`\`\`
fetch('https://example.com/data.json', {
  mode: 'cors'
})
.then(response => response.json())
.then(data => console.log(data))
.catch(error => console.error(error));
\`\`\`",
        isRespond: true,
        statement: {
          args: [
            {
              type: "string",
              value: "The \`mode\` parameter in the JavaScript Fetch API is used to specify the mode of the request. The mode determines how the request will be made and whether it will be restricted by CORS (Cross-Origin Resource Sharing) policy.
The available modes are:
- \\"cors\\": This is the default mode. It allows the request to be made across domains, subject to CORS policy restrictions.
- \\"no-cors\\": This mode allows the request to be made, but it does not allow access to the response data. This mode is useful for making requests to third-party APIs that do not support CORS.
- \\"same-origin\\": This mode restricts the request to the same origin as the page making the request. This mode is useful for making requests to the same domain as the page, and it is not subject to CORS policy restrictions.
- \\"navigate\\": This mode is used to navigate to a new page. It is only used by the \`window.fetch()\` method.
Here's an example of how to use the \`mode\` parameter in a fetch request:

\`\`\`
fetch('https://example.com/data.json', {
  mode: 'cors'
})
.then(response => response.json())
.then(data => console.log(data))
.catch(error => console.error(error));
\`\`\`",
            },
          ],
          name: "respond",
          type: "call",
        },
      },
    ],
    request: "some request",
    resolvedActions: [
    ],
    resolvedCommands: [
    ],
  },
}
`;

snapshot[`calendar event creation in a single completion 1`] = `
{
  n: 1,
  output: {
    dev: undefined,
    model: "assist-002",
    request: "some request",
    result: {
      pendingCommands: [
        {
          args: [
            {
              type: "string",
              value: "2022-12-27T12:00:00Z",
            },
            {
              type: "string",
              value: "Lunch with Bill",
            },
          ],
          id: "1",
          name: "createCalendarEvent",
          type: "parsed",
        },
      ],
      results: [
        {
          type: "string",
          value: "2022-12-27T12:00:00Z",
        },
      ],
      type: "pending_commands",
    },
  },
  state: {
    memory: {
      topLevelResults: [
        {
          type: "string",
          value: "2022-12-27T12:00:00Z",
        },
      ],
      variables: {
        nextTuesday: {
          type: "string",
          value: "2022-12-27T12:00:00Z",
        },
        result_0: {
          type: "string",
          value: "2022-12-27T12:00:00Z",
        },
      },
    },
    modelCallCount: 1,
    pending: [
      {
        action: 'Run { createCalendarEvent(nextTuesday, "Lunch with Bill"); }',
        statement: {
          args: [
            {
              args: [
                {
                  type: "string",
                  value: "nextTuesday",
                },
              ],
              name: "\$ref",
              type: "call",
            },
            {
              type: "string",
              value: "Lunch with Bill",
            },
          ],
          name: "createCalendarEvent",
          type: "call",
        },
      },
    ],
    request: "some request",
    resolvedActions: [
      {
        action: 'Run { var nextTuesday = "2022-12-27T12:00:00Z"; }',
        result: '"2022-12-27T12:00:00Z"',
        statement: {
          args: [
            {
              type: "string",
              value: "nextTuesday",
            },
            {
              type: "string",
              value: "2022-12-27T12:00:00Z",
            },
          ],
          name: "__=__",
          type: "call",
        },
      },
    ],
    resolvedCommands: [
      {
        args: [
          {
            type: "string",
            value: "nextTuesday",
          },
          {
            type: "string",
            value: "2022-12-27T12:00:00Z",
          },
        ],
        id: "0",
        name: "__=__",
        returnValue: {
          type: "string",
          value: "2022-12-27T12:00:00Z",
        },
        type: "executed",
      },
      {
        args: [
          {
            type: "string",
            value: "nextTuesday",
          },
        ],
        id: "1.0",
        name: "\$ref",
        returnValue: {
          type: "string",
          value: "2022-12-27T12:00:00Z",
        },
        type: "executed",
      },
    ],
  },
}
`;

snapshot[`multiple assignment in one completion 1`] = `
{
  n: 5,
  output: {
    dev: undefined,
    model: "assist-002",
    request: "some request",
    result: {
      pendingCommands: [
        {
          args: [
            {
              type: "string",
              value: 'The available rooms in French are "\${b}", in Spanish are "\${c}", and in Japanese are "\${d}".',
            },
          ],
          id: "4",
          name: "respond",
          type: "parsed",
        },
      ],
      results: [
        {
          type: "string",
          value: "What rooms do you have available?",
        },
        {
          type: "string",
          value: "french translation",
        },
        {
          type: "string",
          value: "spanish translation",
        },
        {
          type: "string",
          value: "japanese translation",
        },
      ],
      type: "pending_commands",
    },
  },
  state: {
    memory: {
      topLevelResults: [
        {
          type: "string",
          value: "What rooms do you have available?",
        },
        {
          type: "string",
          value: "french translation",
        },
        {
          type: "string",
          value: "spanish translation",
        },
        {
          type: "string",
          value: "japanese translation",
        },
      ],
      variables: {
        a: {
          type: "string",
          value: "What rooms do you have available?",
        },
        b: {
          type: "string",
          value: "french translation",
        },
        c: {
          type: "string",
          value: "spanish translation",
        },
        d: {
          type: "string",
          value: "japanese translation",
        },
        result_0: {
          type: "string",
          value: "What rooms do you have available?",
        },
        result_1: {
          type: "string",
          value: "french translation",
        },
        result_2: {
          type: "string",
          value: "spanish translation",
        },
        result_3: {
          type: "string",
          value: "japanese translation",
        },
      },
    },
    modelCallCount: 2,
    pending: [
      {
        action: 'The available rooms in French are "\${b}", in Spanish are "\${c}", and in Japanese are "\${d}".',
        isRespond: true,
        statement: {
          args: [
            {
              type: "string",
              value: 'The available rooms in French are "\${b}", in Spanish are "\${c}", and in Japanese are "\${d}".',
            },
          ],
          name: "respond",
          type: "call",
        },
      },
    ],
    request: "some request",
    resolvedActions: [
      {
        action: 'Run { a = "What rooms do you have available?" }',
        result: '"What rooms do you have available?"',
        statement: {
          args: [
            {
              type: "string",
              value: "a",
            },
            {
              type: "string",
              value: "What rooms do you have available?",
            },
          ],
          name: "__=__",
          type: "call",
        },
      },
      {
        action: 'Run { b = translate(a, "French") }',
        result: '"french translation"',
        statement: {
          args: [
            {
              type: "string",
              value: "b",
            },
            {
              args: [
                {
                  args: [
                    {
                      type: "string",
                      value: "a",
                    },
                  ],
                  name: "\$ref",
                  type: "call",
                },
                {
                  type: "string",
                  value: "French",
                },
              ],
              name: "translate",
              type: "call",
            },
          ],
          name: "__=__",
          type: "call",
        },
      },
      {
        action: 'Run { c = translate(a, "Spanish") }',
        result: '"spanish translation"',
        statement: {
          args: [
            {
              type: "string",
              value: "c",
            },
            {
              args: [
                {
                  args: [
                    {
                      type: "string",
                      value: "a",
                    },
                  ],
                  name: "\$ref",
                  type: "call",
                },
                {
                  type: "string",
                  value: "Spanish",
                },
              ],
              name: "translate",
              type: "call",
            },
          ],
          name: "__=__",
          type: "call",
        },
      },
      {
        action: 'Run { d = translate(a, "Japanese") }',
        result: '"japanese translation"',
        statement: {
          args: [
            {
              type: "string",
              value: "d",
            },
            {
              args: [
                {
                  args: [
                    {
                      type: "string",
                      value: "a",
                    },
                  ],
                  name: "\$ref",
                  type: "call",
                },
                {
                  type: "string",
                  value: "Japanese",
                },
              ],
              name: "translate",
              type: "call",
            },
          ],
          name: "__=__",
          type: "call",
        },
      },
    ],
    resolvedCommands: [
      {
        args: [
          {
            type: "string",
            value: "a",
          },
          {
            type: "string",
            value: "What rooms do you have available?",
          },
        ],
        id: "0",
        name: "__=__",
        returnValue: {
          type: "string",
          value: "What rooms do you have available?",
        },
        type: "executed",
      },
      {
        args: [
          {
            type: "string",
            value: "a",
          },
        ],
        id: "1.1.0",
        name: "\$ref",
        returnValue: {
          type: "string",
          value: "What rooms do you have available?",
        },
        type: "executed",
      },
      {
        args: [
          {
            type: "string",
            value: "What rooms do you have available?",
          },
          {
            type: "string",
            value: "French",
          },
        ],
        id: "1.1",
        name: "translate",
        returnValue: {
          type: "string",
          value: "french translation",
        },
        type: "executed",
      },
      {
        args: [
          {
            type: "string",
            value: "b",
          },
          {
            type: "string",
            value: "french translation",
          },
        ],
        id: "1",
        name: "__=__",
        returnValue: {
          type: "string",
          value: "french translation",
        },
        type: "executed",
      },
      {
        args: [
          {
            type: "string",
            value: "a",
          },
        ],
        id: "2.1.0",
        name: "\$ref",
        returnValue: {
          type: "string",
          value: "What rooms do you have available?",
        },
        type: "executed",
      },
      {
        args: [
          {
            type: "string",
            value: "What rooms do you have available?",
          },
          {
            type: "string",
            value: "Spanish",
          },
        ],
        id: "2.1",
        name: "translate",
        returnValue: {
          type: "string",
          value: "spanish translation",
        },
        type: "executed",
      },
      {
        args: [
          {
            type: "string",
            value: "c",
          },
          {
            type: "string",
            value: "spanish translation",
          },
        ],
        id: "2",
        name: "__=__",
        returnValue: {
          type: "string",
          value: "spanish translation",
        },
        type: "executed",
      },
      {
        args: [
          {
            type: "string",
            value: "a",
          },
        ],
        id: "3.1.0",
        name: "\$ref",
        returnValue: {
          type: "string",
          value: "What rooms do you have available?",
        },
        type: "executed",
      },
      {
        args: [
          {
            type: "string",
            value: "What rooms do you have available?",
          },
          {
            type: "string",
            value: "Japanese",
          },
        ],
        id: "3.1",
        name: "translate",
        returnValue: {
          type: "string",
          value: "japanese translation",
        },
        type: "executed",
      },
      {
        args: [
          {
            type: "string",
            value: "d",
          },
          {
            type: "string",
            value: "japanese translation",
          },
        ],
        id: "3",
        name: "__=__",
        returnValue: {
          type: "string",
          value: "japanese translation",
        },
        type: "executed",
      },
    ],
  },
}
`;

snapshot[`client resolved command 1`] = `
{
  n: 1,
  output: {
    dev: undefined,
    model: "assist-002",
    request: "some request",
    result: {
      pendingCommands: [
        {
          args: [
            {
              type: "string",
              value: "what do you want?",
            },
          ],
          id: "0",
          name: "respond",
          type: "parsed",
        },
      ],
      results: [
      ],
      type: "pending_commands",
    },
  },
  state: {
    memory: {
      topLevelResults: [
      ],
      variables: {},
    },
    modelCallCount: 1,
    pending: [
      {
        action: 'Run { respond("what do you want?") }',
        statement: {
          args: [
            {
              type: "string",
              value: "what do you want?",
            },
          ],
          name: "respond",
          type: "call",
        },
      },
    ],
    request: "some request",
    resolvedActions: [
    ],
    resolvedCommands: [
    ],
  },
}
`;

snapshot[`client resolved command - continue but unresolved 1`] = `
{
  n: 0,
  output: {
    dev: undefined,
    model: "assist-002",
    request: "some request",
    result: {
      pendingCommands: [
        {
          args: [
            {
              type: "string",
              value: "2022-01-01",
            },
            {
              type: "string",
              value: "event name",
            },
          ],
          id: "1",
          name: "createCalendarEvent",
          type: "parsed",
        },
      ],
      results: [
      ],
      type: "pending_commands",
    },
  },
  state: {
    memory: {
      topLevelResults: [
      ],
      variables: {},
    },
    modelCallCount: 1,
    pending: [
      {
        action: 'createCalendarEvent("2022-01-01", "event name")',
        result: undefined,
        statement: {
          args: [
            {
              type: "string",
              value: "2022-01-01",
            },
            {
              type: "string",
              value: "event name",
            },
          ],
          name: "createCalendarEvent",
          type: "call",
        },
      },
    ],
    request: "some request",
    resolvedActions: [
      {
        action: "now()",
        result: "2022-12-19T08:41:10.000Z",
        statement: {
          args: [
          ],
          name: "now",
          type: "call",
        },
      },
    ],
    resolvedCommands: [
      {
        args: [
        ],
        id: "0",
        name: "now",
        returnValue: {
          type: "string",
          value: "2022-12-19T08:41:10.000Z",
        },
        type: "executed",
      },
    ],
  },
}
`;

snapshot[`client resolved command - wrong return type 1`] = `"command createCalendarEvent expects return type to be void but got boolean"`;

snapshot[`client resolved command - fulfilled 1`] = `
{
  n: 1,
  output: {
    dev: undefined,
    model: "assist-002",
    request: "some request",
    result: {
      pendingCommands: [
        {
          args: [
            {
              type: "string",
              value: "I have finished",
            },
          ],
          id: "2",
          name: "respond",
          type: "parsed",
        },
      ],
      results: [
      ],
      type: "pending_commands",
    },
  },
  state: {
    memory: {
      topLevelResults: [
        <1 empty item>,
        {
          type: "void",
        },
      ],
      variables: {
        result_1: {
          type: "void",
        },
      },
    },
    modelCallCount: 2,
    pending: [
      {
        action: "I have finished",
        isRespond: true,
        statement: {
          args: [
            {
              type: "string",
              value: "I have finished",
            },
          ],
          name: "respond",
          type: "call",
        },
      },
    ],
    request: "some request",
    resolvedActions: [
      {
        action: "now()",
        result: "2022-12-19T08:41:10.000Z",
        statement: {
          args: [
          ],
          name: "now",
          type: "call",
        },
      },
      {
        action: 'createCalendarEvent("2022-01-01", "event name")',
        result: "void",
        statement: {
          args: [
            {
              type: "string",
              value: "2022-01-01",
            },
            {
              type: "string",
              value: "event name",
            },
          ],
          name: "createCalendarEvent",
          type: "call",
        },
      },
    ],
    resolvedCommands: [
      {
        args: [
        ],
        id: "0",
        name: "now",
        returnValue: {
          type: "string",
          value: "2022-12-19T08:41:10.000Z",
        },
        type: "executed",
      },
      {
        args: [
          {
            type: "string",
            value: "2022-01-01",
          },
          {
            type: "string",
            value: "event name",
          },
        ],
        id: "1",
        name: "createCalendarEvent",
        returnValue: {
          type: "void",
        },
        type: "executed",
      },
    ],
  },
}
`;

snapshot[`client resolved command - fulfilled 2`] = `
[
  {
    content: "some request",
    role: "user",
  },
  {
    content: "now()",
    role: "assistant",
  },
  {
    content: "Result: 2022-12-19T08:41:10.000Z",
    role: "system",
  },
  {
    content: 'createCalendarEvent("2022-01-01", "event name")',
    role: "assistant",
  },
  {
    content: "Result: void",
    role: "system",
  },
]
`;

snapshot[`nested calls 1`] = `
{
  n: 1,
  output: {
    dev: undefined,
    model: "assist-002",
    request: "some request",
    result: {
      pendingCommands: [
        {
          args: [
            {
              type: "string",
              value: "2022-12-24T08:41:10Z",
            },
            {
              type: "string",
              value: "Dinner with Wife",
            },
          ],
          id: "0",
          name: "createCalendarEvent",
          type: "parsed",
        },
      ],
      results: [
      ],
      type: "pending_commands",
    },
  },
  state: {
    memory: {
      topLevelResults: [
      ],
      variables: {},
    },
    modelCallCount: 1,
    pending: [
      {
        action: 'Run { createCalendarEvent(parseRelativeTime("5 days from now"), "Dinner with Wife") }',
        statement: {
          args: [
            {
              args: [
                {
                  type: "string",
                  value: "5 days from now",
                },
              ],
              name: "parseRelativeTime",
              type: "call",
            },
            {
              type: "string",
              value: "Dinner with Wife",
            },
          ],
          name: "createCalendarEvent",
          type: "call",
        },
      },
    ],
    request: "some request",
    resolvedActions: [
    ],
    resolvedCommands: [
      {
        args: [
          {
            type: "string",
            value: "5 days from now",
          },
        ],
        id: "0.0",
        name: "parseRelativeTime",
        returnValue: {
          type: "string",
          value: "2022-12-24T08:41:10Z",
        },
        type: "executed",
      },
    ],
  },
}
`;

snapshot[`nested calls 2`] = `
[
  {
    content: "some request",
    role: "user",
  },
]
`;

snapshot[`request needs more context 1`] = `
{
  n: 1,
  output: {
    dev: undefined,
    model: "assist-002",
    request: "some request",
    result: {
      pendingCommands: [
        {
          args: [
            {
              type: "string",
              value: "please provide the text",
            },
          ],
          id: "0.0",
          name: "respond",
          type: "parsed",
        },
      ],
      results: [
      ],
      type: "pending_commands",
    },
  },
  state: {
    memory: {
      topLevelResults: [
      ],
      variables: {},
    },
    modelCallCount: 1,
    pending: [
      {
        action: 'Run { editText(respond("please provide the text"), "convert to poem") }',
        statement: {
          args: [
            {
              args: [
                {
                  type: "string",
                  value: "please provide the text",
                },
              ],
              name: "respond",
              type: "call",
            },
            {
              type: "string",
              value: "convert to poem",
            },
          ],
          name: "editText",
          type: "call",
        },
      },
    ],
    request: "some request",
    resolvedActions: [
    ],
    resolvedCommands: [
    ],
  },
}
`;

snapshot[`awaiting response - still missing 1`] = `
{
  n: 0,
  output: {
    dev: undefined,
    model: "assist-002",
    request: "some request",
    result: {
      pendingCommands: [
        {
          args: [
            {
              type: "string",
              value: "some response",
            },
          ],
          id: "1",
          name: "respond",
          type: "parsed",
        },
      ],
      results: [
      ],
      type: "pending_commands",
    },
  },
  state: {
    memory: {
      topLevelResults: [
      ],
      variables: {},
    },
    modelCallCount: 1,
    pending: [
      {
        action: "some response",
        isRespond: true,
        result: undefined,
        statement: {
          args: [
            {
              type: "string",
              value: "some response",
            },
          ],
          name: "respond",
          type: "call",
        },
      },
    ],
    request: "some request",
    resolvedActions: [
      {
        action: "someCommand()",
        result: '"blah"',
        statement: {
          args: [
          ],
          name: "someCommand",
          type: "call",
        },
      },
    ],
    resolvedCommands: [
      {
        args: [
        ],
        id: "0",
        name: "someCommand",
        returnValue: {
          type: "string",
          value: "blah",
        },
        type: "executed",
      },
    ],
  },
}
`;

snapshot[`awaiting response - fulfilled 1`] = `
{
  n: 1,
  output: {
    dev: undefined,
    model: "assist-002",
    request: "some request",
    result: {
      pendingCommands: [
        {
          args: [
            {
              type: "string",
              value: "I have finished",
            },
          ],
          id: "2",
          name: "respond",
          type: "parsed",
        },
      ],
      results: [
        {
          type: "string",
          value: "some user response",
        },
      ],
      type: "pending_commands",
    },
  },
  state: {
    memory: {
      topLevelResults: [
        <1 empty item>,
        {
          type: "string",
          value: "some user response",
        },
      ],
      variables: {
        result_1: {
          type: "string",
          value: "some user response",
        },
      },
    },
    modelCallCount: 2,
    pending: [
      {
        action: "I have finished",
        isRespond: true,
        statement: {
          args: [
            {
              type: "string",
              value: "I have finished",
            },
          ],
          name: "respond",
          type: "call",
        },
      },
    ],
    request: "some request",
    resolvedActions: [
      {
        action: "someCommand()",
        result: '"blah"',
        statement: {
          args: [
          ],
          name: "someCommand",
          type: "call",
        },
      },
      {
        action: "some response",
        isRespond: true,
        result: '"some user response"',
        statement: {
          args: [
            {
              type: "string",
              value: "some response",
            },
          ],
          name: "respond",
          type: "call",
        },
      },
    ],
    resolvedCommands: [
      {
        args: [
        ],
        id: "0",
        name: "someCommand",
        returnValue: {
          type: "string",
          value: "blah",
        },
        type: "executed",
      },
      {
        args: [
          {
            type: "string",
            value: "some response",
          },
        ],
        id: "1",
        name: "respond",
        returnValue: {
          type: "string",
          value: "some user response",
        },
        type: "executed",
      },
    ],
  },
}
`;

snapshot[`awaiting response - fulfilled 2`] = `
[
  {
    content: "some request",
    role: "user",
  },
  {
    content: "someCommand()",
    role: "assistant",
  },
  {
    content: 'Result: "blah"',
    role: "system",
  },
  {
    content: "some response",
    role: "assistant",
  },
  {
    content: "some user response",
    name: "User",
    role: "user",
  },
]
`;

snapshot[`max model calls 1`] = `"max iteration count of 10 reached"`;

snapshot[`wrong arg type 1`] = `"Unable to consume token: math"`;

snapshot[`wrong arg count 1`] = `"Unable to consume token: math"`;

snapshot[`long results are truncated and stored in variables 1`] = `
{
  n: 3,
  output: {
    dev: undefined,
    model: "assist-002",
    request: "some request",
    result: {
      pendingCommands: [
        {
          args: [
            {
              type: "string",
              value: "I have finished",
            },
          ],
          id: "2",
          name: "respond",
          type: "parsed",
        },
      ],
      results: [
        {
          type: "string",
          value: "word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word",
        },
        {
          type: "string",
          value: "word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word",
        },
      ],
      type: "pending_commands",
    },
  },
  state: {
    memory: {
      topLevelResults: [
        {
          type: "string",
          value: "word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word",
        },
        {
          type: "string",
          value: "word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word",
        },
      ],
      variables: {
        longVar: {
          type: "string",
          value: "word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word",
        },
        result_0: {
          type: "string",
          value: "word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word",
        },
        result_1: {
          type: "string",
          value: "word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word",
        },
      },
    },
    modelCallCount: 3,
    pending: [
      {
        action: "I have finished",
        isRespond: true,
        statement: {
          args: [
            {
              type: "string",
              value: "I have finished",
            },
          ],
          name: "respond",
          type: "call",
        },
      },
    ],
    request: "some request",
    resolvedActions: [
      {
        action: 'Run { longVar = "word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word" }',
        result: '"word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word [... truncated: full value available in variable \`result_0\`]',
        statement: {
          args: [
            {
              type: "string",
              value: "longVar",
            },
            {
              type: "string",
              value: "word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word",
            },
          ],
          name: "__=__",
          type: "call",
        },
      },
      {
        action: "Run { longVar; }",
        result: '"word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word [... truncated: full value available in variable \`result_1\`]',
        statement: {
          args: [
            {
              type: "string",
              value: "longVar",
            },
          ],
          name: "\$ref",
          type: "call",
        },
      },
    ],
    resolvedCommands: [
      {
        args: [
          {
            type: "string",
            value: "longVar",
          },
          {
            type: "string",
            value: "word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word",
          },
        ],
        id: "0",
        name: "__=__",
        returnValue: {
          type: "string",
          value: "word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word",
        },
        type: "executed",
      },
      {
        args: [
          {
            type: "string",
            value: "longVar",
          },
        ],
        id: "1",
        name: "\$ref",
        returnValue: {
          type: "string",
          value: "word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word",
        },
        type: "executed",
      },
    ],
  },
}
`;

snapshot[`long results are truncated and stored in variables 2`] = `
[
  {
    content: "some request",
    role: "user",
  },
  {
    content: 'User information:
Timezone: "UTC"
Locale: "en-US"',
    role: "system",
  },
  {
    content: "Act as an AI assistant and fulfill the request as best you can. Do not make things up. Use functions/tools (documented below) to help with this, but always prefer responding directly if knowledge is readily available and accurate. If the request cannot be fulfilled using a combination of existing knowledge and functions then let the user know why, do not make things up.

Run{} blocks must be used to call functions. They must be included in the beginning before your response to the user which should be in plain language. Run blocks must only include a single statement. For example:

  Run { exampleFunction(\\"arg 1\\", arg2, 123, true); }
  I have completed your request

Note that Run{} blocks and their results are not visible to the user. In addition, the user is unable to call functions themselves. So do not assume that the user knows about functions or Run{} blocks.

It is possible to assign the result of a function to a variable, and use it later via string interpolation or as inputs into other functions:

  Run { a = exampleFn(\\"arg 1\\", arg2) }
  Run { b = exampleFn2(a) }
  The answer to your question is \${b}

Use functions sparingly and do not assume any other features exist beyond what is referenced above.

Known functions are declared below. Unknown functions MUST NOT be used. Pay attention to syntax and ensure correct string escaping. Prefer using functions ordered earlier in the list.

\`math(\\"formula (ascii characters only)\\": string): string\` - get the result of a math formula
\`now(): string\` - get current ISO8601 datetime in the user's timezone
\`commandWithNumberArg(\\"some number\\": number): void\` - some fixture command
\`parseRelativeTime(\\"natural language relative time\\": string): string\` - get ISO8601 datetime relative to now from natural language
\`editCode(\\"code to edit\\": string, \\"programming language or 'unknown'\\": string, \\"full description of desired changes or additions\\": string): string\` - edit code using the given requirements",
    role: "system",
  },
  {
    content: "some request",
    role: "user",
  },
  {
    content: 'Run { longVar = "word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word" }',
    role: "assistant",
  },
  {
    content: 'Result: "word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word [... truncated: full value available in variable \`result_0\`]',
    role: "system",
  },
  {
    content: 'User information:
Timezone: "UTC"
Locale: "en-US"',
    role: "system",
  },
  {
    content: "Act as an AI assistant and fulfill the request as best you can. Do not make things up. Use functions/tools (documented below) to help with this, but always prefer responding directly if knowledge is readily available and accurate. If the request cannot be fulfilled using a combination of existing knowledge and functions then let the user know why, do not make things up.

Run{} blocks must be used to call functions. They must be included in the beginning before your response to the user which should be in plain language. Run blocks must only include a single statement. For example:

  Run { exampleFunction(\\"arg 1\\", arg2, 123, true); }
  I have completed your request

Note that Run{} blocks and their results are not visible to the user. In addition, the user is unable to call functions themselves. So do not assume that the user knows about functions or Run{} blocks.

It is possible to assign the result of a function to a variable, and use it later via string interpolation or as inputs into other functions:

  Run { a = exampleFn(\\"arg 1\\", arg2) }
  Run { b = exampleFn2(a) }
  The answer to your question is \${b}

Use functions sparingly and do not assume any other features exist beyond what is referenced above.

Known functions are declared below. Unknown functions MUST NOT be used. Pay attention to syntax and ensure correct string escaping. Prefer using functions ordered earlier in the list.

\`math(\\"formula (ascii characters only)\\": string): string\` - get the result of a math formula
\`now(): string\` - get current ISO8601 datetime in the user's timezone
\`commandWithNumberArg(\\"some number\\": number): void\` - some fixture command
\`parseRelativeTime(\\"natural language relative time\\": string): string\` - get ISO8601 datetime relative to now from natural language
\`editCode(\\"code to edit\\": string, \\"programming language or 'unknown'\\": string, \\"full description of desired changes or additions\\": string): string\` - edit code using the given requirements",
    role: "system",
  },
  {
    content: "some request",
    role: "user",
  },
  {
    content: 'Run { longVar = "word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word" }',
    role: "assistant",
  },
  {
    content: 'Result: "word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word [... truncated: full value available in variable \`result_0\`]',
    role: "system",
  },
  {
    content: "Run { longVar; }",
    role: "assistant",
  },
  {
    content: 'Result: "word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word word [... truncated: full value available in variable \`result_1\`]',
    role: "system",
  },
]
`;

snapshot[`the 'result' var name is magic and refers to the previous result if not already assigned 1`] = `
{
  n: 10,
  output: {
    dev: undefined,
    model: "assist-002",
    request: "some request",
    result: {
      pendingCommands: [
        {
          args: [
            {
              type: "string",
              value: "I have finished: new result",
            },
          ],
          id: "9",
          name: "respond",
          type: "parsed",
        },
      ],
      results: [
        {
          type: "string",
          value: "hello result",
        },
        {
          type: "string",
          value: "hello result",
        },
        {
          type: "string",
          value: "b",
        },
        {
          type: "string",
          value: "b",
        },
        {
          type: "string",
          value: "new result",
        },
        {
          type: "string",
          value: "this should not show up twice",
        },
        {
          type: "string",
          value: "new result",
        },
        {
          type: "string",
          value: "this should show up",
        },
        {
          type: "string",
          value: "this should show up",
        },
      ],
      type: "pending_commands",
    },
  },
  state: {
    memory: {
      topLevelResults: [
        {
          type: "string",
          value: "hello result",
        },
        {
          type: "string",
          value: "hello result",
        },
        {
          type: "string",
          value: "b",
        },
        {
          type: "string",
          value: "b",
        },
        {
          type: "string",
          value: "new result",
        },
        {
          type: "string",
          value: "this should not show up twice",
        },
        {
          type: "string",
          value: "new result",
        },
        {
          type: "string",
          value: "this should show up",
        },
        {
          type: "string",
          value: "this should show up",
        },
      ],
      variables: {
        a: {
          type: "string",
          value: "b",
        },
        result: {
          type: "string",
          value: "new result",
        },
        result_0: {
          type: "string",
          value: "hello result",
        },
        result_1: {
          type: "string",
          value: "hello result",
        },
        result_2: {
          type: "string",
          value: "b",
        },
        result_3: {
          type: "string",
          value: "b",
        },
        result_4: {
          type: "string",
          value: "new result",
        },
        result_5: {
          type: "string",
          value: "this should not show up twice",
        },
        result_6: {
          type: "string",
          value: "new result",
        },
        result_7: {
          type: "string",
          value: "this should show up",
        },
        result_8: {
          type: "string",
          value: "this should show up",
        },
      },
    },
    modelCallCount: 10,
    pending: [
      {
        action: "I have finished: \${result}",
        isRespond: true,
        statement: {
          args: [
            {
              args: [
                {
                  type: "string",
                  value: "I have finished: ",
                },
                {
                  args: [
                    {
                      type: "string",
                      value: "result",
                    },
                  ],
                  name: "\$ref",
                  type: "call",
                },
              ],
              name: "__+__",
              type: "call",
            },
          ],
          name: "respond",
          type: "call",
        },
      },
    ],
    request: "some request",
    resolvedActions: [
      {
        action: 'Run { "hello result"; }',
        result: '"hello result"',
        statement: {
          type: "string",
          value: "hello result",
        },
      },
      {
        action: "Run { result; }",
        result: '"hello result"',
        statement: {
          args: [
            {
              type: "string",
              value: "result",
            },
          ],
          name: "\$ref",
          type: "call",
        },
      },
      {
        action: 'Run { var a = "b" }',
        result: '"b"',
        statement: {
          args: [
            {
              type: "string",
              value: "a",
            },
            {
              type: "string",
              value: "b",
            },
          ],
          name: "__=__",
          type: "call",
        },
      },
      {
        action: "Run { rEsUlt; }",
        result: '"b"',
        statement: {
          args: [
            {
              type: "string",
              value: "rEsUlt",
            },
          ],
          name: "\$ref",
          type: "call",
        },
      },
      {
        action: 'Run { var result = "new result"; }',
        result: '"new result"',
        statement: {
          args: [
            {
              type: "string",
              value: "result",
            },
            {
              type: "string",
              value: "new result",
            },
          ],
          name: "__=__",
          type: "call",
        },
      },
      {
        action: 'Run { "this should not show up twice"; }',
        result: '"this should not show up twice"',
        statement: {
          type: "string",
          value: "this should not show up twice",
        },
      },
      {
        action: "Run { result; }",
        result: '"new result"',
        statement: {
          args: [
            {
              type: "string",
              value: "result",
            },
          ],
          name: "\$ref",
          type: "call",
        },
      },
      {
        action: 'Run { "this should show up"; }',
        result: '"this should show up"',
        statement: {
          type: "string",
          value: "this should show up",
        },
      },
      {
        action: "Run { reSult; }",
        result: '"this should show up"',
        statement: {
          args: [
            {
              type: "string",
              value: "reSult",
            },
          ],
          name: "\$ref",
          type: "call",
        },
      },
    ],
    resolvedCommands: [
      {
        args: [
          {
            type: "string",
            value: "result",
          },
        ],
        id: "1",
        name: "\$ref",
        returnValue: {
          type: "string",
          value: "hello result",
        },
        type: "executed",
      },
      {
        args: [
          {
            type: "string",
            value: "a",
          },
          {
            type: "string",
            value: "b",
          },
        ],
        id: "2",
        name: "__=__",
        returnValue: {
          type: "string",
          value: "b",
        },
        type: "executed",
      },
      {
        args: [
          {
            type: "string",
            value: "rEsUlt",
          },
        ],
        id: "3",
        name: "\$ref",
        returnValue: {
          type: "string",
          value: "b",
        },
        type: "executed",
      },
      {
        args: [
          {
            type: "string",
            value: "result",
          },
          {
            type: "string",
            value: "new result",
          },
        ],
        id: "4",
        name: "__=__",
        returnValue: {
          type: "string",
          value: "new result",
        },
        type: "executed",
      },
      {
        args: [
          {
            type: "string",
            value: "result",
          },
        ],
        id: "6",
        name: "\$ref",
        returnValue: {
          type: "string",
          value: "new result",
        },
        type: "executed",
      },
      {
        args: [
          {
            type: "string",
            value: "reSult",
          },
        ],
        id: "8",
        name: "\$ref",
        returnValue: {
          type: "string",
          value: "this should show up",
        },
        type: "executed",
      },
      {
        args: [
          {
            type: "string",
            value: "result",
          },
        ],
        id: "9.0.1",
        name: "\$ref",
        returnValue: {
          type: "string",
          value: "new result",
        },
        type: "executed",
      },
      {
        args: [
          {
            type: "string",
            value: "I have finished: ",
          },
          {
            type: "string",
            value: "new result",
          },
        ],
        id: "9.0",
        name: "__+__",
        returnValue: {
          type: "string",
          value: "I have finished: new result",
        },
        type: "executed",
      },
    ],
  },
}
`;

snapshot[`string to number and vice versa implicit conversion 1`] = `
{
  n: 2,
  output: {
    dev: undefined,
    model: "assist-002",
    request: "some request",
    result: {
      pendingCommands: [
        {
          args: [
            {
              type: "number",
              value: 123123,
            },
          ],
          id: "1",
          name: "commandWithNumberArg",
          type: "parsed",
        },
      ],
      results: [
        {
          type: "string",
          value: "123123",
        },
      ],
      type: "pending_commands",
    },
  },
  state: {
    memory: {
      topLevelResults: [
        {
          type: "string",
          value: "123123",
        },
      ],
      variables: {
        result_0: {
          type: "string",
          value: "123123",
        },
      },
    },
    modelCallCount: 2,
    pending: [
      {
        action: 'Run { commandWithNumberArg("123123.00") }',
        statement: {
          args: [
            {
              type: "string",
              value: "123123.00",
            },
          ],
          name: "commandWithNumberArg",
          type: "call",
        },
      },
    ],
    request: "some request",
    resolvedActions: [
      {
        action: "Run { math(123123) }",
        result: '"123123"',
        statement: {
          args: [
            {
              type: "number",
              value: 123123,
            },
          ],
          name: "math",
          type: "call",
        },
      },
    ],
    resolvedCommands: [
      {
        args: [
          {
            type: "string",
            value: "123123",
          },
        ],
        id: "0",
        name: "math",
        returnValue: {
          type: "string",
          value: "123123",
        },
        type: "executed",
      },
    ],
  },
}
`;

snapshot[`complex parseCompletion 1`] = `
[
  {
    action: "RUN { a(b()) }",
    statement: {
      args: [
        {
          args: [
          ],
          name: "b",
          type: "call",
        },
      ],
      name: "a",
      type: "call",
    },
  },
  {
    action: "RUN{ d(
123
) }",
    statement: {
      args: [
        {
          type: "number",
          value: 123,
        },
      ],
      name: "d",
      type: "call",
    },
  },
  {
    action: "RUN{ c() }",
    statement: {
      args: [
      ],
      name: "c",
      type: "call",
    },
  },
  {
    action: 'RuN {
  c(
    "RUN { a() }"
  )
}',
    statement: {
      args: [
        {
          type: "string",
          value: "RUN { a() }",
        },
      ],
      name: "c",
      type: "call",
    },
  },
  {
    action: "run { a = 123 }",
    statement: {
      args: [
        {
          type: "string",
          value: "a",
        },
        {
          type: "number",
          value: 123,
        },
      ],
      name: "__=__",
      type: "call",
    },
  },
  {
    action: "run {
  a = 123
}",
    statement: {
      args: [
        {
          type: "string",
          value: "a",
        },
        {
          type: "number",
          value: 123,
        },
      ],
      name: "__=__",
      type: "call",
    },
  },
  {
    action: "RUN { f() }",
    statement: {
      args: [
      ],
      name: "f",
      type: "call",
    },
  },
]
`;
