{"updated":"2023-02-05T00:34:57.553Z","prompt":"hello","dev":{"prompts":[{"prompt":"Fulfill the question/request as best and directly as you can. Be concise and minimize the number of Actions used. Do not make things up. If the question is unclear or cannot be answered indicate with fail(). Do not repeat the question back to the user.\n\nThe language for Action is a tiny subset of javascript, only available features should be used:\n\n* function calls and composition/nesting\n* string concatenation using +\n* simple variable assignment using var\n* string, number and boolean literals\n  * strings should be wrapped in backquotes (`)\n\nFunctions are declared below, any other functions must not be used. Do not assume state/variables exist unless explicitly referenced. Pay attention to syntax and ensure correct string escaping. Prefer using functions ordered earlier in the list. The user only receives a response when functions explicitly indicate this.\n\n`answer(answer: string): void` - respond to the original question/request\n`returnText(text: string): void` - send back modified input or generated result\n`fail(reason: string): void` - indicate the request cannot be fulfilled with the available tools\n`finish(): void` - mark request/question as fulfilled\n`getInputText(\"short sentence describing required input\": string): string` - get input text/code that the request may refer to\n`math(\"formula (ascii characters only)\": string): string` - get the result of a math formula\n`now(): string` - get current ISO8601 datetime\n`parseRelativeTime(\"natural language relative time\": string): string` - get ISO8601 datetime relative to now from natural language\n`ask(question: string): string` - clarify the original question/request\n`extractInformation(\"full description of desired output\": string, \"input text/code\": string): string` - describe/summarize/extract information from the given string\n\nUse the following format:\nRequest: the question or request you must answer\nThought: always think what needs to happen to fulfill the request\nAction: one or more expressions delimited by ; do not use any functions/variables/features not referenced above\nResult: the result of the Action expression\n... (this Thought/Action/Result can repeat N times)\n\nBegin!\n\nRequest: hello\nThought: ","completion":" greet the user\nAction: returnText(\"Hello!\");"}],"results":[]},"result":{"type":"pending_commands","pendingCommands":[{"type":"parsed","args":[{"type":"string","value":"Hello!"}],"id":"0.0","name":"returnText"}],"results":[]},"requestContext":{},"resolvedCommands":{}}
{"updated":"2023-02-05T00:34:59.152Z","prompt":"What is pi squared?","dev":{"prompts":[{"prompt":"Fulfill the question/request as best and directly as you can. Be concise and minimize the number of Actions used. Do not make things up. If the question is unclear or cannot be answered indicate with fail(). Do not repeat the question back to the user.\n\nThe language for Action is a tiny subset of javascript, only available features should be used:\n\n* function calls and composition/nesting\n* string concatenation using +\n* simple variable assignment using var\n* string, number and boolean literals\n  * strings should be wrapped in backquotes (`)\n\nFunctions are declared below, any other functions must not be used. Do not assume state/variables exist unless explicitly referenced. Pay attention to syntax and ensure correct string escaping. Prefer using functions ordered earlier in the list. The user only receives a response when functions explicitly indicate this.\n\n`answer(answer: string): void` - respond to the original question/request\n`returnText(text: string): void` - send back modified input or generated result\n`fail(reason: string): void` - indicate the request cannot be fulfilled with the available tools\n`finish(): void` - mark request/question as fulfilled\n`getInputText(\"short sentence describing required input\": string): string` - get input text/code that the request may refer to\n`math(\"formula (ascii characters only)\": string): string` - get the result of a math formula\n`now(): string` - get current ISO8601 datetime\n`parseRelativeTime(\"natural language relative time\": string): string` - get ISO8601 datetime relative to now from natural language\n`ask(question: string): string` - clarify the original question/request\n`extractInformation(\"full description of desired output\": string, \"input text/code\": string): string` - describe/summarize/extract information from the given string\n\nUse the following format:\nRequest: the question or request you must answer\nThought: always think what needs to happen to fulfill the request\nAction: one or more expressions delimited by ; do not use any functions/variables/features not referenced above\nResult: the result of the Action expression\n... (this Thought/Action/Result can repeat N times)\n\nBegin!\n\nRequest: What is pi squared?\nThought: ","completion":" Calculate pi squared\nAction: returnText(math(\"pi * pi\"));"}],"results":[]},"result":{"type":"pending_commands","pendingCommands":[{"type":"parsed","args":[{"type":"string","value":"9.869604401089358"}],"id":"0.0","name":"returnText"}],"results":[]},"requestContext":{},"resolvedCommands":{}}
{"updated":"2023-02-05T00:35:01.497Z","prompt":"What is the time in New York?","dev":{"prompts":[{"prompt":"Fulfill the question/request as best and directly as you can. Be concise and minimize the number of Actions used. Do not make things up. If the question is unclear or cannot be answered indicate with fail(). Do not repeat the question back to the user.\n\nThe language for Action is a tiny subset of javascript, only available features should be used:\n\n* function calls and composition/nesting\n* string concatenation using +\n* simple variable assignment using var\n* string, number and boolean literals\n  * strings should be wrapped in backquotes (`)\n\nFunctions are declared below, any other functions must not be used. Do not assume state/variables exist unless explicitly referenced. Pay attention to syntax and ensure correct string escaping. Prefer using functions ordered earlier in the list. The user only receives a response when functions explicitly indicate this.\n\n`answer(answer: string): void` - respond to the original question/request\n`returnText(text: string): void` - send back modified input or generated result\n`fail(reason: string): void` - indicate the request cannot be fulfilled with the available tools\n`finish(): void` - mark request/question as fulfilled\n`getInputText(\"short sentence describing required input\": string): string` - get input text/code that the request may refer to\n`currentTimeForTimezone(\"tz database timezone\": string): string` - get ISO8601 datetime for the given timezone\n`math(\"formula (ascii characters only)\": string): string` - get the result of a math formula\n`now(): string` - get current ISO8601 datetime\n`parseRelativeTime(\"natural language relative time\": string): string` - get ISO8601 datetime relative to now from natural language\n`ask(question: string): string` - clarify the original question/request\n`extractInformation(\"full description of desired output\": string, \"input text/code\": string): string` - describe/summarize/extract information from the given string\n\nUse the following format:\nRequest: the question or request you must answer\nThought: always think what needs to happen to fulfill the request\nAction: one or more expressions delimited by ; do not use any functions/variables/features not referenced above\nResult: the result of the Action expression\n... (this Thought/Action/Result can repeat N times)\n\nBegin!\n\nRequest: What is the time in New York?\nThought: ","completion":" Need to get the current time for the requested timezone\nAction: returnText(currentTimeForTimezone(\"America/New_York\"));"}],"results":[]},"result":{"type":"pending_commands","pendingCommands":[{"type":"parsed","args":[{"type":"string","value":"2022-12-19T03:41:10-05:00"}],"id":"0.0","name":"returnText"}],"results":[]},"requestContext":{},"resolvedCommands":{}}
{"updated":"2023-02-05T00:35:05.538Z","prompt":"Say you are my best friend in Japanese.","dev":{"prompts":[{"prompt":"Fulfill the question/request as best and directly as you can. Be concise and minimize the number of Actions used. Do not make things up. If the question is unclear or cannot be answered indicate with fail(). Do not repeat the question back to the user.\n\nThe language for Action is a tiny subset of javascript, only available features should be used:\n\n* function calls and composition/nesting\n* string concatenation using +\n* simple variable assignment using var\n* string, number and boolean literals\n  * strings should be wrapped in backquotes (`)\n\nFunctions are declared below, any other functions must not be used. Do not assume state/variables exist unless explicitly referenced. Pay attention to syntax and ensure correct string escaping. Prefer using functions ordered earlier in the list. The user only receives a response when functions explicitly indicate this.\n\n`answer(answer: string): void` - respond to the original question/request\n`returnText(text: string): void` - send back modified input or generated result\n`fail(reason: string): void` - indicate the request cannot be fulfilled with the available tools\n`finish(): void` - mark request/question as fulfilled\n`getInputText(\"short sentence describing required input\": string): string` - get input text/code that the request may refer to\n`math(\"formula (ascii characters only)\": string): string` - get the result of a math formula\n`now(): string` - get current ISO8601 datetime\n`parseRelativeTime(\"natural language relative time\": string): string` - get ISO8601 datetime relative to now from natural language\n`ask(question: string): string` - clarify the original question/request\n`extractInformation(\"full description of desired output\": string, \"input text/code\": string): string` - describe/summarize/extract information from the given string\n`translate(input: string, \"target language full name\": string): string` - translate text into target language\n\nUse the following format:\nRequest: the question or request you must answer\nThought: always think what needs to happen to fulfill the request\nAction: one or more expressions delimited by ; do not use any functions/variables/features not referenced above\nResult: the result of the Action expression\n... (this Thought/Action/Result can repeat N times)\n\nBegin!\n\nRequest: Say you are my best friend in Japanese.\nThought: ","completion":" Need to translate \"You are my best friend\" into Japanese\nAction: returnText(translate(\"You are my best friend\", \"Japanese\"));"}],"results":[]},"result":{"type":"pending_commands","pendingCommands":[{"type":"parsed","args":[{"type":"string","value":"君は私の最高の友達です。"}],"id":"0.0","name":"returnText"}],"results":[]},"requestContext":{},"resolvedCommands":{}}
{"updated":"2023-02-05T00:35:11.015Z","prompt":"Write you are my best friend in Japanese.","dev":{"prompts":[{"prompt":"Fulfill the question/request as best and directly as you can. Be concise and minimize the number of Actions used. Do not make things up. If the question is unclear or cannot be answered indicate with fail(). Do not repeat the question back to the user.\n\nThe language for Action is a tiny subset of javascript, only available features should be used:\n\n* function calls and composition/nesting\n* string concatenation using +\n* simple variable assignment using var\n* string, number and boolean literals\n  * strings should be wrapped in backquotes (`)\n\nFunctions are declared below, any other functions must not be used. Do not assume state/variables exist unless explicitly referenced. Pay attention to syntax and ensure correct string escaping. Prefer using functions ordered earlier in the list. The user only receives a response when functions explicitly indicate this.\n\n`answer(answer: string): void` - respond to the original question/request\n`returnText(text: string): void` - send back modified input or generated result\n`fail(reason: string): void` - indicate the request cannot be fulfilled with the available tools\n`finish(): void` - mark request/question as fulfilled\n`getInputText(\"short sentence describing required input\": string): string` - get input text/code that the request may refer to\n`math(\"formula (ascii characters only)\": string): string` - get the result of a math formula\n`now(): string` - get current ISO8601 datetime\n`parseRelativeTime(\"natural language relative time\": string): string` - get ISO8601 datetime relative to now from natural language\n`generateCode(language: string, requirements: string): string` - generate code for the given language and verbose description/requirements\n`ask(question: string): string` - clarify the original question/request\n`extractInformation(\"full description of desired output\": string, \"input text/code\": string): string` - describe/summarize/extract information from the given string\n`translate(input: string, \"target language full name\": string): string` - translate text into target language\n\nUse the following format:\nRequest: the question or request you must answer\nThought: always think what needs to happen to fulfill the request\nAction: one or more expressions delimited by ; do not use any functions/variables/features not referenced above\nResult: the result of the Action expression\n... (this Thought/Action/Result can repeat N times)\n\nBegin!\n\nRequest: Write you are my best friend in Japanese.\nThought: ","completion":" Need to translate English to Japanese.\nAction: translate('You are my best friend', 'Japanese');"},{"prompt":"Fulfill the question/request as best and directly as you can. Be concise and minimize the number of Actions used. Do not make things up. If the question is unclear or cannot be answered indicate with fail(). Do not repeat the question back to the user.\n\nThe language for Action is a tiny subset of javascript, only available features should be used:\n\n* function calls and composition/nesting\n* string concatenation using +\n* simple variable assignment using var\n* string, number and boolean literals\n  * strings should be wrapped in backquotes (`)\n\nFunctions are declared below, any other functions must not be used. Do not assume state/variables exist unless explicitly referenced. Pay attention to syntax and ensure correct string escaping. Prefer using functions ordered earlier in the list. The user only receives a response when functions explicitly indicate this.\n\n`answer(answer: string): void` - respond to the original question/request\n`returnText(text: string): void` - send back modified input or generated result\n`fail(reason: string): void` - indicate the request cannot be fulfilled with the available tools\n`finish(): void` - mark request/question as fulfilled\n`getInputText(\"short sentence describing required input\": string): string` - get input text/code that the request may refer to\n`math(\"formula (ascii characters only)\": string): string` - get the result of a math formula\n`now(): string` - get current ISO8601 datetime\n`parseRelativeTime(\"natural language relative time\": string): string` - get ISO8601 datetime relative to now from natural language\n`generateCode(language: string, requirements: string): string` - generate code for the given language and verbose description/requirements\n`ask(question: string): string` - clarify the original question/request\n`extractInformation(\"full description of desired output\": string, \"input text/code\": string): string` - describe/summarize/extract information from the given string\n`translate(input: string, \"target language full name\": string): string` - translate text into target language\n\nUse the following format:\nRequest: the question or request you must answer\nThought: always think what needs to happen to fulfill the request\nAction: one or more expressions delimited by ; do not use any functions/variables/features not referenced above\nResult: the result of the Action expression\n... (this Thought/Action/Result can repeat N times)\n\nBegin!\n\nRequest: Write you are my best friend in Japanese.\nThought: Need to translate English to Japanese.\nAction: translate('You are my best friend', 'Japanese');\nResult: \"あなたは私の最高の友達です。\"\nThought: ","completion":" Need to indicate the request is fulfilled.\nAction: finish();"}],"results":["\"あなたは私の最高の友達です。\"","void"]},"result":{"type":"finished","results":[{"type":"string","value":"あなたは私の最高の友達です。"}]},"requestContext":{},"resolvedCommands":{}}
{"updated":"2023-02-05T00:35:13.325Z","prompt":"Who is george lucas the director?","dev":{"prompts":[{"prompt":"Fulfill the question/request as best and directly as you can. Be concise and minimize the number of Actions used. Do not make things up. If the question is unclear or cannot be answered indicate with fail(). Do not repeat the question back to the user.\n\nThe language for Action is a tiny subset of javascript, only available features should be used:\n\n* function calls and composition/nesting\n* string concatenation using +\n* simple variable assignment using var\n* string, number and boolean literals\n  * strings should be wrapped in backquotes (`)\n\nFunctions are declared below, any other functions must not be used. Do not assume state/variables exist unless explicitly referenced. Pay attention to syntax and ensure correct string escaping. Prefer using functions ordered earlier in the list. The user only receives a response when functions explicitly indicate this.\n\n`answer(answer: string): void` - respond to the original question/request\n`returnText(text: string): void` - send back modified input or generated result\n`fail(reason: string): void` - indicate the request cannot be fulfilled with the available tools\n`finish(): void` - mark request/question as fulfilled\n`getInputText(\"short sentence describing required input\": string): string` - get input text/code that the request may refer to\n`math(\"formula (ascii characters only)\": string): string` - get the result of a math formula\n`now(): string` - get current ISO8601 datetime\n`parseRelativeTime(\"natural language relative time\": string): string` - get ISO8601 datetime relative to now from natural language\n`ask(question: string): string` - clarify the original question/request\n`extractInformation(\"full description of desired output\": string, \"input text/code\": string): string` - describe/summarize/extract information from the given string\n\nUse the following format:\nRequest: the question or request you must answer\nThought: always think what needs to happen to fulfill the request\nAction: one or more expressions delimited by ; do not use any functions/variables/features not referenced above\nResult: the result of the Action expression\n... (this Thought/Action/Result can repeat N times)\n\nBegin!\n\nRequest: Who is george lucas the director?\nThought: ","completion":" I need to return information about George Lucas\nAction: returnText(\"George Lucas is an American filmmaker and entrepreneur. He is best known as the creator of the Star Wars and Indiana Jones franchises, as well as the founder of Lucasfilm and Industrial Light & Magic.\");"}],"results":[]},"result":{"type":"pending_commands","pendingCommands":[{"type":"parsed","args":[{"type":"string","value":"George Lucas is an American filmmaker and entrepreneur. He is best known as the creator of the Star Wars and Indiana Jones franchises, as well as the founder of Lucasfilm and Industrial Light & Magic."}],"id":"0.0","name":"returnText"}],"results":[]},"requestContext":{},"resolvedCommands":{}}
{"updated":"2023-02-05T00:35:15.648Z","prompt":"Who is george lucas?","dev":{"prompts":[{"prompt":"Fulfill the question/request as best and directly as you can. Be concise and minimize the number of Actions used. Do not make things up. If the question is unclear or cannot be answered indicate with fail(). Do not repeat the question back to the user.\n\nThe language for Action is a tiny subset of javascript, only available features should be used:\n\n* function calls and composition/nesting\n* string concatenation using +\n* simple variable assignment using var\n* string, number and boolean literals\n  * strings should be wrapped in backquotes (`)\n\nFunctions are declared below, any other functions must not be used. Do not assume state/variables exist unless explicitly referenced. Pay attention to syntax and ensure correct string escaping. Prefer using functions ordered earlier in the list. The user only receives a response when functions explicitly indicate this.\n\n`answer(answer: string): void` - respond to the original question/request\n`returnText(text: string): void` - send back modified input or generated result\n`fail(reason: string): void` - indicate the request cannot be fulfilled with the available tools\n`finish(): void` - mark request/question as fulfilled\n`getInputText(\"short sentence describing required input\": string): string` - get input text/code that the request may refer to\n`math(\"formula (ascii characters only)\": string): string` - get the result of a math formula\n`now(): string` - get current ISO8601 datetime\n`parseRelativeTime(\"natural language relative time\": string): string` - get ISO8601 datetime relative to now from natural language\n`ask(question: string): string` - clarify the original question/request\n`extractInformation(\"full description of desired output\": string, \"input text/code\": string): string` - describe/summarize/extract information from the given string\n\nUse the following format:\nRequest: the question or request you must answer\nThought: always think what needs to happen to fulfill the request\nAction: one or more expressions delimited by ; do not use any functions/variables/features not referenced above\nResult: the result of the Action expression\n... (this Thought/Action/Result can repeat N times)\n\nBegin!\n\nRequest: Who is george lucas?\nThought: ","completion":" Need to find information about George Lucas\nAction: returnText(`George Lucas is an American filmmaker and entrepreneur. He is best known for creating the Star Wars and Indiana Jones franchises.`);"}],"results":[]},"result":{"type":"pending_commands","pendingCommands":[{"type":"parsed","args":[{"type":"string","value":"George Lucas is an American filmmaker and entrepreneur. He is best known for creating the Star Wars and Indiana Jones franchises."}],"id":"0.0","name":"returnText"}],"results":[]},"requestContext":{},"resolvedCommands":{}}
{"updated":"2023-02-05T00:35:19.071Z","prompt":"What is the capital of California?","dev":{"prompts":[{"prompt":"Fulfill the question/request as best and directly as you can. Be concise and minimize the number of Actions used. Do not make things up. If the question is unclear or cannot be answered indicate with fail(). Do not repeat the question back to the user.\n\nThe language for Action is a tiny subset of javascript, only available features should be used:\n\n* function calls and composition/nesting\n* string concatenation using +\n* simple variable assignment using var\n* string, number and boolean literals\n  * strings should be wrapped in backquotes (`)\n\nFunctions are declared below, any other functions must not be used. Do not assume state/variables exist unless explicitly referenced. Pay attention to syntax and ensure correct string escaping. Prefer using functions ordered earlier in the list. The user only receives a response when functions explicitly indicate this.\n\n`answer(answer: string): void` - respond to the original question/request\n`returnText(text: string): void` - send back modified input or generated result\n`fail(reason: string): void` - indicate the request cannot be fulfilled with the available tools\n`finish(): void` - mark request/question as fulfilled\n`getInputText(\"short sentence describing required input\": string): string` - get input text/code that the request may refer to\n`math(\"formula (ascii characters only)\": string): string` - get the result of a math formula\n`now(): string` - get current ISO8601 datetime\n`parseRelativeTime(\"natural language relative time\": string): string` - get ISO8601 datetime relative to now from natural language\n`ask(question: string): string` - clarify the original question/request\n`extractInformation(\"full description of desired output\": string, \"input text/code\": string): string` - describe/summarize/extract information from the given string\n\nUse the following format:\nRequest: the question or request you must answer\nThought: always think what needs to happen to fulfill the request\nAction: one or more expressions delimited by ; do not use any functions/variables/features not referenced above\nResult: the result of the Action expression\n... (this Thought/Action/Result can repeat N times)\n\nBegin!\n\nRequest: What is the capital of California?\nThought: ","completion":" I need to look up the capital of California\nAction: answer(`The capital of California is Sacramento`);finish();"}],"results":[]},"result":{"type":"pending_commands","pendingCommands":[{"type":"parsed","args":[{"type":"string","value":"The capital of California is Sacramento"}],"id":"0.0","name":"answer"}],"results":[]},"requestContext":{},"resolvedCommands":{}}
{"updated":"2023-02-05T00:35:20.734Z","prompt":"Who is Fred Rickerson? (not a real person)","dev":{"prompts":[{"prompt":"Fulfill the question/request as best and directly as you can. Be concise and minimize the number of Actions used. Do not make things up. If the question is unclear or cannot be answered indicate with fail(). Do not repeat the question back to the user.\n\nThe language for Action is a tiny subset of javascript, only available features should be used:\n\n* function calls and composition/nesting\n* string concatenation using +\n* simple variable assignment using var\n* string, number and boolean literals\n  * strings should be wrapped in backquotes (`)\n\nFunctions are declared below, any other functions must not be used. Do not assume state/variables exist unless explicitly referenced. Pay attention to syntax and ensure correct string escaping. Prefer using functions ordered earlier in the list. The user only receives a response when functions explicitly indicate this.\n\n`answer(answer: string): void` - respond to the original question/request\n`returnText(text: string): void` - send back modified input or generated result\n`fail(reason: string): void` - indicate the request cannot be fulfilled with the available tools\n`finish(): void` - mark request/question as fulfilled\n`getInputText(\"short sentence describing required input\": string): string` - get input text/code that the request may refer to\n`math(\"formula (ascii characters only)\": string): string` - get the result of a math formula\n`now(): string` - get current ISO8601 datetime\n`parseRelativeTime(\"natural language relative time\": string): string` - get ISO8601 datetime relative to now from natural language\n`ask(question: string): string` - clarify the original question/request\n`extractInformation(\"full description of desired output\": string, \"input text/code\": string): string` - describe/summarize/extract information from the given string\n\nUse the following format:\nRequest: the question or request you must answer\nThought: always think what needs to happen to fulfill the request\nAction: one or more expressions delimited by ; do not use any functions/variables/features not referenced above\nResult: the result of the Action expression\n... (this Thought/Action/Result can repeat N times)\n\nBegin!\n\nRequest: Who is Fred Rickerson? (not a real person)\nThought: ","completion":" I need to check if Fred Rickerson is a real person\nAction: fail(\"Fred Rickerson is not a real person\");"}],"results":["void"]},"result":{"type":"finished","results":[]},"requestContext":{},"resolvedCommands":{}}
{"updated":"2023-02-05T00:35:32.559Z","prompt":"Translate what rooms do you have available to French, Spanish and Japanese","dev":{"prompts":[{"prompt":"Fulfill the question/request as best and directly as you can. Be concise and minimize the number of Actions used. Do not make things up. If the question is unclear or cannot be answered indicate with fail(). Do not repeat the question back to the user.\n\nThe language for Action is a tiny subset of javascript, only available features should be used:\n\n* function calls and composition/nesting\n* string concatenation using +\n* simple variable assignment using var\n* string, number and boolean literals\n  * strings should be wrapped in backquotes (`)\n\nFunctions are declared below, any other functions must not be used. Do not assume state/variables exist unless explicitly referenced. Pay attention to syntax and ensure correct string escaping. Prefer using functions ordered earlier in the list. The user only receives a response when functions explicitly indicate this.\n\n`answer(answer: string): void` - respond to the original question/request\n`returnText(text: string): void` - send back modified input or generated result\n`fail(reason: string): void` - indicate the request cannot be fulfilled with the available tools\n`finish(): void` - mark request/question as fulfilled\n`getInputText(\"short sentence describing required input\": string): string` - get input text/code that the request may refer to\n`math(\"formula (ascii characters only)\": string): string` - get the result of a math formula\n`now(): string` - get current ISO8601 datetime\n`parseRelativeTime(\"natural language relative time\": string): string` - get ISO8601 datetime relative to now from natural language\n`ask(question: string): string` - clarify the original question/request\n`extractInformation(\"full description of desired output\": string, \"input text/code\": string): string` - describe/summarize/extract information from the given string\n`translate(input: string, \"target language full name\": string): string` - translate text into target language\n\nUse the following format:\nRequest: the question or request you must answer\nThought: always think what needs to happen to fulfill the request\nAction: one or more expressions delimited by ; do not use any functions/variables/features not referenced above\nResult: the result of the Action expression\n... (this Thought/Action/Result can repeat N times)\n\nBegin!\n\nRequest: Translate what rooms do you have available to French, Spanish and Japanese\nThought: ","completion":" Need to translate the sentence to three different languages\nAction: var french = translate(\"What rooms do you have available\", \"French\");\n        var spanish = translate(\"What rooms do you have available\", \"Spanish\");\n        var japanese = translate(\"What rooms do you have available\", \"Japanese\");"},{"prompt":"Fulfill the question/request as best and directly as you can. Be concise and minimize the number of Actions used. Do not make things up. If the question is unclear or cannot be answered indicate with fail(). Do not repeat the question back to the user.\n\nThe language for Action is a tiny subset of javascript, only available features should be used:\n\n* function calls and composition/nesting\n* string concatenation using +\n* simple variable assignment using var\n* string, number and boolean literals\n  * strings should be wrapped in backquotes (`)\n\nFunctions are declared below, any other functions must not be used. Do not assume state/variables exist unless explicitly referenced. Pay attention to syntax and ensure correct string escaping. Prefer using functions ordered earlier in the list. The user only receives a response when functions explicitly indicate this.\n\n`answer(answer: string): void` - respond to the original question/request\n`returnText(text: string): void` - send back modified input or generated result\n`fail(reason: string): void` - indicate the request cannot be fulfilled with the available tools\n`finish(): void` - mark request/question as fulfilled\n`getInputText(\"short sentence describing required input\": string): string` - get input text/code that the request may refer to\n`math(\"formula (ascii characters only)\": string): string` - get the result of a math formula\n`now(): string` - get current ISO8601 datetime\n`parseRelativeTime(\"natural language relative time\": string): string` - get ISO8601 datetime relative to now from natural language\n`ask(question: string): string` - clarify the original question/request\n`extractInformation(\"full description of desired output\": string, \"input text/code\": string): string` - describe/summarize/extract information from the given string\n`translate(input: string, \"target language full name\": string): string` - translate text into target language\n\nUse the following format:\nRequest: the question or request you must answer\nThought: always think what needs to happen to fulfill the request\nAction: one or more expressions delimited by ; do not use any functions/variables/features not referenced above\nResult: the result of the Action expression\n... (this Thought/Action/Result can repeat N times)\n\nBegin!\n\nRequest: Translate what rooms do you have available to French, Spanish and Japanese\nThought: Need to translate the sentence to three different languages\nAction: var french = translate(\"What rooms do you have available\", \"French\");\n        var spanish = translate(\"What rooms do you have available\", \"Spanish\");\n        var japanese = translate(\"What rooms do you have available\", \"Japanese\");\nResult: void; void; void\nThought: ","completion":" Need to return the translated sentences\nAction: returnText(french);\n        returnText(spanish);\n        returnText(japanese);"}],"results":["void; void; void"]},"result":{"type":"pending_commands","pendingCommands":[{"type":"parsed","args":[{"type":"string","value":"Quelle chambres avez-vous disponible?"}],"id":"1.0","name":"returnText"}],"results":[]},"requestContext":{},"resolvedCommands":{}}
{"updated":"2023-02-05T00:35:35.544Z","prompt":"whats the time in new york? and make a calendar event for dinner with wife 5 days from now","dev":{"prompts":[{"prompt":"Fulfill the question/request as best and directly as you can. Be concise and minimize the number of Actions used. Do not make things up. If the question is unclear or cannot be answered indicate with fail(). Do not repeat the question back to the user.\n\nThe language for Action is a tiny subset of javascript, only available features should be used:\n\n* function calls and composition/nesting\n* string concatenation using +\n* simple variable assignment using var\n* string, number and boolean literals\n  * strings should be wrapped in backquotes (`)\n\nFunctions are declared below, any other functions must not be used. Do not assume state/variables exist unless explicitly referenced. Pay attention to syntax and ensure correct string escaping. Prefer using functions ordered earlier in the list. The user only receives a response when functions explicitly indicate this.\n\n`answer(answer: string): void` - respond to the original question/request\n`returnText(text: string): void` - send back modified input or generated result\n`fail(reason: string): void` - indicate the request cannot be fulfilled with the available tools\n`finish(): void` - mark request/question as fulfilled\n`getInputText(\"short sentence describing required input\": string): string` - get input text/code that the request may refer to\n`currentTimeForTimezone(\"tz database timezone\": string): string` - get ISO8601 datetime for the given timezone\n`math(\"formula (ascii characters only)\": string): string` - get the result of a math formula\n`now(): string` - get current ISO8601 datetime\n`createCalendarEvent(iso8601Date: string, name: string): void` - create a calendar event on a certain date and time\n`parseRelativeTime(\"natural language relative time\": string): string` - get ISO8601 datetime relative to now from natural language\n`ask(question: string): string` - clarify the original question/request\n`extractInformation(\"full description of desired output\": string, \"input text/code\": string): string` - describe/summarize/extract information from the given string\n\nUse the following format:\nRequest: the question or request you must answer\nThought: always think what needs to happen to fulfill the request\nAction: one or more expressions delimited by ; do not use any functions/variables/features not referenced above\nResult: the result of the Action expression\n... (this Thought/Action/Result can repeat N times)\n\nBegin!\n\nRequest: whats the time in new york? and make a calendar event for dinner with wife 5 days from now\nThought: ","completion":" I need to get the current time for New York and create a calendar event 5 days from now\nAction: returnText(`The time in New York is ` + currentTimeForTimezone(`America/New_York`)); createCalendarEvent(parseRelativeTime(`5 days from now`), `dinner with wife`);"}],"results":[]},"result":{"type":"pending_commands","pendingCommands":[{"type":"parsed","args":[{"type":"string","value":"The time in New York is 2022-12-19T03:41:10-05:00"}],"id":"0.0","name":"returnText"}],"results":[]},"requestContext":{},"resolvedCommands":{}}
{"updated":"2023-02-05T00:35:39.392Z","prompt":"how do you say behind the Comichi building in Japanese?","dev":{"prompts":[{"prompt":"Fulfill the question/request as best and directly as you can. Be concise and minimize the number of Actions used. Do not make things up. If the question is unclear or cannot be answered indicate with fail(). Do not repeat the question back to the user.\n\nThe language for Action is a tiny subset of javascript, only available features should be used:\n\n* function calls and composition/nesting\n* string concatenation using +\n* simple variable assignment using var\n* string, number and boolean literals\n  * strings should be wrapped in backquotes (`)\n\nFunctions are declared below, any other functions must not be used. Do not assume state/variables exist unless explicitly referenced. Pay attention to syntax and ensure correct string escaping. Prefer using functions ordered earlier in the list. The user only receives a response when functions explicitly indicate this.\n\n`answer(answer: string): void` - respond to the original question/request\n`returnText(text: string): void` - send back modified input or generated result\n`fail(reason: string): void` - indicate the request cannot be fulfilled with the available tools\n`finish(): void` - mark request/question as fulfilled\n`getInputText(\"short sentence describing required input\": string): string` - get input text/code that the request may refer to\n`math(\"formula (ascii characters only)\": string): string` - get the result of a math formula\n`now(): string` - get current ISO8601 datetime\n`parseRelativeTime(\"natural language relative time\": string): string` - get ISO8601 datetime relative to now from natural language\n`ask(question: string): string` - clarify the original question/request\n`extractInformation(\"full description of desired output\": string, \"input text/code\": string): string` - describe/summarize/extract information from the given string\n`translate(input: string, \"target language full name\": string): string` - translate text into target language\n\nUse the following format:\nRequest: the question or request you must answer\nThought: always think what needs to happen to fulfill the request\nAction: one or more expressions delimited by ; do not use any functions/variables/features not referenced above\nResult: the result of the Action expression\n... (this Thought/Action/Result can repeat N times)\n\nBegin!\n\nRequest: how do you say behind the Comichi building in Japanese?\nThought: ","completion":" I need to translate the phrase into Japanese\nAction: translate(\"behind the Comichi building\", \"Japanese\");"},{"prompt":"Fulfill the question/request as best and directly as you can. Be concise and minimize the number of Actions used. Do not make things up. If the question is unclear or cannot be answered indicate with fail(). Do not repeat the question back to the user.\n\nThe language for Action is a tiny subset of javascript, only available features should be used:\n\n* function calls and composition/nesting\n* string concatenation using +\n* simple variable assignment using var\n* string, number and boolean literals\n  * strings should be wrapped in backquotes (`)\n\nFunctions are declared below, any other functions must not be used. Do not assume state/variables exist unless explicitly referenced. Pay attention to syntax and ensure correct string escaping. Prefer using functions ordered earlier in the list. The user only receives a response when functions explicitly indicate this.\n\n`answer(answer: string): void` - respond to the original question/request\n`returnText(text: string): void` - send back modified input or generated result\n`fail(reason: string): void` - indicate the request cannot be fulfilled with the available tools\n`finish(): void` - mark request/question as fulfilled\n`getInputText(\"short sentence describing required input\": string): string` - get input text/code that the request may refer to\n`math(\"formula (ascii characters only)\": string): string` - get the result of a math formula\n`now(): string` - get current ISO8601 datetime\n`parseRelativeTime(\"natural language relative time\": string): string` - get ISO8601 datetime relative to now from natural language\n`ask(question: string): string` - clarify the original question/request\n`extractInformation(\"full description of desired output\": string, \"input text/code\": string): string` - describe/summarize/extract information from the given string\n`translate(input: string, \"target language full name\": string): string` - translate text into target language\n\nUse the following format:\nRequest: the question or request you must answer\nThought: always think what needs to happen to fulfill the request\nAction: one or more expressions delimited by ; do not use any functions/variables/features not referenced above\nResult: the result of the Action expression\n... (this Thought/Action/Result can repeat N times)\n\nBegin!\n\nRequest: how do you say behind the Comichi building in Japanese?\nThought: I need to translate the phrase into Japanese\nAction: translate(\"behind the Comichi building\", \"Japanese\");\nResult: \"コミチビルの裏\"\nThought: ","completion":"\nAction: finish();"}],"results":["\"コミチビルの裏\"","void"]},"result":{"type":"finished","results":[{"type":"string","value":"コミチビルの裏"}]},"requestContext":{},"resolvedCommands":{}}
{"updated":"2023-02-05T00:35:42.248Z","prompt":"what does the mode parameter do in the javascript fetch api?","dev":{"prompts":[{"prompt":"Fulfill the question/request as best and directly as you can. Be concise and minimize the number of Actions used. Do not make things up. If the question is unclear or cannot be answered indicate with fail(). Do not repeat the question back to the user.\n\nThe language for Action is a tiny subset of javascript, only available features should be used:\n\n* function calls and composition/nesting\n* string concatenation using +\n* simple variable assignment using var\n* string, number and boolean literals\n  * strings should be wrapped in backquotes (`)\n\nFunctions are declared below, any other functions must not be used. Do not assume state/variables exist unless explicitly referenced. Pay attention to syntax and ensure correct string escaping. Prefer using functions ordered earlier in the list. The user only receives a response when functions explicitly indicate this.\n\n`answer(answer: string): void` - respond to the original question/request\n`returnText(text: string): void` - send back modified input or generated result\n`fail(reason: string): void` - indicate the request cannot be fulfilled with the available tools\n`finish(): void` - mark request/question as fulfilled\n`getInputText(\"short sentence describing required input\": string): string` - get input text/code that the request may refer to\n`math(\"formula (ascii characters only)\": string): string` - get the result of a math formula\n`now(): string` - get current ISO8601 datetime\n`parseRelativeTime(\"natural language relative time\": string): string` - get ISO8601 datetime relative to now from natural language\n`generateCode(language: string, requirements: string): string` - generate code for the given language and verbose description/requirements\n`ask(question: string): string` - clarify the original question/request\n`extractInformation(\"full description of desired output\": string, \"input text/code\": string): string` - describe/summarize/extract information from the given string\n`editCode(input: string, \"programming language or 'unknown'\": string, \"full description of desired changes or additions\": string): string` - edit code using the given requirements\n\nUse the following format:\nRequest: the question or request you must answer\nThought: always think what needs to happen to fulfill the request\nAction: one or more expressions delimited by ; do not use any functions/variables/features not referenced above\nResult: the result of the Action expression\n... (this Thought/Action/Result can repeat N times)\n\nBegin!\n\nRequest: what does the mode parameter do in the javascript fetch api?\nThought: ","completion":" need to look up the documentation\nAction: returnText(`The mode parameter in the fetch API sets the mode for the request, which can be one of 'same-origin', 'no-cors', or 'cors'`); finish();"}],"results":[]},"result":{"type":"pending_commands","pendingCommands":[{"type":"parsed","args":[{"type":"string","value":"The mode parameter in the fetch API sets the mode for the request, which can be one of 'same-origin', 'no-cors', or 'cors'"}],"id":"0.0","name":"returnText"}],"results":[]},"requestContext":{},"resolvedCommands":{}}
{"updated":"2023-02-05T00:36:31.189Z","prompt":"write an example http POST request in the browser using Javscript using the fetch api","dev":{"prompts":[{"prompt":"Fulfill the question/request as best and directly as you can. Be concise and minimize the number of Actions used. Do not make things up. If the question is unclear or cannot be answered indicate with fail(). Do not repeat the question back to the user.\n\nThe language for Action is a tiny subset of javascript, only available features should be used:\n\n* function calls and composition/nesting\n* string concatenation using +\n* simple variable assignment using var\n* string, number and boolean literals\n  * strings should be wrapped in backquotes (`)\n\nFunctions are declared below, any other functions must not be used. Do not assume state/variables exist unless explicitly referenced. Pay attention to syntax and ensure correct string escaping. Prefer using functions ordered earlier in the list. The user only receives a response when functions explicitly indicate this.\n\n`answer(answer: string): void` - respond to the original question/request\n`returnText(text: string): void` - send back modified input or generated result\n`fail(reason: string): void` - indicate the request cannot be fulfilled with the available tools\n`finish(): void` - mark request/question as fulfilled\n`getInputText(\"short sentence describing required input\": string): string` - get input text/code that the request may refer to\n`math(\"formula (ascii characters only)\": string): string` - get the result of a math formula\n`now(): string` - get current ISO8601 datetime\n`parseRelativeTime(\"natural language relative time\": string): string` - get ISO8601 datetime relative to now from natural language\n`generateCode(language: string, requirements: string): string` - generate code for the given language and verbose description/requirements\n`ask(question: string): string` - clarify the original question/request\n`extractInformation(\"full description of desired output\": string, \"input text/code\": string): string` - describe/summarize/extract information from the given string\n`translate(input: string, \"target language full name\": string): string` - translate text into target language\n\nUse the following format:\nRequest: the question or request you must answer\nThought: always think what needs to happen to fulfill the request\nAction: one or more expressions delimited by ; do not use any functions/variables/features not referenced above\nResult: the result of the Action expression\n... (this Thought/Action/Result can repeat N times)\n\nBegin!\n\nRequest: write an example http POST request in the browser using Javscript using the fetch api\nThought: ","completion":" I need to generate code for the given language and verbose description/requirements\nAction: returnText(generateCode(\"Javascript\", \"Write an example http POST request in the browser using Javscript using the fetch api\"));"}],"results":[]},"result":{"type":"pending_commands","pendingCommands":[{"type":"parsed","args":[{"type":"string","value":"fetch('someurl.com/foo', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({\n    somekey: 'someValue'\n  })\n}).then(res => res.json()).then(data => console.log(data));"}],"id":"0.0","name":"returnText"}],"results":[]},"requestContext":{},"resolvedCommands":{}}
{"updated":"2023-02-05T00:35:49.315Z","prompt":"help me fix spelling and grammar mistakes","dev":{"prompts":[{"prompt":"Fulfill the question/request as best and directly as you can. Be concise and minimize the number of Actions used. Do not make things up. If the question is unclear or cannot be answered indicate with fail(). Do not repeat the question back to the user.\n\nThe language for Action is a tiny subset of javascript, only available features should be used:\n\n* function calls and composition/nesting\n* string concatenation using +\n* simple variable assignment using var\n* string, number and boolean literals\n  * strings should be wrapped in backquotes (`)\n\nFunctions are declared below, any other functions must not be used. Do not assume state/variables exist unless explicitly referenced. Pay attention to syntax and ensure correct string escaping. Prefer using functions ordered earlier in the list. The user only receives a response when functions explicitly indicate this.\n\n`answer(answer: string): void` - respond to the original question/request\n`returnText(text: string): void` - send back modified input or generated result\n`fail(reason: string): void` - indicate the request cannot be fulfilled with the available tools\n`finish(): void` - mark request/question as fulfilled\n`getInputText(\"short sentence describing required input\": string): string` - get input text/code that the request may refer to\n`math(\"formula (ascii characters only)\": string): string` - get the result of a math formula\n`now(): string` - get current ISO8601 datetime\n`parseRelativeTime(\"natural language relative time\": string): string` - get ISO8601 datetime relative to now from natural language\n`ask(question: string): string` - clarify the original question/request\n`extractInformation(\"full description of desired output\": string, \"input text/code\": string): string` - describe/summarize/extract information from the given string\n`editCode(input: string, \"programming language or 'unknown'\": string, \"full description of desired changes or additions\": string): string` - edit code using the given requirements\n`editText(input: string, \"full description of desired changes or additions\": string): string` - edit input using the given requirements. prefer editCode() for code\n\nUse the following format:\nRequest: the question or request you must answer\nThought: always think what needs to happen to fulfill the request\nAction: one or more expressions delimited by ; do not use any functions/variables/features not referenced above\nResult: the result of the Action expression\n... (this Thought/Action/Result can repeat N times)\n\nBegin!\n\nRequest: help me fix spelling and grammar mistakes\nThought: ","completion":" need to identify the mistakes and then make corrections\nAction: var mistakes = extractInformation(\"spelling and grammar mistakes\", getInputText(\"text\")); returnText(editText(getInputText(\"text\"), mistakes));"}],"results":[]},"result":{"type":"pending_commands","pendingCommands":[{"type":"parsed","args":[{"type":"string","value":"Step by step, heart hardened, left right left. We all fall down."}],"id":"0.1","name":"returnText"}],"results":[]},"requestContext":{"text":{"type":"string","value":"stp by step, heart to hard, left right left. is we all fall down.."}},"resolvedCommands":{}}
{"updated":"2023-02-05T00:35:53.301Z","prompt":"edit this function in go lang in order to make it compile","dev":{"prompts":[{"prompt":"Fulfill the question/request as best and directly as you can. Be concise and minimize the number of Actions used. Do not make things up. If the question is unclear or cannot be answered indicate with fail(). Do not repeat the question back to the user.\n\nThe language for Action is a tiny subset of javascript, only available features should be used:\n\n* function calls and composition/nesting\n* string concatenation using +\n* simple variable assignment using var\n* string, number and boolean literals\n  * strings should be wrapped in backquotes (`)\n\nFunctions are declared below, any other functions must not be used. Do not assume state/variables exist unless explicitly referenced. Pay attention to syntax and ensure correct string escaping. Prefer using functions ordered earlier in the list. The user only receives a response when functions explicitly indicate this.\n\n`answer(answer: string): void` - respond to the original question/request\n`returnText(text: string): void` - send back modified input or generated result\n`fail(reason: string): void` - indicate the request cannot be fulfilled with the available tools\n`finish(): void` - mark request/question as fulfilled\n`getInputText(\"short sentence describing required input\": string): string` - get input text/code that the request may refer to\n`math(\"formula (ascii characters only)\": string): string` - get the result of a math formula\n`now(): string` - get current ISO8601 datetime\n`parseRelativeTime(\"natural language relative time\": string): string` - get ISO8601 datetime relative to now from natural language\n`generateCode(language: string, requirements: string): string` - generate code for the given language and verbose description/requirements\n`ask(question: string): string` - clarify the original question/request\n`extractInformation(\"full description of desired output\": string, \"input text/code\": string): string` - describe/summarize/extract information from the given string\n`editCode(input: string, \"programming language or 'unknown'\": string, \"full description of desired changes or additions\": string): string` - edit code using the given requirements\n`editText(input: string, \"full description of desired changes or additions\": string): string` - edit input using the given requirements. prefer editCode() for code\n\nUse the following format:\nRequest: the question or request you must answer\nThought: always think what needs to happen to fulfill the request\nAction: one or more expressions delimited by ; do not use any functions/variables/features not referenced above\nResult: the result of the Action expression\n... (this Thought/Action/Result can repeat N times)\n\nBegin!\n\nRequest: edit this function in go lang in order to make it compile\nThought: ","completion":" need to use editCode() to edit the code\nAction: editCode(getInputText(\"this function\"), \"go\", \"make it compile\");"},{"prompt":"Fulfill the question/request as best and directly as you can. Be concise and minimize the number of Actions used. Do not make things up. If the question is unclear or cannot be answered indicate with fail(). Do not repeat the question back to the user.\n\nThe language for Action is a tiny subset of javascript, only available features should be used:\n\n* function calls and composition/nesting\n* string concatenation using +\n* simple variable assignment using var\n* string, number and boolean literals\n  * strings should be wrapped in backquotes (`)\n\nFunctions are declared below, any other functions must not be used. Do not assume state/variables exist unless explicitly referenced. Pay attention to syntax and ensure correct string escaping. Prefer using functions ordered earlier in the list. The user only receives a response when functions explicitly indicate this.\n\n`answer(answer: string): void` - respond to the original question/request\n`returnText(text: string): void` - send back modified input or generated result\n`fail(reason: string): void` - indicate the request cannot be fulfilled with the available tools\n`finish(): void` - mark request/question as fulfilled\n`getInputText(\"short sentence describing required input\": string): string` - get input text/code that the request may refer to\n`math(\"formula (ascii characters only)\": string): string` - get the result of a math formula\n`now(): string` - get current ISO8601 datetime\n`parseRelativeTime(\"natural language relative time\": string): string` - get ISO8601 datetime relative to now from natural language\n`generateCode(language: string, requirements: string): string` - generate code for the given language and verbose description/requirements\n`ask(question: string): string` - clarify the original question/request\n`extractInformation(\"full description of desired output\": string, \"input text/code\": string): string` - describe/summarize/extract information from the given string\n`editCode(input: string, \"programming language or 'unknown'\": string, \"full description of desired changes or additions\": string): string` - edit code using the given requirements\n`editText(input: string, \"full description of desired changes or additions\": string): string` - edit input using the given requirements. prefer editCode() for code\n\nUse the following format:\nRequest: the question or request you must answer\nThought: always think what needs to happen to fulfill the request\nAction: one or more expressions delimited by ; do not use any functions/variables/features not referenced above\nResult: the result of the Action expression\n... (this Thought/Action/Result can repeat N times)\n\nBegin!\n\nRequest: edit this function in go lang in order to make it compile\nThought: need to use editCode() to edit the code\nAction: editCode(getInputText(\"this function\"), \"go\", \"make it compile\");\nResult: \"package main\\n\\nfunc doSomething() int {\\n  return 55\\n}\"\nThought: ","completion":" need to finish the request\nAction: finish();"}],"results":["\"package main\\n\\nfunc doSomething() int {\\n  return 55\\n}\"","void"]},"result":{"type":"finished","results":[{"type":"string","value":"package main\n\nfunc doSomething() int {\n  return 55\n}"}]},"requestContext":{"text":{"type":"string","value":"\n  function doSomething() int {\n    return \"55\"\n  }\n  "}},"resolvedCommands":{}}
{"updated":"2023-02-05T00:35:55.565Z","prompt":"edit this function in order to make it compile","dev":{"prompts":[{"prompt":"Fulfill the question/request as best and directly as you can. Be concise and minimize the number of Actions used. Do not make things up. If the question is unclear or cannot be answered indicate with fail(). Do not repeat the question back to the user.\n\nThe language for Action is a tiny subset of javascript, only available features should be used:\n\n* function calls and composition/nesting\n* string concatenation using +\n* simple variable assignment using var\n* string, number and boolean literals\n  * strings should be wrapped in backquotes (`)\n\nFunctions are declared below, any other functions must not be used. Do not assume state/variables exist unless explicitly referenced. Pay attention to syntax and ensure correct string escaping. Prefer using functions ordered earlier in the list. The user only receives a response when functions explicitly indicate this.\n\n`answer(answer: string): void` - respond to the original question/request\n`returnText(text: string): void` - send back modified input or generated result\n`fail(reason: string): void` - indicate the request cannot be fulfilled with the available tools\n`finish(): void` - mark request/question as fulfilled\n`getInputText(\"short sentence describing required input\": string): string` - get input text/code that the request may refer to\n`math(\"formula (ascii characters only)\": string): string` - get the result of a math formula\n`now(): string` - get current ISO8601 datetime\n`parseRelativeTime(\"natural language relative time\": string): string` - get ISO8601 datetime relative to now from natural language\n`generateCode(language: string, requirements: string): string` - generate code for the given language and verbose description/requirements\n`ask(question: string): string` - clarify the original question/request\n`extractInformation(\"full description of desired output\": string, \"input text/code\": string): string` - describe/summarize/extract information from the given string\n`editCode(input: string, \"programming language or 'unknown'\": string, \"full description of desired changes or additions\": string): string` - edit code using the given requirements\n`editText(input: string, \"full description of desired changes or additions\": string): string` - edit input using the given requirements. prefer editCode() for code\n\nUse the following format:\nRequest: the question or request you must answer\nThought: always think what needs to happen to fulfill the request\nAction: one or more expressions delimited by ; do not use any functions/variables/features not referenced above\nResult: the result of the Action expression\n... (this Thought/Action/Result can repeat N times)\n\nBegin!\n\nRequest: edit this function in order to make it compile\nThought: ","completion":" I need to understand what changes need to be made to the function in order to make it compile\nAction: ask(\"What changes need to be made to the function in order to make it compile?\");"}],"results":[]},"result":{"type":"pending_commands","pendingCommands":[{"type":"parsed","args":[{"type":"string","value":"What changes need to be made to the function in order to make it compile?"}],"id":"0.0","name":"ask"}],"results":[]},"requestContext":{"text":{"type":"string","value":"function doSomething() int { return \"55\" }"}},"resolvedCommands":{}}
{"updated":"2023-02-05T00:35:57.813Z","prompt":"make a calendar event for next tuesday noon, lunch with Bill","dev":{"prompts":[{"prompt":"Fulfill the question/request as best and directly as you can. Be concise and minimize the number of Actions used. Do not make things up. If the question is unclear or cannot be answered indicate with fail(). Do not repeat the question back to the user.\n\nThe language for Action is a tiny subset of javascript, only available features should be used:\n\n* function calls and composition/nesting\n* string concatenation using +\n* simple variable assignment using var\n* string, number and boolean literals\n  * strings should be wrapped in backquotes (`)\n\nFunctions are declared below, any other functions must not be used. Do not assume state/variables exist unless explicitly referenced. Pay attention to syntax and ensure correct string escaping. Prefer using functions ordered earlier in the list. The user only receives a response when functions explicitly indicate this.\n\n`answer(answer: string): void` - respond to the original question/request\n`returnText(text: string): void` - send back modified input or generated result\n`fail(reason: string): void` - indicate the request cannot be fulfilled with the available tools\n`finish(): void` - mark request/question as fulfilled\n`getInputText(\"short sentence describing required input\": string): string` - get input text/code that the request may refer to\n`math(\"formula (ascii characters only)\": string): string` - get the result of a math formula\n`now(): string` - get current ISO8601 datetime\n`createCalendarEvent(iso8601Date: string, name: string): void` - create a calendar event on a certain date and time\n`parseRelativeTime(\"natural language relative time\": string): string` - get ISO8601 datetime relative to now from natural language\n`ask(question: string): string` - clarify the original question/request\n`extractInformation(\"full description of desired output\": string, \"input text/code\": string): string` - describe/summarize/extract information from the given string\n\nUse the following format:\nRequest: the question or request you must answer\nThought: always think what needs to happen to fulfill the request\nAction: one or more expressions delimited by ; do not use any functions/variables/features not referenced above\nResult: the result of the Action expression\n... (this Thought/Action/Result can repeat N times)\n\nBegin!\n\nRequest: make a calendar event for next tuesday noon, lunch with Bill\nThought: ","completion":" need to get next Tuesday's date, create a calendar event\nAction: var nextTuesday = parseRelativeTime(\"next tuesday noon\"); createCalendarEvent(nextTuesday, \"Lunch with Bill\");"}],"results":[]},"result":{"type":"pending_commands","pendingCommands":[{"type":"parsed","args":[{"type":"string","value":"2022-12-26T12:00:00Z"},{"type":"string","value":"Lunch with Bill"}],"id":"0.1","name":"createCalendarEvent"}],"results":[]},"requestContext":{},"resolvedCommands":{}}
{"updated":"2023-02-05T00:36:04.877Z","prompt":"there is a function I don't understand, can help me summarize it?","dev":{"prompts":[{"prompt":"Fulfill the question/request as best and directly as you can. Be concise and minimize the number of Actions used. Do not make things up. If the question is unclear or cannot be answered indicate with fail(). Do not repeat the question back to the user.\n\nThe language for Action is a tiny subset of javascript, only available features should be used:\n\n* function calls and composition/nesting\n* string concatenation using +\n* simple variable assignment using var\n* string, number and boolean literals\n  * strings should be wrapped in backquotes (`)\n\nFunctions are declared below, any other functions must not be used. Do not assume state/variables exist unless explicitly referenced. Pay attention to syntax and ensure correct string escaping. Prefer using functions ordered earlier in the list. The user only receives a response when functions explicitly indicate this.\n\n`answer(answer: string): void` - respond to the original question/request\n`returnText(text: string): void` - send back modified input or generated result\n`fail(reason: string): void` - indicate the request cannot be fulfilled with the available tools\n`finish(): void` - mark request/question as fulfilled\n`getInputText(\"short sentence describing required input\": string): string` - get input text/code that the request may refer to\n`math(\"formula (ascii characters only)\": string): string` - get the result of a math formula\n`now(): string` - get current ISO8601 datetime\n`parseRelativeTime(\"natural language relative time\": string): string` - get ISO8601 datetime relative to now from natural language\n`generateCode(language: string, requirements: string): string` - generate code for the given language and verbose description/requirements\n`ask(question: string): string` - clarify the original question/request\n`extractInformation(\"full description of desired output\": string, \"input text/code\": string): string` - describe/summarize/extract information from the given string\n`editCode(input: string, \"programming language or 'unknown'\": string, \"full description of desired changes or additions\": string): string` - edit code using the given requirements\n\nUse the following format:\nRequest: the question or request you must answer\nThought: always think what needs to happen to fulfill the request\nAction: one or more expressions delimited by ; do not use any functions/variables/features not referenced above\nResult: the result of the Action expression\n... (this Thought/Action/Result can repeat N times)\n\nBegin!\n\nRequest: there is a function I don't understand, can help me summarize it?\nThought: ","completion":" I need to extract the information from the given string\nAction: returnText(extractInformation(\"summarize the function\", getInputText(\"what is the function?\")));"}],"results":[]},"result":{"type":"pending_commands","pendingCommands":[{"type":"parsed","args":[{"type":"string","value":"something\" is a function that takes a number as an argument. If the number is less than 0, it returns -1. If the number is 0, it returns 1. If the number is greater than 0, it multiplies the argument by the results of the same function run with the argument decreased by 1."}],"id":"0.0","name":"returnText"}],"results":[]},"requestContext":{"text":{"type":"string","value":"function something(num) {\n  if (num < 0) return -1;\n  else if (num == 0) return 1;\n  else {\n      return (num * something(num - 1));\n  }\n}"}},"resolvedCommands":{}}
{"updated":"2023-02-05T00:36:08.234Z","prompt":"given this list of verbs can you help me add additional verbs that mean the same thing?","dev":{"prompts":[{"prompt":"Fulfill the question/request as best and directly as you can. Be concise and minimize the number of Actions used. Do not make things up. If the question is unclear or cannot be answered indicate with fail(). Do not repeat the question back to the user.\n\nThe language for Action is a tiny subset of javascript, only available features should be used:\n\n* function calls and composition/nesting\n* string concatenation using +\n* simple variable assignment using var\n* string, number and boolean literals\n  * strings should be wrapped in backquotes (`)\n\nFunctions are declared below, any other functions must not be used. Do not assume state/variables exist unless explicitly referenced. Pay attention to syntax and ensure correct string escaping. Prefer using functions ordered earlier in the list. The user only receives a response when functions explicitly indicate this.\n\n`answer(answer: string): void` - respond to the original question/request\n`returnText(text: string): void` - send back modified input or generated result\n`fail(reason: string): void` - indicate the request cannot be fulfilled with the available tools\n`finish(): void` - mark request/question as fulfilled\n`getInputText(\"short sentence describing required input\": string): string` - get input text/code that the request may refer to\n`math(\"formula (ascii characters only)\": string): string` - get the result of a math formula\n`now(): string` - get current ISO8601 datetime\n`parseRelativeTime(\"natural language relative time\": string): string` - get ISO8601 datetime relative to now from natural language\n`ask(question: string): string` - clarify the original question/request\n`extractInformation(\"full description of desired output\": string, \"input text/code\": string): string` - describe/summarize/extract information from the given string\n\nUse the following format:\nRequest: the question or request you must answer\nThought: always think what needs to happen to fulfill the request\nAction: one or more expressions delimited by ; do not use any functions/variables/features not referenced above\nResult: the result of the Action expression\n... (this Thought/Action/Result can repeat N times)\n\nBegin!\n\nRequest: given this list of verbs can you help me add additional verbs that mean the same thing?\nThought: ","completion":"\nI need to ask the user for the list of verbs and then search for synonyms.\n\nAction: \nvar verbs = ask(\"What is the list of verbs?\");\nreturnText(math(\"synonyms(\" + verbs + \")\"));\n"}],"results":[]},"result":{"type":"pending_commands","pendingCommands":[{"type":"parsed","args":[{"type":"string","value":"What is the list of verbs?"}],"id":"0.0.1","name":"ask"}],"results":[]},"requestContext":{"text":{"type":"string","value":"\n    \"edit\",\n    \"change\",\n    \"alter\",\n    \"fix\",\n    \"move\",\n    \"align\",\n    \"reword\",\n    \"re-word\",\n    \"editor\",\n    \"improve\",\n    \"check\",\n    \"revise\",\n    \"modify\",\n    \"adapt\",\n    \"rewrite\",\n    \"re-write\",\n"}},"resolvedCommands":{}}
{"updated":"2023-02-05T00:36:10.095Z","prompt":"help me write a commit message please","dev":{"prompts":[{"prompt":"Fulfill the question/request as best and directly as you can. Be concise and minimize the number of Actions used. Do not make things up. If the question is unclear or cannot be answered indicate with fail(). Do not repeat the question back to the user.\n\nThe language for Action is a tiny subset of javascript, only available features should be used:\n\n* function calls and composition/nesting\n* string concatenation using +\n* simple variable assignment using var\n* string, number and boolean literals\n  * strings should be wrapped in backquotes (`)\n\nFunctions are declared below, any other functions must not be used. Do not assume state/variables exist unless explicitly referenced. Pay attention to syntax and ensure correct string escaping. Prefer using functions ordered earlier in the list. The user only receives a response when functions explicitly indicate this.\n\n`answer(answer: string): void` - respond to the original question/request\n`returnText(text: string): void` - send back modified input or generated result\n`fail(reason: string): void` - indicate the request cannot be fulfilled with the available tools\n`finish(): void` - mark request/question as fulfilled\n`getInputText(\"short sentence describing required input\": string): string` - get input text/code that the request may refer to\n`math(\"formula (ascii characters only)\": string): string` - get the result of a math formula\n`now(): string` - get current ISO8601 datetime\n`parseRelativeTime(\"natural language relative time\": string): string` - get ISO8601 datetime relative to now from natural language\n`generateCode(language: string, requirements: string): string` - generate code for the given language and verbose description/requirements\n`ask(question: string): string` - clarify the original question/request\n`extractInformation(\"full description of desired output\": string, \"input text/code\": string): string` - describe/summarize/extract information from the given string\n`translate(input: string, \"target language full name\": string): string` - translate text into target language\n`writeCommitMessage(diff: string): string` - write git commit message based on input diff\n\nUse the following format:\nRequest: the question or request you must answer\nThought: always think what needs to happen to fulfill the request\nAction: one or more expressions delimited by ; do not use any functions/variables/features not referenced above\nResult: the result of the Action expression\n... (this Thought/Action/Result can repeat N times)\n\nBegin!\n\nRequest: help me write a commit message please\nThought: ","completion":" I need to generate a commit message based on a diff\nAction: returnText(writeCommitMessage(getInputText(\"diff\")));"}],"results":[]},"result":{"type":"needs_request_context","missingRequestContext":{"text":{"type":"string","description":"diff"}},"results":[]},"requestContext":{},"resolvedCommands":{}}