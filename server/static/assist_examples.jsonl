{"updated":"2023-02-04T01:54:10.863Z","prompt":"hello","dev":{"prompts":[{"prompt":"Fulfill the question/request as best and directly as you can. Be concise and minimize the number of Actions used. Do not make things up. If the question is unclear or cannot be answered indicate with fail(). Do not repeat the question back to the user.\n\nThe language for Action is a tiny subset of javascript, only available features should be used:\n\n* function calls and composition/nesting\n* string concatenation using +\n* simple variable assignment using var\n* string, number and boolean literals\n  * strings should be wrapped in backquotes (`)\n\nFunctions are declared below, you must not use any other functions. Do not assume state/variables exist unless explicitly referenced. Pay attention to syntax and ensure correct string escaping. Prefer using functions ordered earlier in the list. The user only receives a response when certain functions that indicate this are used.\n\n`answer(answer: string): void` - respond to the original question/request\n`returnText(text: string): void` - send back modified input or generated result\n`fail(reason: string): void` - indicate the request cannot be fulfilled with the available tools\n`finish(): void` - mark request/question as fulfilled\n`getInputText(): string` - get input text/code that the request may refer to\n`math(formula: string): string` - get the result of a math formula\n`now(): string` - get current ISO8601 datetime\n`parseRelativeTime(\"natural language relative time\": string): string` - get ISO8601 datetime relative to now from natural language\n`ask(question: string): string` - clarify the original question/request\n`extractInformation(\"full description of desired output\": string, \"input text/code\": string): string` - describe/summarize/extract information from the given string\n\nUse the following format:\nRequest: the question or request you must answer\nThought: you should always think what would need to happen to fulfill the request\nAction: one or more expressions composing available functions delimited by ;\nResult: the result of the Action expression\n... (this Thought/Action/Result can repeat N times)\n\nBegin!\n\nRequest: hello\nThought: ","completion":" greet the user\nAction: answer(\"Hello there!\");"}],"results":[]},"result":{"type":"pending_commands","pendingCommands":[{"type":"parsed","args":[{"type":"string","value":"Hello there!"}],"id":"0.0","name":"answer"}],"results":[]},"requestContext":{},"resolvedCommands":{}}
{"updated":"2023-02-04T01:54:13.841Z","prompt":"What is pi squared?","dev":{"prompts":[{"prompt":"Fulfill the question/request as best and directly as you can. Be concise and minimize the number of Actions used. Do not make things up. If the question is unclear or cannot be answered indicate with fail(). Do not repeat the question back to the user.\n\nThe language for Action is a tiny subset of javascript, only available features should be used:\n\n* function calls and composition/nesting\n* string concatenation using +\n* simple variable assignment using var\n* string, number and boolean literals\n  * strings should be wrapped in backquotes (`)\n\nFunctions are declared below, you must not use any other functions. Do not assume state/variables exist unless explicitly referenced. Pay attention to syntax and ensure correct string escaping. Prefer using functions ordered earlier in the list. The user only receives a response when certain functions that indicate this are used.\n\n`answer(answer: string): void` - respond to the original question/request\n`returnText(text: string): void` - send back modified input or generated result\n`fail(reason: string): void` - indicate the request cannot be fulfilled with the available tools\n`finish(): void` - mark request/question as fulfilled\n`getInputText(): string` - get input text/code that the request may refer to\n`math(formula: string): string` - get the result of a math formula\n`now(): string` - get current ISO8601 datetime\n`parseRelativeTime(\"natural language relative time\": string): string` - get ISO8601 datetime relative to now from natural language\n`ask(question: string): string` - clarify the original question/request\n`extractInformation(\"full description of desired output\": string, \"input text/code\": string): string` - describe/summarize/extract information from the given string\n\nUse the following format:\nRequest: the question or request you must answer\nThought: you should always think what would need to happen to fulfill the request\nAction: one or more expressions composing available functions delimited by ;\nResult: the result of the Action expression\n... (this Thought/Action/Result can repeat N times)\n\nBegin!\n\nRequest: What is pi squared?\nThought: ","completion":" I need to calculate the value of pi squared\nAction: returnText(math(\"pi*pi\"));"}],"results":[]},"result":{"type":"pending_commands","pendingCommands":[{"type":"parsed","args":[{"type":"string","value":"9.869604401089358"}],"id":"0.0","name":"returnText"}],"results":[]},"requestContext":{},"resolvedCommands":{}}
{"updated":"2023-02-04T01:54:17.717Z","prompt":"What is the time in New York?","dev":{"prompts":[{"prompt":"Fulfill the question/request as best and directly as you can. Be concise and minimize the number of Actions used. Do not make things up. If the question is unclear or cannot be answered indicate with fail(). Do not repeat the question back to the user.\n\nThe language for Action is a tiny subset of javascript, only available features should be used:\n\n* function calls and composition/nesting\n* string concatenation using +\n* simple variable assignment using var\n* string, number and boolean literals\n  * strings should be wrapped in backquotes (`)\n\nFunctions are declared below, you must not use any other functions. Do not assume state/variables exist unless explicitly referenced. Pay attention to syntax and ensure correct string escaping. Prefer using functions ordered earlier in the list. The user only receives a response when certain functions that indicate this are used.\n\n`answer(answer: string): void` - respond to the original question/request\n`returnText(text: string): void` - send back modified input or generated result\n`fail(reason: string): void` - indicate the request cannot be fulfilled with the available tools\n`finish(): void` - mark request/question as fulfilled\n`getInputText(): string` - get input text/code that the request may refer to\n`currentTimeForTimezone(\"tz database timezone\": string): string` - get ISO8601 datetime for the given timezone\n`math(formula: string): string` - get the result of a math formula\n`now(): string` - get current ISO8601 datetime\n`parseRelativeTime(\"natural language relative time\": string): string` - get ISO8601 datetime relative to now from natural language\n`ask(question: string): string` - clarify the original question/request\n`extractInformation(\"full description of desired output\": string, \"input text/code\": string): string` - describe/summarize/extract information from the given string\n\nUse the following format:\nRequest: the question or request you must answer\nThought: you should always think what would need to happen to fulfill the request\nAction: one or more expressions composing available functions delimited by ;\nResult: the result of the Action expression\n... (this Thought/Action/Result can repeat N times)\n\nBegin!\n\nRequest: What is the time in New York?\nThought: ","completion":" I need to get the current time for the given timezone\nAction: returnText(currentTimeForTimezone(\"America/New_York\"));"}],"results":[]},"result":{"type":"pending_commands","pendingCommands":[{"type":"parsed","args":[{"type":"string","value":"2022-12-19T03:41:10-05:00"}],"id":"0.0","name":"returnText"}],"results":[]},"requestContext":{},"resolvedCommands":{}}
{"updated":"2023-02-04T01:54:23.675Z","prompt":"Say you are my best friend in Japanese.","dev":{"prompts":[{"prompt":"Fulfill the question/request as best and directly as you can. Be concise and minimize the number of Actions used. Do not make things up. If the question is unclear or cannot be answered indicate with fail(). Do not repeat the question back to the user.\n\nThe language for Action is a tiny subset of javascript, only available features should be used:\n\n* function calls and composition/nesting\n* string concatenation using +\n* simple variable assignment using var\n* string, number and boolean literals\n  * strings should be wrapped in backquotes (`)\n\nFunctions are declared below, you must not use any other functions. Do not assume state/variables exist unless explicitly referenced. Pay attention to syntax and ensure correct string escaping. Prefer using functions ordered earlier in the list. The user only receives a response when certain functions that indicate this are used.\n\n`answer(answer: string): void` - respond to the original question/request\n`returnText(text: string): void` - send back modified input or generated result\n`fail(reason: string): void` - indicate the request cannot be fulfilled with the available tools\n`finish(): void` - mark request/question as fulfilled\n`getInputText(): string` - get input text/code that the request may refer to\n`math(formula: string): string` - get the result of a math formula\n`now(): string` - get current ISO8601 datetime\n`parseRelativeTime(\"natural language relative time\": string): string` - get ISO8601 datetime relative to now from natural language\n`ask(question: string): string` - clarify the original question/request\n`extractInformation(\"full description of desired output\": string, \"input text/code\": string): string` - describe/summarize/extract information from the given string\n`translate(input: string, \"target language full name\": string): string` - translate text into target language\n\nUse the following format:\nRequest: the question or request you must answer\nThought: you should always think what would need to happen to fulfill the request\nAction: one or more expressions composing available functions delimited by ;\nResult: the result of the Action expression\n... (this Thought/Action/Result can repeat N times)\n\nBegin!\n\nRequest: Say you are my best friend in Japanese.\nThought: ","completion":" I need to translate the phrase \"you are my best friend\" into Japanese.\nAction: returnText(translate(\"you are my best friend\", \"Japanese\"));"}],"results":[]},"result":{"type":"pending_commands","pendingCommands":[{"type":"parsed","args":[{"type":"string","value":"あなたは私の最高の友達です。"}],"id":"0.0","name":"returnText"}],"results":[]},"requestContext":{},"resolvedCommands":{}}
{"updated":"2023-02-04T01:54:30.739Z","prompt":"Write you are my best friend in Japanese.","dev":{"prompts":[{"prompt":"Fulfill the question/request as best and directly as you can. Be concise and minimize the number of Actions used. Do not make things up. If the question is unclear or cannot be answered indicate with fail(). Do not repeat the question back to the user.\n\nThe language for Action is a tiny subset of javascript, only available features should be used:\n\n* function calls and composition/nesting\n* string concatenation using +\n* simple variable assignment using var\n* string, number and boolean literals\n  * strings should be wrapped in backquotes (`)\n\nFunctions are declared below, you must not use any other functions. Do not assume state/variables exist unless explicitly referenced. Pay attention to syntax and ensure correct string escaping. Prefer using functions ordered earlier in the list. The user only receives a response when certain functions that indicate this are used.\n\n`answer(answer: string): void` - respond to the original question/request\n`returnText(text: string): void` - send back modified input or generated result\n`fail(reason: string): void` - indicate the request cannot be fulfilled with the available tools\n`finish(): void` - mark request/question as fulfilled\n`getInputText(): string` - get input text/code that the request may refer to\n`math(formula: string): string` - get the result of a math formula\n`now(): string` - get current ISO8601 datetime\n`parseRelativeTime(\"natural language relative time\": string): string` - get ISO8601 datetime relative to now from natural language\n`generateCode(language: string, requirements: string): string` - generate code for the given language and verbose description/requirements\n`ask(question: string): string` - clarify the original question/request\n`extractInformation(\"full description of desired output\": string, \"input text/code\": string): string` - describe/summarize/extract information from the given string\n`translate(input: string, \"target language full name\": string): string` - translate text into target language\n\nUse the following format:\nRequest: the question or request you must answer\nThought: you should always think what would need to happen to fulfill the request\nAction: one or more expressions composing available functions delimited by ;\nResult: the result of the Action expression\n... (this Thought/Action/Result can repeat N times)\n\nBegin!\n\nRequest: Write you are my best friend in Japanese.\nThought: ","completion":" I need to translate the phrase into Japanese.\nAction: translate(\"you are my best friend\", \"Japanese\");"},{"prompt":"Fulfill the question/request as best and directly as you can. Be concise and minimize the number of Actions used. Do not make things up. If the question is unclear or cannot be answered indicate with fail(). Do not repeat the question back to the user.\n\nThe language for Action is a tiny subset of javascript, only available features should be used:\n\n* function calls and composition/nesting\n* string concatenation using +\n* simple variable assignment using var\n* string, number and boolean literals\n  * strings should be wrapped in backquotes (`)\n\nFunctions are declared below, you must not use any other functions. Do not assume state/variables exist unless explicitly referenced. Pay attention to syntax and ensure correct string escaping. Prefer using functions ordered earlier in the list. The user only receives a response when certain functions that indicate this are used.\n\n`answer(answer: string): void` - respond to the original question/request\n`returnText(text: string): void` - send back modified input or generated result\n`fail(reason: string): void` - indicate the request cannot be fulfilled with the available tools\n`finish(): void` - mark request/question as fulfilled\n`getInputText(): string` - get input text/code that the request may refer to\n`math(formula: string): string` - get the result of a math formula\n`now(): string` - get current ISO8601 datetime\n`parseRelativeTime(\"natural language relative time\": string): string` - get ISO8601 datetime relative to now from natural language\n`generateCode(language: string, requirements: string): string` - generate code for the given language and verbose description/requirements\n`ask(question: string): string` - clarify the original question/request\n`extractInformation(\"full description of desired output\": string, \"input text/code\": string): string` - describe/summarize/extract information from the given string\n`translate(input: string, \"target language full name\": string): string` - translate text into target language\n\nUse the following format:\nRequest: the question or request you must answer\nThought: you should always think what would need to happen to fulfill the request\nAction: one or more expressions composing available functions delimited by ;\nResult: the result of the Action expression\n... (this Thought/Action/Result can repeat N times)\n\nBegin!\n\nRequest: Write you are my best friend in Japanese.\nThought: I need to translate the phrase into Japanese.\nAction: translate(\"you are my best friend\", \"Japanese\");\nResult: \"あなたは私の最高の友達です。\"\nThought: ","completion":" I need to indicate the request is fulfilled.\nAction: answer(translate(\"you are my best friend\", \"Japanese\"));"}],"results":["\"あなたは私の最高の友達です。\""]},"result":{"type":"pending_commands","pendingCommands":[{"type":"parsed","args":[{"type":"string","value":"あなたは私の最高の友達です。"}],"id":"1.0","name":"answer"}],"results":[{"type":"string","value":"あなたは私の最高の友達です。"}]},"requestContext":{},"resolvedCommands":{}}
{"updated":"2023-02-04T01:54:33.195Z","prompt":"Who is george lucas the director?","dev":{"prompts":[{"prompt":"Fulfill the question/request as best and directly as you can. Be concise and minimize the number of Actions used. Do not make things up. If the question is unclear or cannot be answered indicate with fail(). Do not repeat the question back to the user.\n\nThe language for Action is a tiny subset of javascript, only available features should be used:\n\n* function calls and composition/nesting\n* string concatenation using +\n* simple variable assignment using var\n* string, number and boolean literals\n  * strings should be wrapped in backquotes (`)\n\nFunctions are declared below, you must not use any other functions. Do not assume state/variables exist unless explicitly referenced. Pay attention to syntax and ensure correct string escaping. Prefer using functions ordered earlier in the list. The user only receives a response when certain functions that indicate this are used.\n\n`answer(answer: string): void` - respond to the original question/request\n`returnText(text: string): void` - send back modified input or generated result\n`fail(reason: string): void` - indicate the request cannot be fulfilled with the available tools\n`finish(): void` - mark request/question as fulfilled\n`getInputText(): string` - get input text/code that the request may refer to\n`math(formula: string): string` - get the result of a math formula\n`now(): string` - get current ISO8601 datetime\n`parseRelativeTime(\"natural language relative time\": string): string` - get ISO8601 datetime relative to now from natural language\n`ask(question: string): string` - clarify the original question/request\n`extractInformation(\"full description of desired output\": string, \"input text/code\": string): string` - describe/summarize/extract information from the given string\n\nUse the following format:\nRequest: the question or request you must answer\nThought: you should always think what would need to happen to fulfill the request\nAction: one or more expressions composing available functions delimited by ;\nResult: the result of the Action expression\n... (this Thought/Action/Result can repeat N times)\n\nBegin!\n\nRequest: Who is george lucas the director?\nThought: ","completion":" I need to find information about George Lucas the director\nAction: returnText(\"George Lucas is an American filmmaker and entrepreneur known for directing the Star Wars and Indiana Jones franchises\");"}],"results":[]},"result":{"type":"pending_commands","pendingCommands":[{"type":"parsed","args":[{"type":"string","value":"George Lucas is an American filmmaker and entrepreneur known for directing the Star Wars and Indiana Jones franchises"}],"id":"0.0","name":"returnText"}],"results":[]},"requestContext":{},"resolvedCommands":{}}
{"updated":"2023-02-04T01:54:35.901Z","prompt":"Who is george lucas?","dev":{"prompts":[{"prompt":"Fulfill the question/request as best and directly as you can. Be concise and minimize the number of Actions used. Do not make things up. If the question is unclear or cannot be answered indicate with fail(). Do not repeat the question back to the user.\n\nThe language for Action is a tiny subset of javascript, only available features should be used:\n\n* function calls and composition/nesting\n* string concatenation using +\n* simple variable assignment using var\n* string, number and boolean literals\n  * strings should be wrapped in backquotes (`)\n\nFunctions are declared below, you must not use any other functions. Do not assume state/variables exist unless explicitly referenced. Pay attention to syntax and ensure correct string escaping. Prefer using functions ordered earlier in the list. The user only receives a response when certain functions that indicate this are used.\n\n`answer(answer: string): void` - respond to the original question/request\n`returnText(text: string): void` - send back modified input or generated result\n`fail(reason: string): void` - indicate the request cannot be fulfilled with the available tools\n`finish(): void` - mark request/question as fulfilled\n`getInputText(): string` - get input text/code that the request may refer to\n`math(formula: string): string` - get the result of a math formula\n`now(): string` - get current ISO8601 datetime\n`parseRelativeTime(\"natural language relative time\": string): string` - get ISO8601 datetime relative to now from natural language\n`ask(question: string): string` - clarify the original question/request\n`extractInformation(\"full description of desired output\": string, \"input text/code\": string): string` - describe/summarize/extract information from the given string\n\nUse the following format:\nRequest: the question or request you must answer\nThought: you should always think what would need to happen to fulfill the request\nAction: one or more expressions composing available functions delimited by ;\nResult: the result of the Action expression\n... (this Thought/Action/Result can repeat N times)\n\nBegin!\n\nRequest: Who is george lucas?\nThought: ","completion":" I need to look up information about George Lucas\nAction: returnText(`George Lucas is an American filmmaker and entrepreneur. He is best known for creating the Star Wars and Indiana Jones franchises.`); finish();"}],"results":[]},"result":{"type":"pending_commands","pendingCommands":[{"type":"parsed","args":[{"type":"string","value":"George Lucas is an American filmmaker and entrepreneur. He is best known for creating the Star Wars and Indiana Jones franchises."}],"id":"0.0","name":"returnText"}],"results":[]},"requestContext":{},"resolvedCommands":{}}
{"updated":"2023-02-04T01:54:37.599Z","prompt":"What is the capital of California?","dev":{"prompts":[{"prompt":"Fulfill the question/request as best and directly as you can. Be concise and minimize the number of Actions used. Do not make things up. If the question is unclear or cannot be answered indicate with fail(). Do not repeat the question back to the user.\n\nThe language for Action is a tiny subset of javascript, only available features should be used:\n\n* function calls and composition/nesting\n* string concatenation using +\n* simple variable assignment using var\n* string, number and boolean literals\n  * strings should be wrapped in backquotes (`)\n\nFunctions are declared below, you must not use any other functions. Do not assume state/variables exist unless explicitly referenced. Pay attention to syntax and ensure correct string escaping. Prefer using functions ordered earlier in the list. The user only receives a response when certain functions that indicate this are used.\n\n`answer(answer: string): void` - respond to the original question/request\n`returnText(text: string): void` - send back modified input or generated result\n`fail(reason: string): void` - indicate the request cannot be fulfilled with the available tools\n`finish(): void` - mark request/question as fulfilled\n`getInputText(): string` - get input text/code that the request may refer to\n`math(formula: string): string` - get the result of a math formula\n`now(): string` - get current ISO8601 datetime\n`parseRelativeTime(\"natural language relative time\": string): string` - get ISO8601 datetime relative to now from natural language\n`ask(question: string): string` - clarify the original question/request\n`extractInformation(\"full description of desired output\": string, \"input text/code\": string): string` - describe/summarize/extract information from the given string\n\nUse the following format:\nRequest: the question or request you must answer\nThought: you should always think what would need to happen to fulfill the request\nAction: one or more expressions composing available functions delimited by ;\nResult: the result of the Action expression\n... (this Thought/Action/Result can repeat N times)\n\nBegin!\n\nRequest: What is the capital of California?\nThought: ","completion":" I need to look up the capital of California\nAction: answer(`The capital of California is Sacramento.`); finish();"}],"results":[]},"result":{"type":"pending_commands","pendingCommands":[{"type":"parsed","args":[{"type":"string","value":"The capital of California is Sacramento."}],"id":"0.0","name":"answer"}],"results":[]},"requestContext":{},"resolvedCommands":{}}
{"updated":"2023-02-04T01:54:39.340Z","prompt":"Who is Fred Rickerson? (not a real person)","dev":{"prompts":[{"prompt":"Fulfill the question/request as best and directly as you can. Be concise and minimize the number of Actions used. Do not make things up. If the question is unclear or cannot be answered indicate with fail(). Do not repeat the question back to the user.\n\nThe language for Action is a tiny subset of javascript, only available features should be used:\n\n* function calls and composition/nesting\n* string concatenation using +\n* simple variable assignment using var\n* string, number and boolean literals\n  * strings should be wrapped in backquotes (`)\n\nFunctions are declared below, you must not use any other functions. Do not assume state/variables exist unless explicitly referenced. Pay attention to syntax and ensure correct string escaping. Prefer using functions ordered earlier in the list. The user only receives a response when certain functions that indicate this are used.\n\n`answer(answer: string): void` - respond to the original question/request\n`returnText(text: string): void` - send back modified input or generated result\n`fail(reason: string): void` - indicate the request cannot be fulfilled with the available tools\n`finish(): void` - mark request/question as fulfilled\n`getInputText(): string` - get input text/code that the request may refer to\n`math(formula: string): string` - get the result of a math formula\n`now(): string` - get current ISO8601 datetime\n`parseRelativeTime(\"natural language relative time\": string): string` - get ISO8601 datetime relative to now from natural language\n`ask(question: string): string` - clarify the original question/request\n`extractInformation(\"full description of desired output\": string, \"input text/code\": string): string` - describe/summarize/extract information from the given string\n\nUse the following format:\nRequest: the question or request you must answer\nThought: you should always think what would need to happen to fulfill the request\nAction: one or more expressions composing available functions delimited by ;\nResult: the result of the Action expression\n... (this Thought/Action/Result can repeat N times)\n\nBegin!\n\nRequest: Who is Fred Rickerson? (not a real person)\nThought: ","completion":" Need to indicate that the person does not exist\nAction: fail(\"Fred Rickerson does not exist\");"}],"results":["void"]},"result":{"type":"finished","results":[]},"requestContext":{},"resolvedCommands":{}}
{"updated":"2023-02-04T15:03:50.404Z","prompt":"Translate what rooms do you have available to French, Spanish and Japanese","dev":{"prompts":[{"prompt":"Fulfill the question/request as best and directly as you can. Be concise and minimize the number of Actions used. Do not make things up. If the question is unclear or cannot be answered indicate with fail(). Do not repeat the question back to the user.\n\nThe language for Action is a tiny subset of javascript, only available features should be used:\n\n* function calls and composition/nesting\n* string concatenation using +\n* simple variable assignment using var\n* string, number and boolean literals\n  * strings should be wrapped in backquotes (`)\n\nFunctions are declared below, you must not use any other functions. Do not assume state/variables exist unless explicitly referenced. Pay attention to syntax and ensure correct string escaping. Prefer using functions ordered earlier in the list. The user only receives a response when certain functions that indicate this are used.\n\n`answer(answer: string): void` - respond to the original question/request\n`returnText(text: string): void` - send back modified input or generated result\n`fail(reason: string): void` - indicate the request cannot be fulfilled with the available tools\n`finish(): void` - mark request/question as fulfilled\n`getInputText(\"required input description\": string): string` - get input text/code that the request may refer to\n`math(formula: string): string` - get the result of a math formula\n`now(): string` - get current ISO8601 datetime\n`parseRelativeTime(\"natural language relative time\": string): string` - get ISO8601 datetime relative to now from natural language\n`ask(question: string): string` - clarify the original question/request\n`extractInformation(\"full description of desired output\": string, \"input text/code\": string): string` - describe/summarize/extract information from the given string\n`translate(input: string, \"target language full name\": string): string` - translate text into target language\n\nUse the following format:\nRequest: the question or request you must answer\nThought: always think what needs to happen to fulfill the request\nAction: one or more expressions delimited by ; composing only available functions from above\nResult: the result of the Action expression\n... (this Thought/Action/Result can repeat N times)\n\nBegin!\n\nRequest: Translate what rooms do you have available to French, Spanish and Japanese\nThought: ","completion":" I need to translate the phrase \"What rooms do you have available\" into French, Spanish and Japanese\nAction: returnText(translate(\"What rooms do you have available\", \"French\") + \"; \" + translate(\"What rooms do you have available\", \"Spanish\") + \"; \" + translate(\"What rooms do you have available\", \"Japanese\")); "}],"results":[]},"result":{"type":"pending_commands","pendingCommands":[{"type":"parsed","args":[{"type":"string","value":"Quelle chambres avez-vous disponibles?; ¿Qué habitaciones tienes disponibles?; どの部屋が利用できますか？"}],"id":"0.0","name":"returnText"}],"results":[]},"requestContext":{},"resolvedCommands":{}}
{"updated":"2023-02-04T01:54:46.817Z","prompt":"whats the time in new york? and make a calendar event for dinner with wife 5 days from now","dev":{"prompts":[{"prompt":"Fulfill the question/request as best and directly as you can. Be concise and minimize the number of Actions used. Do not make things up. If the question is unclear or cannot be answered indicate with fail(). Do not repeat the question back to the user.\n\nThe language for Action is a tiny subset of javascript, only available features should be used:\n\n* function calls and composition/nesting\n* string concatenation using +\n* simple variable assignment using var\n* string, number and boolean literals\n  * strings should be wrapped in backquotes (`)\n\nFunctions are declared below, you must not use any other functions. Do not assume state/variables exist unless explicitly referenced. Pay attention to syntax and ensure correct string escaping. Prefer using functions ordered earlier in the list. The user only receives a response when certain functions that indicate this are used.\n\n`answer(answer: string): void` - respond to the original question/request\n`returnText(text: string): void` - send back modified input or generated result\n`fail(reason: string): void` - indicate the request cannot be fulfilled with the available tools\n`finish(): void` - mark request/question as fulfilled\n`getInputText(): string` - get input text/code that the request may refer to\n`currentTimeForTimezone(\"tz database timezone\": string): string` - get ISO8601 datetime for the given timezone\n`math(formula: string): string` - get the result of a math formula\n`now(): string` - get current ISO8601 datetime\n`createCalendarEvent(iso8601Date: string, name: string): void` - create a calendar event on a certain date and time\n`parseRelativeTime(\"natural language relative time\": string): string` - get ISO8601 datetime relative to now from natural language\n`ask(question: string): string` - clarify the original question/request\n`extractInformation(\"full description of desired output\": string, \"input text/code\": string): string` - describe/summarize/extract information from the given string\n\nUse the following format:\nRequest: the question or request you must answer\nThought: you should always think what would need to happen to fulfill the request\nAction: one or more expressions composing available functions delimited by ;\nResult: the result of the Action expression\n... (this Thought/Action/Result can repeat N times)\n\nBegin!\n\nRequest: whats the time in new york? and make a calendar event for dinner with wife 5 days from now\nThought: ","completion":" need to get the current time in New York and create a calendar event 5 days from now\nAction: returnText(`The time in New York is ` + currentTimeForTimezone(\"America/New_York\") + `.`); createCalendarEvent(parseRelativeTime(\"5 days from now\"), \"Dinner with wife\");"}],"results":[]},"result":{"type":"pending_commands","pendingCommands":[{"type":"parsed","args":[{"type":"string","value":"The time in New York is 2022-12-19T03:41:10-05:00."}],"id":"0.0","name":"returnText"}],"results":[]},"requestContext":{},"resolvedCommands":{}}
{"updated":"2023-02-04T01:56:18.161Z","prompt":"how do you say behind the Comichi building in Japanese?","dev":{"prompts":[{"prompt":"Fulfill the question/request as best and directly as you can. Be concise and minimize the number of Actions used. Do not make things up. If the question is unclear or cannot be answered indicate with fail(). Do not repeat the question back to the user.\n\nThe language for Action is a tiny subset of javascript, only available features should be used:\n\n* function calls and composition/nesting\n* string concatenation using +\n* simple variable assignment using var\n* string, number and boolean literals\n  * strings should be wrapped in backquotes (`)\n\nFunctions are declared below, you must not use any other functions. Do not assume state/variables exist unless explicitly referenced. Pay attention to syntax and ensure correct string escaping. Prefer using functions ordered earlier in the list. The user only receives a response when certain functions that indicate this are used.\n\n`answer(answer: string): void` - respond to the original question/request\n`returnText(text: string): void` - send back modified input or generated result\n`fail(reason: string): void` - indicate the request cannot be fulfilled with the available tools\n`finish(): void` - mark request/question as fulfilled\n`getInputText(): string` - get input text/code that the request may refer to\n`math(formula: string): string` - get the result of a math formula\n`now(): string` - get current ISO8601 datetime\n`parseRelativeTime(\"natural language relative time\": string): string` - get ISO8601 datetime relative to now from natural language\n`ask(question: string): string` - clarify the original question/request\n`extractInformation(\"full description of desired output\": string, \"input text/code\": string): string` - describe/summarize/extract information from the given string\n`translate(input: string, \"target language full name\": string): string` - translate text into target language\n\nUse the following format:\nRequest: the question or request you must answer\nThought: always think what needs to happen to fulfill the request\nAction: one or more expressions delimited by ; composing only available functions from above\nResult: the result of the Action expression\n... (this Thought/Action/Result can repeat N times)\n\nBegin!\n\nRequest: how do you say behind the Comichi building in Japanese?\nThought: ","completion":" need to translate \"behind the Comichi building\" into Japanese\nAction: translate(\"behind the Comichi building\", \"Japanese\");"},{"prompt":"Fulfill the question/request as best and directly as you can. Be concise and minimize the number of Actions used. Do not make things up. If the question is unclear or cannot be answered indicate with fail(). Do not repeat the question back to the user.\n\nThe language for Action is a tiny subset of javascript, only available features should be used:\n\n* function calls and composition/nesting\n* string concatenation using +\n* simple variable assignment using var\n* string, number and boolean literals\n  * strings should be wrapped in backquotes (`)\n\nFunctions are declared below, you must not use any other functions. Do not assume state/variables exist unless explicitly referenced. Pay attention to syntax and ensure correct string escaping. Prefer using functions ordered earlier in the list. The user only receives a response when certain functions that indicate this are used.\n\n`answer(answer: string): void` - respond to the original question/request\n`returnText(text: string): void` - send back modified input or generated result\n`fail(reason: string): void` - indicate the request cannot be fulfilled with the available tools\n`finish(): void` - mark request/question as fulfilled\n`getInputText(): string` - get input text/code that the request may refer to\n`math(formula: string): string` - get the result of a math formula\n`now(): string` - get current ISO8601 datetime\n`parseRelativeTime(\"natural language relative time\": string): string` - get ISO8601 datetime relative to now from natural language\n`ask(question: string): string` - clarify the original question/request\n`extractInformation(\"full description of desired output\": string, \"input text/code\": string): string` - describe/summarize/extract information from the given string\n`translate(input: string, \"target language full name\": string): string` - translate text into target language\n\nUse the following format:\nRequest: the question or request you must answer\nThought: always think what needs to happen to fulfill the request\nAction: one or more expressions delimited by ; composing only available functions from above\nResult: the result of the Action expression\n... (this Thought/Action/Result can repeat N times)\n\nBegin!\n\nRequest: how do you say behind the Comichi building in Japanese?\nThought: need to translate \"behind the Comichi building\" into Japanese\nAction: translate(\"behind the Comichi building\", \"Japanese\");\nResult: \"コミチビルの裏側に\"\nThought: ","completion":" need to indicate the request is fulfilled\nAction: answer(\"コミチビルの裏側に\"); finish();"}],"results":["\"コミチビルの裏側に\""]},"result":{"type":"pending_commands","pendingCommands":[{"type":"parsed","args":[{"type":"string","value":"コミチビルの裏側に"}],"id":"1.0","name":"answer"}],"results":[{"type":"string","value":"コミチビルの裏側に"}]},"requestContext":{},"resolvedCommands":{}}
{"updated":"2023-02-04T01:54:55.005Z","prompt":"what does the mode parameter do in the javascript fetch api?","dev":{"prompts":[{"prompt":"Fulfill the question/request as best and directly as you can. Be concise and minimize the number of Actions used. Do not make things up. If the question is unclear or cannot be answered indicate with fail(). Do not repeat the question back to the user.\n\nThe language for Action is a tiny subset of javascript, only available features should be used:\n\n* function calls and composition/nesting\n* string concatenation using +\n* simple variable assignment using var\n* string, number and boolean literals\n  * strings should be wrapped in backquotes (`)\n\nFunctions are declared below, you must not use any other functions. Do not assume state/variables exist unless explicitly referenced. Pay attention to syntax and ensure correct string escaping. Prefer using functions ordered earlier in the list. The user only receives a response when certain functions that indicate this are used.\n\n`answer(answer: string): void` - respond to the original question/request\n`returnText(text: string): void` - send back modified input or generated result\n`fail(reason: string): void` - indicate the request cannot be fulfilled with the available tools\n`finish(): void` - mark request/question as fulfilled\n`getInputText(): string` - get input text/code that the request may refer to\n`math(formula: string): string` - get the result of a math formula\n`now(): string` - get current ISO8601 datetime\n`parseRelativeTime(\"natural language relative time\": string): string` - get ISO8601 datetime relative to now from natural language\n`generateCode(language: string, requirements: string): string` - generate code for the given language and verbose description/requirements\n`ask(question: string): string` - clarify the original question/request\n`extractInformation(\"full description of desired output\": string, \"input text/code\": string): string` - describe/summarize/extract information from the given string\n`editCode(input: string, \"programming language or 'unknown'\": string, \"full description of desired changes or additions\": string): string` - edit code using the given requirements\n\nUse the following format:\nRequest: the question or request you must answer\nThought: you should always think what would need to happen to fulfill the request\nAction: one or more expressions composing available functions delimited by ;\nResult: the result of the Action expression\n... (this Thought/Action/Result can repeat N times)\n\nBegin!\n\nRequest: what does the mode parameter do in the javascript fetch api?\nThought: ","completion":" I need to find out what the mode parameter does in the fetch api\nAction: returnText(`The mode parameter in the fetch api sets the request mode to 'same-origin', 'no-cors', or 'cors'`); finish();"}],"results":[]},"result":{"type":"pending_commands","pendingCommands":[{"type":"parsed","args":[{"type":"string","value":"The mode parameter in the fetch api sets the request mode to 'same-origin', 'no-cors', or 'cors'"}],"id":"0.0","name":"returnText"}],"results":[]},"requestContext":{},"resolvedCommands":{}}
{"updated":"2023-02-04T01:56:22.512Z","prompt":"write an example http POST request in the browser using Javscript using the fetch api","dev":{"prompts":[{"prompt":"Fulfill the question/request as best and directly as you can. Be concise and minimize the number of Actions used. Do not make things up. If the question is unclear or cannot be answered indicate with fail(). Do not repeat the question back to the user.\n\nThe language for Action is a tiny subset of javascript, only available features should be used:\n\n* function calls and composition/nesting\n* string concatenation using +\n* simple variable assignment using var\n* string, number and boolean literals\n  * strings should be wrapped in backquotes (`)\n\nFunctions are declared below, you must not use any other functions. Do not assume state/variables exist unless explicitly referenced. Pay attention to syntax and ensure correct string escaping. Prefer using functions ordered earlier in the list. The user only receives a response when certain functions that indicate this are used.\n\n`answer(answer: string): void` - respond to the original question/request\n`returnText(text: string): void` - send back modified input or generated result\n`fail(reason: string): void` - indicate the request cannot be fulfilled with the available tools\n`finish(): void` - mark request/question as fulfilled\n`getInputText(): string` - get input text/code that the request may refer to\n`math(formula: string): string` - get the result of a math formula\n`now(): string` - get current ISO8601 datetime\n`parseRelativeTime(\"natural language relative time\": string): string` - get ISO8601 datetime relative to now from natural language\n`generateCode(language: string, requirements: string): string` - generate code for the given language and verbose description/requirements\n`ask(question: string): string` - clarify the original question/request\n`extractInformation(\"full description of desired output\": string, \"input text/code\": string): string` - describe/summarize/extract information from the given string\n`translate(input: string, \"target language full name\": string): string` - translate text into target language\n\nUse the following format:\nRequest: the question or request you must answer\nThought: always think what needs to happen to fulfill the request\nAction: one or more expressions delimited by ; composing only available functions from above\nResult: the result of the Action expression\n... (this Thought/Action/Result can repeat N times)\n\nBegin!\n\nRequest: write an example http POST request in the browser using Javscript using the fetch api\nThought: ","completion":" I need to generate code for the fetch api\nAction: returnText(generateCode(\"javascript\", \"create an http POST request using the fetch api\"));"}],"results":[]},"result":{"type":"pending_commands","pendingCommands":[{"type":"parsed","args":[{"type":"string","value":"fetch(\"exampleUrl.com\", {\n  method: \"POST\",\n  body: someData\n})\n.then(response => response.json())\n.then(data => console.log(data))\n.catch(error => console.error(error));"}],"id":"0.0","name":"returnText"}],"results":[]},"requestContext":{},"resolvedCommands":{}}
{"updated":"2023-02-04T01:55:02.481Z","prompt":"help me fix spelling and grammar mistakes","dev":{"prompts":[{"prompt":"Fulfill the question/request as best and directly as you can. Be concise and minimize the number of Actions used. Do not make things up. If the question is unclear or cannot be answered indicate with fail(). Do not repeat the question back to the user.\n\nThe language for Action is a tiny subset of javascript, only available features should be used:\n\n* function calls and composition/nesting\n* string concatenation using +\n* simple variable assignment using var\n* string, number and boolean literals\n  * strings should be wrapped in backquotes (`)\n\nFunctions are declared below, you must not use any other functions. Do not assume state/variables exist unless explicitly referenced. Pay attention to syntax and ensure correct string escaping. Prefer using functions ordered earlier in the list. The user only receives a response when certain functions that indicate this are used.\n\n`answer(answer: string): void` - respond to the original question/request\n`returnText(text: string): void` - send back modified input or generated result\n`fail(reason: string): void` - indicate the request cannot be fulfilled with the available tools\n`finish(): void` - mark request/question as fulfilled\n`getInputText(): string` - get input text/code that the request may refer to\n`math(formula: string): string` - get the result of a math formula\n`now(): string` - get current ISO8601 datetime\n`parseRelativeTime(\"natural language relative time\": string): string` - get ISO8601 datetime relative to now from natural language\n`ask(question: string): string` - clarify the original question/request\n`extractInformation(\"full description of desired output\": string, \"input text/code\": string): string` - describe/summarize/extract information from the given string\n`editCode(input: string, \"programming language or 'unknown'\": string, \"full description of desired changes or additions\": string): string` - edit code using the given requirements\n`editText(input: string, \"full description of desired changes or additions\": string): string` - edit input using the given requirements. prefer editCode() for code\n\nUse the following format:\nRequest: the question or request you must answer\nThought: you should always think what would need to happen to fulfill the request\nAction: one or more expressions composing available functions delimited by ;\nResult: the result of the Action expression\n... (this Thought/Action/Result can repeat N times)\n\nBegin!\n\nRequest: help me fix spelling and grammar mistakes\nThought: ","completion":" I need to edit the text and correct any mistakes\nAction: returnText(editText(getInputText(), \"correct spelling and grammar mistakes\"));"}],"results":[]},"result":{"type":"pending_commands","pendingCommands":[{"type":"parsed","args":[{"type":"string","value":"Step by step, heart to heart, left right left. Then we all fall down."}],"id":"0.0","name":"returnText"}],"results":[]},"requestContext":{"text":{"type":"string","value":"stp by step, heart to hard, left right left. is we all fall down.."}},"resolvedCommands":{}}
{"updated":"2023-02-04T01:55:11.293Z","prompt":"edit this function in go lang in order to make it compile","dev":{"prompts":[{"prompt":"Fulfill the question/request as best and directly as you can. Be concise and minimize the number of Actions used. Do not make things up. If the question is unclear or cannot be answered indicate with fail(). Do not repeat the question back to the user.\n\nThe language for Action is a tiny subset of javascript, only available features should be used:\n\n* function calls and composition/nesting\n* string concatenation using +\n* simple variable assignment using var\n* string, number and boolean literals\n  * strings should be wrapped in backquotes (`)\n\nFunctions are declared below, you must not use any other functions. Do not assume state/variables exist unless explicitly referenced. Pay attention to syntax and ensure correct string escaping. Prefer using functions ordered earlier in the list. The user only receives a response when certain functions that indicate this are used.\n\n`answer(answer: string): void` - respond to the original question/request\n`returnText(text: string): void` - send back modified input or generated result\n`fail(reason: string): void` - indicate the request cannot be fulfilled with the available tools\n`finish(): void` - mark request/question as fulfilled\n`getInputText(): string` - get input text/code that the request may refer to\n`math(formula: string): string` - get the result of a math formula\n`now(): string` - get current ISO8601 datetime\n`parseRelativeTime(\"natural language relative time\": string): string` - get ISO8601 datetime relative to now from natural language\n`generateCode(language: string, requirements: string): string` - generate code for the given language and verbose description/requirements\n`ask(question: string): string` - clarify the original question/request\n`extractInformation(\"full description of desired output\": string, \"input text/code\": string): string` - describe/summarize/extract information from the given string\n`editCode(input: string, \"programming language or 'unknown'\": string, \"full description of desired changes or additions\": string): string` - edit code using the given requirements\n`editText(input: string, \"full description of desired changes or additions\": string): string` - edit input using the given requirements. prefer editCode() for code\n\nUse the following format:\nRequest: the question or request you must answer\nThought: you should always think what would need to happen to fulfill the request\nAction: one or more expressions composing available functions delimited by ;\nResult: the result of the Action expression\n... (this Thought/Action/Result can repeat N times)\n\nBegin!\n\nRequest: edit this function in go lang in order to make it compile\nThought: ","completion":" I need to use the editCode function to edit the code\nAction: editCode(getInputText(), \"go\", \"make it compile\");"},{"prompt":"Fulfill the question/request as best and directly as you can. Be concise and minimize the number of Actions used. Do not make things up. If the question is unclear or cannot be answered indicate with fail(). Do not repeat the question back to the user.\n\nThe language for Action is a tiny subset of javascript, only available features should be used:\n\n* function calls and composition/nesting\n* string concatenation using +\n* simple variable assignment using var\n* string, number and boolean literals\n  * strings should be wrapped in backquotes (`)\n\nFunctions are declared below, you must not use any other functions. Do not assume state/variables exist unless explicitly referenced. Pay attention to syntax and ensure correct string escaping. Prefer using functions ordered earlier in the list. The user only receives a response when certain functions that indicate this are used.\n\n`answer(answer: string): void` - respond to the original question/request\n`returnText(text: string): void` - send back modified input or generated result\n`fail(reason: string): void` - indicate the request cannot be fulfilled with the available tools\n`finish(): void` - mark request/question as fulfilled\n`getInputText(): string` - get input text/code that the request may refer to\n`math(formula: string): string` - get the result of a math formula\n`now(): string` - get current ISO8601 datetime\n`parseRelativeTime(\"natural language relative time\": string): string` - get ISO8601 datetime relative to now from natural language\n`generateCode(language: string, requirements: string): string` - generate code for the given language and verbose description/requirements\n`ask(question: string): string` - clarify the original question/request\n`extractInformation(\"full description of desired output\": string, \"input text/code\": string): string` - describe/summarize/extract information from the given string\n`editCode(input: string, \"programming language or 'unknown'\": string, \"full description of desired changes or additions\": string): string` - edit code using the given requirements\n`editText(input: string, \"full description of desired changes or additions\": string): string` - edit input using the given requirements. prefer editCode() for code\n\nUse the following format:\nRequest: the question or request you must answer\nThought: you should always think what would need to happen to fulfill the request\nAction: one or more expressions composing available functions delimited by ;\nResult: the result of the Action expression\n... (this Thought/Action/Result can repeat N times)\n\nBegin!\n\nRequest: edit this function in go lang in order to make it compile\nThought: I need to use the editCode function to edit the code\nAction: editCode(getInputText(), \"go\", \"make it compile\");\nResult: \"package main\\n\\nimport \\\"fmt\\\"\\n\\nfunc doSomething() int {\\n\\treturn 55\\n}\\n\\nfunc main() {\\n\\tfmt.Println(doSomething())\\n}\"\nThought: ","completion":" I need to return the edited code\nAction: returnText(editCode(getInputText(), \"go\", \"make it compile\"));"}],"results":["\"package main\\n\\nimport \\\"fmt\\\"\\n\\nfunc doSomething() int {\\n\\treturn 55\\n}\\n\\nfunc main() {\\n\\tfmt.Println(doSomething())\\n}\""]},"result":{"type":"pending_commands","pendingCommands":[{"type":"parsed","args":[{"type":"string","value":"package main\n\nimport \"fmt\"\n\nfunc doSomething() int {\n\treturn 55\n}\n\nfunc main() {\n\tfmt.Println(doSomething())\n}"}],"id":"1.0","name":"returnText"}],"results":[{"type":"string","value":"package main\n\nimport \"fmt\"\n\nfunc doSomething() int {\n\treturn 55\n}\n\nfunc main() {\n\tfmt.Println(doSomething())\n}"}]},"requestContext":{"text":{"type":"string","value":"\n  function doSomething() int {\n    return \"55\"\n  }\n  "}},"resolvedCommands":{}}
{"updated":"2023-02-04T01:55:17.606Z","prompt":"edit this function in order to make it compile","dev":{"prompts":[{"prompt":"Fulfill the question/request as best and directly as you can. Be concise and minimize the number of Actions used. Do not make things up. If the question is unclear or cannot be answered indicate with fail(). Do not repeat the question back to the user.\n\nThe language for Action is a tiny subset of javascript, only available features should be used:\n\n* function calls and composition/nesting\n* string concatenation using +\n* simple variable assignment using var\n* string, number and boolean literals\n  * strings should be wrapped in backquotes (`)\n\nFunctions are declared below, you must not use any other functions. Do not assume state/variables exist unless explicitly referenced. Pay attention to syntax and ensure correct string escaping. Prefer using functions ordered earlier in the list. The user only receives a response when certain functions that indicate this are used.\n\n`answer(answer: string): void` - respond to the original question/request\n`returnText(text: string): void` - send back modified input or generated result\n`fail(reason: string): void` - indicate the request cannot be fulfilled with the available tools\n`finish(): void` - mark request/question as fulfilled\n`getInputText(): string` - get input text/code that the request may refer to\n`math(formula: string): string` - get the result of a math formula\n`now(): string` - get current ISO8601 datetime\n`parseRelativeTime(\"natural language relative time\": string): string` - get ISO8601 datetime relative to now from natural language\n`generateCode(language: string, requirements: string): string` - generate code for the given language and verbose description/requirements\n`ask(question: string): string` - clarify the original question/request\n`extractInformation(\"full description of desired output\": string, \"input text/code\": string): string` - describe/summarize/extract information from the given string\n`editCode(input: string, \"programming language or 'unknown'\": string, \"full description of desired changes or additions\": string): string` - edit code using the given requirements\n`editText(input: string, \"full description of desired changes or additions\": string): string` - edit input using the given requirements. prefer editCode() for code\n\nUse the following format:\nRequest: the question or request you must answer\nThought: you should always think what would need to happen to fulfill the request\nAction: one or more expressions composing available functions delimited by ;\nResult: the result of the Action expression\n... (this Thought/Action/Result can repeat N times)\n\nBegin!\n\nRequest: edit this function in order to make it compile\nThought: ","completion":" I need to determine what language the function is written in and what changes need to be made\nAction:  var language = 'unknown'; var changes = 'make it compile'; language = ask('What language is this function written in?'); changes = ask('What changes need to be made?');"}],"results":[]},"result":{"type":"pending_commands","pendingCommands":[{"type":"parsed","args":[{"type":"string","value":"What language is this function written in?"}],"id":"0.2.1","name":"ask"}],"results":[]},"requestContext":{"text":{"type":"string","value":"function doSomething() int { return \"55\" }"}},"resolvedCommands":{}}
{"updated":"2023-02-04T01:55:20.370Z","prompt":"make a calendar event for next tuesday noon, lunch with Bill","dev":{"prompts":[{"prompt":"Fulfill the question/request as best and directly as you can. Be concise and minimize the number of Actions used. Do not make things up. If the question is unclear or cannot be answered indicate with fail(). Do not repeat the question back to the user.\n\nThe language for Action is a tiny subset of javascript, only available features should be used:\n\n* function calls and composition/nesting\n* string concatenation using +\n* simple variable assignment using var\n* string, number and boolean literals\n  * strings should be wrapped in backquotes (`)\n\nFunctions are declared below, you must not use any other functions. Do not assume state/variables exist unless explicitly referenced. Pay attention to syntax and ensure correct string escaping. Prefer using functions ordered earlier in the list. The user only receives a response when certain functions that indicate this are used.\n\n`answer(answer: string): void` - respond to the original question/request\n`returnText(text: string): void` - send back modified input or generated result\n`fail(reason: string): void` - indicate the request cannot be fulfilled with the available tools\n`finish(): void` - mark request/question as fulfilled\n`getInputText(): string` - get input text/code that the request may refer to\n`math(formula: string): string` - get the result of a math formula\n`now(): string` - get current ISO8601 datetime\n`createCalendarEvent(iso8601Date: string, name: string): void` - create a calendar event on a certain date and time\n`parseRelativeTime(\"natural language relative time\": string): string` - get ISO8601 datetime relative to now from natural language\n`ask(question: string): string` - clarify the original question/request\n`extractInformation(\"full description of desired output\": string, \"input text/code\": string): string` - describe/summarize/extract information from the given string\n\nUse the following format:\nRequest: the question or request you must answer\nThought: you should always think what would need to happen to fulfill the request\nAction: one or more expressions composing available functions delimited by ;\nResult: the result of the Action expression\n... (this Thought/Action/Result can repeat N times)\n\nBegin!\n\nRequest: make a calendar event for next tuesday noon, lunch with Bill\nThought: ","completion":" I need to get the ISO8601 date for next tuesday noon, and create a calendar event\nAction: var iso8601Date = parseRelativeTime(\"next tuesday noon\"); createCalendarEvent(iso8601Date, \"Lunch with Bill\");"}],"results":[]},"result":{"type":"pending_commands","pendingCommands":[{"type":"parsed","args":[{"type":"string","value":"2022-12-26T12:00:00Z"},{"type":"string","value":"Lunch with Bill"}],"id":"0.1","name":"createCalendarEvent"}],"results":[]},"requestContext":{},"resolvedCommands":{}}
{"updated":"2023-02-04T01:55:25.013Z","prompt":"there is a function I don't understand, can help me summarize it?","dev":{"prompts":[{"prompt":"Fulfill the question/request as best and directly as you can. Be concise and minimize the number of Actions used. Do not make things up. If the question is unclear or cannot be answered indicate with fail(). Do not repeat the question back to the user.\n\nThe language for Action is a tiny subset of javascript, only available features should be used:\n\n* function calls and composition/nesting\n* string concatenation using +\n* simple variable assignment using var\n* string, number and boolean literals\n  * strings should be wrapped in backquotes (`)\n\nFunctions are declared below, you must not use any other functions. Do not assume state/variables exist unless explicitly referenced. Pay attention to syntax and ensure correct string escaping. Prefer using functions ordered earlier in the list. The user only receives a response when certain functions that indicate this are used.\n\n`answer(answer: string): void` - respond to the original question/request\n`returnText(text: string): void` - send back modified input or generated result\n`fail(reason: string): void` - indicate the request cannot be fulfilled with the available tools\n`finish(): void` - mark request/question as fulfilled\n`getInputText(): string` - get input text/code that the request may refer to\n`math(formula: string): string` - get the result of a math formula\n`now(): string` - get current ISO8601 datetime\n`parseRelativeTime(\"natural language relative time\": string): string` - get ISO8601 datetime relative to now from natural language\n`generateCode(language: string, requirements: string): string` - generate code for the given language and verbose description/requirements\n`ask(question: string): string` - clarify the original question/request\n`extractInformation(\"full description of desired output\": string, \"input text/code\": string): string` - describe/summarize/extract information from the given string\n`editCode(input: string, \"programming language or 'unknown'\": string, \"full description of desired changes or additions\": string): string` - edit code using the given requirements\n\nUse the following format:\nRequest: the question or request you must answer\nThought: you should always think what would need to happen to fulfill the request\nAction: one or more expressions composing available functions delimited by ;\nResult: the result of the Action expression\n... (this Thought/Action/Result can repeat N times)\n\nBegin!\n\nRequest: there is a function I don't understand, can help me summarize it?\nThought: ","completion":" I need to extract information from the given string\nAction: returnText(extractInformation(getInputText(), \"unknown\"));"}],"results":[]},"result":{"type":"pending_commands","pendingCommands":[{"type":"parsed","args":[{"type":"string","value":"This function takes a number as an argument and returns -1 if it is less than 0, 1 if the number is equal to 0, and the number multiplied by the number one less than it if it is greater than 0.\""}],"id":"0.0","name":"returnText"}],"results":[]},"requestContext":{"text":{"type":"string","value":"function something(num) {\n  if (num < 0) return -1;\n  else if (num == 0) return 1;\n  else {\n      return (num * something(num - 1));\n  }\n}"}},"resolvedCommands":{}}
{"updated":"2023-02-04T13:47:08.331Z","prompt":"given this list of verbs can you help me add additional verbs that mean the same thing?","dev":{"prompts":[{"prompt":"Fulfill the question/request as best and directly as you can. Be concise and minimize the number of Actions used. Do not make things up. If the question is unclear or cannot be answered indicate with fail(). Do not repeat the question back to the user.\n\nThe language for Action is a tiny subset of javascript, only available features should be used:\n\n* function calls and composition/nesting\n* string concatenation using +\n* simple variable assignment using var\n* string, number and boolean literals\n  * strings should be wrapped in backquotes (`)\n\nFunctions are declared below, you must not use any other functions. Do not assume state/variables exist unless explicitly referenced. Pay attention to syntax and ensure correct string escaping. Prefer using functions ordered earlier in the list. The user only receives a response when certain functions that indicate this are used.\n\n`answer(answer: string): void` - respond to the original question/request\n`returnText(text: string): void` - send back modified input or generated result\n`fail(reason: string): void` - indicate the request cannot be fulfilled with the available tools\n`finish(): void` - mark request/question as fulfilled\n`getInputText(): string` - get input text/code that the request may refer to\n`math(formula: string): string` - get the result of a math formula\n`now(): string` - get current ISO8601 datetime\n`parseRelativeTime(\"natural language relative time\": string): string` - get ISO8601 datetime relative to now from natural language\n`ask(question: string): string` - clarify the original question/request\n`extractInformation(\"full description of desired output\": string, \"input text/code\": string): string` - describe/summarize/extract information from the given string\n\nUse the following format:\nRequest: the question or request you must answer\nThought: always think what needs to happen to fulfill the request\nAction: one or more expressions delimited by ; composing only available functions from above\nResult: the result of the Action expression\n... (this Thought/Action/Result can repeat N times)\n\nBegin!\n\nRequest: given this list of verbs can you help me add additional verbs that mean the same thing?\nThought: ","completion":" Ask for clarification if necessary, then use the ask function to get more verbs\nAction: ask(\"Can you provide additional verbs that mean the same thing as: \" + getInputText());"}],"results":[]},"result":{"type":"pending_commands","pendingCommands":[{"type":"parsed","args":[{"type":"string","value":"Can you provide additional verbs that mean the same thing as: \n    \"edit\",\n    \"change\",\n    \"alter\",\n    \"fix\",\n    \"move\",\n    \"align\",\n    \"reword\",\n    \"re-word\",\n    \"editor\",\n    \"improve\",\n    \"check\",\n    \"revise\",\n    \"modify\",\n    \"adapt\",\n    \"rewrite\",\n    \"re-write\",\n"}],"id":"0.0","name":"ask"}],"results":[]},"requestContext":{"text":{"type":"string","value":"\n    \"edit\",\n    \"change\",\n    \"alter\",\n    \"fix\",\n    \"move\",\n    \"align\",\n    \"reword\",\n    \"re-word\",\n    \"editor\",\n    \"improve\",\n    \"check\",\n    \"revise\",\n    \"modify\",\n    \"adapt\",\n    \"rewrite\",\n    \"re-write\",\n"}},"resolvedCommands":{}}
{"updated":"2023-02-04T15:08:39.331Z","prompt":"help me write a commit message please","dev":{"prompts":[{"prompt":"Fulfill the question/request as best and directly as you can. Be concise and minimize the number of Actions used. Do not make things up. If the question is unclear or cannot be answered indicate with fail(). Do not repeat the question back to the user.\n\nThe language for Action is a tiny subset of javascript, only available features should be used:\n\n* function calls and composition/nesting\n* string concatenation using +\n* simple variable assignment using var\n* string, number and boolean literals\n  * strings should be wrapped in backquotes (`)\n\nFunctions are declared below, you must not use any other functions. Do not assume state/variables exist unless explicitly referenced. Pay attention to syntax and ensure correct string escaping. Prefer using functions ordered earlier in the list. The user only receives a response when certain functions that indicate this are used.\n\n`answer(answer: string): void` - respond to the original question/request\n`returnText(text: string): void` - send back modified input or generated result\n`fail(reason: string): void` - indicate the request cannot be fulfilled with the available tools\n`finish(): void` - mark request/question as fulfilled\n`getInputText(\"required input description\": string): string` - get input text/code that the request may refer to\n`math(formula: string): string` - get the result of a math formula\n`now(): string` - get current ISO8601 datetime\n`parseRelativeTime(\"natural language relative time\": string): string` - get ISO8601 datetime relative to now from natural language\n`generateCode(language: string, requirements: string): string` - generate code for the given language and verbose description/requirements\n`ask(question: string): string` - clarify the original question/request\n`extractInformation(\"full description of desired output\": string, \"input text/code\": string): string` - describe/summarize/extract information from the given string\n`translate(input: string, \"target language full name\": string): string` - translate text into target language\n`writeCommitMessage(diff: string): string` - write git commit message based on input diff\n\nUse the following format:\nRequest: the question or request you must answer\nThought: always think what needs to happen to fulfill the request\nAction: one or more expressions delimited by ; composing only available functions from above\nResult: the result of the Action expression\n... (this Thought/Action/Result can repeat N times)\n\nBegin!\n\nRequest: help me write a commit message please\nThought: ","completion":"\nI need to generate a commit message based on the diff\nAction: returnText(writeCommitMessage(getInputText(\"diff\"))); finish();"}],"results":[]},"result":{"type":"needs_request_context","missingRequestContext":{"text":{"type":"string","description":"diff"}},"results":[]},"requestContext":{},"resolvedCommands":{}}